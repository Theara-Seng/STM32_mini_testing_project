
uart_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003eb4  08003eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f50  08003f50  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003f50  08003f50  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f50  08003f50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000070  08003fc8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003fc8  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009498  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017be  00000000  00000000  00029531  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000950  00000000  00000000  0002acf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b0  00000000  00000000  0002b640  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017252  00000000  00000000  0002bef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000079f0  00000000  00000000  00043142  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084837  00000000  00000000  0004ab32  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf369  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa8  00000000  00000000  000cf3e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e9c 	.word	0x08003e9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003e9c 	.word	0x08003e9c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029a:	f1a4 0401 	sub.w	r4, r4, #1
 800029e:	d1e9      	bne.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2f>:
 80008f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000900:	bf24      	itt	cs
 8000902:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000906:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090a:	d90d      	bls.n	8000928 <__aeabi_d2f+0x30>
 800090c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000910:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000914:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000918:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800091c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000920:	bf08      	it	eq
 8000922:	f020 0001 	biceq.w	r0, r0, #1
 8000926:	4770      	bx	lr
 8000928:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800092c:	d121      	bne.n	8000972 <__aeabi_d2f+0x7a>
 800092e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000932:	bfbc      	itt	lt
 8000934:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000938:	4770      	bxlt	lr
 800093a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000942:	f1c2 0218 	rsb	r2, r2, #24
 8000946:	f1c2 0c20 	rsb	ip, r2, #32
 800094a:	fa10 f30c 	lsls.w	r3, r0, ip
 800094e:	fa20 f002 	lsr.w	r0, r0, r2
 8000952:	bf18      	it	ne
 8000954:	f040 0001 	orrne.w	r0, r0, #1
 8000958:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000960:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000964:	ea40 000c 	orr.w	r0, r0, ip
 8000968:	fa23 f302 	lsr.w	r3, r3, r2
 800096c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000970:	e7cc      	b.n	800090c <__aeabi_d2f+0x14>
 8000972:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000976:	d107      	bne.n	8000988 <__aeabi_d2f+0x90>
 8000978:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800097c:	bf1e      	ittt	ne
 800097e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000982:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000986:	4770      	bxne	lr
 8000988:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800098c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000990:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_f2uiz>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	d20e      	bcs.n	80009ba <__aeabi_f2uiz+0x22>
 800099c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009a0:	d30b      	bcc.n	80009ba <__aeabi_f2uiz+0x22>
 80009a2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009aa:	d409      	bmi.n	80009c0 <__aeabi_f2uiz+0x28>
 80009ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009b4:	fa23 f002 	lsr.w	r0, r3, r2
 80009b8:	4770      	bx	lr
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	4770      	bx	lr
 80009c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009c4:	d101      	bne.n	80009ca <__aeabi_f2uiz+0x32>
 80009c6:	0242      	lsls	r2, r0, #9
 80009c8:	d102      	bne.n	80009d0 <__aeabi_f2uiz+0x38>
 80009ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ce:	4770      	bx	lr
 80009d0:	f04f 0000 	mov.w	r0, #0
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	091b      	lsrs	r3, r3, #4
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	461a      	mov	r2, r3
 80009ea:	4613      	mov	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	4413      	add	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	461a      	mov	r2, r3
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	4413      	add	r3, r2
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
	...

08000a08 <Get_Temp>:
	set_time[6] = decToBcd(year);

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}
float Get_Temp (void)
{
 8000a08:	b5b0      	push	{r4, r5, r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af04      	add	r7, sp, #16
	uint8_t temp[2];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x11, 1, temp, 2, 1000);
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	9302      	str	r3, [sp, #8]
 8000a14:	2302      	movs	r3, #2
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	2211      	movs	r2, #17
 8000a20:	21d0      	movs	r1, #208	; 0xd0
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <Get_Temp+0x64>)
 8000a24:	f001 f8d4 	bl	8001bd0 <HAL_I2C_Mem_Read>
	return ((temp[0])+(temp[1]>>6)/4.0);
 8000a28:	793b      	ldrb	r3, [r7, #4]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fce8 	bl	8000400 <__aeabi_i2d>
 8000a30:	4604      	mov	r4, r0
 8000a32:	460d      	mov	r5, r1
 8000a34:	797b      	ldrb	r3, [r7, #5]
 8000a36:	099b      	lsrs	r3, r3, #6
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fce0 	bl	8000400 <__aeabi_i2d>
 8000a40:	f04f 0200 	mov.w	r2, #0
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <Get_Temp+0x68>)
 8000a46:	f7ff fe6f 	bl	8000728 <__aeabi_ddiv>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	4620      	mov	r0, r4
 8000a50:	4629      	mov	r1, r5
 8000a52:	f7ff fb89 	bl	8000168 <__adddf3>
 8000a56:	4603      	mov	r3, r0
 8000a58:	460c      	mov	r4, r1
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	4621      	mov	r1, r4
 8000a5e:	f7ff ff4b 	bl	80008f8 <__aeabi_d2f>
 8000a62:	4603      	mov	r3, r0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a6c:	20000098 	.word	0x20000098
 8000a70:	40100000 	.word	0x40100000

08000a74 <Get_Time>:
void Get_Time (void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	9302      	str	r3, [sp, #8]
 8000a80:	2307      	movs	r3, #7
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	463b      	mov	r3, r7
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2301      	movs	r3, #1
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	21d0      	movs	r1, #208	; 0xd0
 8000a8e:	481f      	ldr	r0, [pc, #124]	; (8000b0c <Get_Time+0x98>)
 8000a90:	f001 f89e 	bl	8001bd0 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000a94:	783b      	ldrb	r3, [r7, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff9e 	bl	80009d8 <bcdToDec>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <Get_Time+0x9c>)
 8000aa2:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000aa4:	787b      	ldrb	r3, [r7, #1]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff96 	bl	80009d8 <bcdToDec>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <Get_Time+0x9c>)
 8000ab2:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000ab4:	78bb      	ldrb	r3, [r7, #2]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff8e 	bl	80009d8 <bcdToDec>
 8000abc:	4603      	mov	r3, r0
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <Get_Time+0x9c>)
 8000ac2:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff86 	bl	80009d8 <bcdToDec>
 8000acc:	4603      	mov	r3, r0
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <Get_Time+0x9c>)
 8000ad2:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000ad4:	793b      	ldrb	r3, [r7, #4]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff7e 	bl	80009d8 <bcdToDec>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <Get_Time+0x9c>)
 8000ae2:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000ae4:	797b      	ldrb	r3, [r7, #5]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff76 	bl	80009d8 <bcdToDec>
 8000aec:	4603      	mov	r3, r0
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <Get_Time+0x9c>)
 8000af2:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8000af4:	79bb      	ldrb	r3, [r7, #6]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff6e 	bl	80009d8 <bcdToDec>
 8000afc:	4603      	mov	r3, r0
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <Get_Time+0x9c>)
 8000b02:	719a      	strb	r2, [r3, #6]
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000098 	.word	0x20000098
 8000b10:	20000110 	.word	0x20000110

08000b14 <force_temp_conv>:
void force_temp_conv (void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af04      	add	r7, sp, #16
	uint8_t status=0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	uint8_t control=0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0F, 1, &status, 1, 100);  // read status register
 8000b22:	2364      	movs	r3, #100	; 0x64
 8000b24:	9302      	str	r3, [sp, #8]
 8000b26:	2301      	movs	r3, #1
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	220f      	movs	r2, #15
 8000b32:	21d0      	movs	r1, #208	; 0xd0
 8000b34:	4813      	ldr	r0, [pc, #76]	; (8000b84 <force_temp_conv+0x70>)
 8000b36:	f001 f84b 	bl	8001bd0 <HAL_I2C_Mem_Read>
	if (!(status&0x04))  // if the BSY bit is not set
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d11b      	bne.n	8000b7c <force_temp_conv+0x68>
	{
		HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0E, 1, &control, 1, 100);  // read control register
 8000b44:	2364      	movs	r3, #100	; 0x64
 8000b46:	9302      	str	r3, [sp, #8]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	1dbb      	adds	r3, r7, #6
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2301      	movs	r3, #1
 8000b52:	220e      	movs	r2, #14
 8000b54:	21d0      	movs	r1, #208	; 0xd0
 8000b56:	480b      	ldr	r0, [pc, #44]	; (8000b84 <force_temp_conv+0x70>)
 8000b58:	f001 f83a 	bl	8001bd0 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x0E, 1, (uint8_t *)(control|(0x20)), 1, 100);  // write modified control register with CONV bit as'1'
 8000b5c:	79bb      	ldrb	r3, [r7, #6]
 8000b5e:	f043 0320 	orr.w	r3, r3, #32
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	2364      	movs	r3, #100	; 0x64
 8000b68:	9302      	str	r3, [sp, #8]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	9200      	str	r2, [sp, #0]
 8000b70:	2301      	movs	r3, #1
 8000b72:	220e      	movs	r2, #14
 8000b74:	21d0      	movs	r1, #208	; 0xd0
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <force_temp_conv+0x70>)
 8000b78:	f000 ff30 	bl	80019dc <HAL_I2C_Mem_Write>
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000098 	.word	0x20000098

08000b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8a:	b08d      	sub	sp, #52	; 0x34
 8000b8c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8e:	f000 fa8b 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b92:	f000 f859 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b96:	f000 f8f5 	bl	8000d84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b9a:	f000 f8c9 	bl	8000d30 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000b9e:	f000 f899 	bl	8000cd4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  char data[20]="hello world\n";
 8000ba2:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <main+0xa8>)
 8000ba4:	1d3c      	adds	r4, r7, #4
 8000ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ba8:	c407      	stmia	r4!, {r0, r1, r2}
 8000baa:	7023      	strb	r3, [r4, #0]
 8000bac:	f107 0311 	add.w	r3, r7, #17
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	f8c3 2003 	str.w	r2, [r3, #3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Get_Time();
 8000bb8:	f7ff ff5c 	bl	8000a74 <Get_Time>
	  force_temp_conv();
 8000bbc:	f7ff ffaa 	bl	8000b14 <force_temp_conv>
	  TEMP = Get_Temp();
 8000bc0:	f7ff ff22 	bl	8000a08 <Get_Temp>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fee6 	bl	8000998 <__aeabi_f2uiz>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <main+0xac>)
 8000bd2:	701a      	strb	r2, [r3, #0]
	//  sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
	//  HAL_UART_Transmit_IT(&huart2,buffer,strlen((char*)buffer));
	  sprintf (buffer,"%02d:%02d:%02d %02d-%02d-20%02d temp=%d", time.hour, time.minutes, time.seconds, time.dayofmonth, time.month, time.year, TEMP);
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <main+0xb0>)
 8000bd6:	789b      	ldrb	r3, [r3, #2]
 8000bd8:	461d      	mov	r5, r3
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <main+0xb0>)
 8000bdc:	785b      	ldrb	r3, [r3, #1]
 8000bde:	461e      	mov	r6, r3
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <main+0xb0>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <main+0xb0>)
 8000be8:	791b      	ldrb	r3, [r3, #4]
 8000bea:	4619      	mov	r1, r3
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <main+0xb0>)
 8000bee:	795b      	ldrb	r3, [r3, #5]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <main+0xb0>)
 8000bf4:	799b      	ldrb	r3, [r3, #6]
 8000bf6:	461c      	mov	r4, r3
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <main+0xac>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	9304      	str	r3, [sp, #16]
 8000bfe:	9403      	str	r4, [sp, #12]
 8000c00:	9002      	str	r0, [sp, #8]
 8000c02:	9101      	str	r1, [sp, #4]
 8000c04:	9200      	str	r2, [sp, #0]
 8000c06:	4633      	mov	r3, r6
 8000c08:	462a      	mov	r2, r5
 8000c0a:	490c      	ldr	r1, [pc, #48]	; (8000c3c <main+0xb4>)
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <main+0xb8>)
 8000c0e:	f002 fd33 	bl	8003678 <siprintf>
	  HAL_UART_Transmit_IT(&huart2,buffer,strlen((char*)buffer));
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <main+0xb8>)
 8000c14:	f7ff fa9a 	bl	800014c <strlen>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <main+0xb8>)
 8000c20:	4808      	ldr	r0, [pc, #32]	; (8000c44 <main+0xbc>)
 8000c22:	f002 f9fa 	bl	800301a <HAL_UART_Transmit_IT>
	//  force_temp_conv();


	 // sprintf (buffer, "%d", TEMP);

	  HAL_Delay(500);
 8000c26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c2a:	f000 fa9f 	bl	800116c <HAL_Delay>
	  Get_Time();
 8000c2e:	e7c3      	b.n	8000bb8 <main+0x30>
 8000c30:	08003edc 	.word	0x08003edc
 8000c34:	200000ec 	.word	0x200000ec
 8000c38:	20000110 	.word	0x20000110
 8000c3c:	08003eb4 	.word	0x08003eb4
 8000c40:	200000f0 	.word	0x200000f0
 8000c44:	20000118 	.word	0x20000118

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b090      	sub	sp, #64	; 0x40
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0318 	add.w	r3, r7, #24
 8000c52:	2228      	movs	r2, #40	; 0x28
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 fd06 	bl	8003668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c86:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8c:	f107 0318 	add.w	r3, r7, #24
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 fd59 	bl	8002748 <HAL_RCC_OscConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c9c:	f000 f8a9 	bl	8000df2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2102      	movs	r1, #2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 ffc4 	bl	8002c48 <HAL_RCC_ClockConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cc6:	f000 f894 	bl	8000df2 <Error_Handler>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3740      	adds	r7, #64	; 0x40
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <MX_I2C1_Init+0x54>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <MX_I2C1_Init+0x58>)
 8000ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000cf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000d12:	f000 fd2b 	bl	800176c <HAL_I2C_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d1c:	f000 f869 	bl	8000df2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000098 	.word	0x20000098
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	000186a0 	.word	0x000186a0

08000d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <MX_USART2_UART_Init+0x50>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d68:	f002 f90a 	bl	8002f80 <HAL_UART_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d72:	f000 f83e 	bl	8000df2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000118 	.word	0x20000118
 8000d80:	40004400 	.word	0x40004400

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_GPIO_Init+0x58>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <MX_GPIO_Init+0x58>)
 8000d90:	f043 0320 	orr.w	r3, r3, #32
 8000d94:	6193      	str	r3, [r2, #24]
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_GPIO_Init+0x58>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	f003 0320 	and.w	r3, r3, #32
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_GPIO_Init+0x58>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <MX_GPIO_Init+0x58>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	6193      	str	r3, [r2, #24]
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_GPIO_Init+0x58>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_GPIO_Init+0x58>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <MX_GPIO_Init+0x58>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6193      	str	r3, [r2, #24]
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <MX_GPIO_Init+0x58>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr

08000df2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df6:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <Error_Handler+0x6>
	...

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_MspInit+0x60>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_MspInit+0x60>)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010000 	.word	0x40010000

08000e60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <HAL_I2C_MspInit+0x70>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d123      	bne.n	8000ec8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e98:	23c0      	movs	r3, #192	; 0xc0
 8000e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9c:	2312      	movs	r3, #18
 8000e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <HAL_I2C_MspInit+0x78>)
 8000eac:	f000 fb04 	bl	80014b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000eb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eba:	61d3      	str	r3, [r2, #28]
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40005400 	.word	0x40005400
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010c00 	.word	0x40010c00

08000edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a1f      	ldr	r2, [pc, #124]	; (8000f74 <HAL_UART_MspInit+0x98>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d137      	bne.n	8000f6c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <HAL_UART_MspInit+0x9c>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <HAL_UART_MspInit+0x9c>)
 8000f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f06:	61d3      	str	r3, [r2, #28]
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_UART_MspInit+0x9c>)
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_UART_MspInit+0x9c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <HAL_UART_MspInit+0x9c>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_UART_MspInit+0x9c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480f      	ldr	r0, [pc, #60]	; (8000f7c <HAL_UART_MspInit+0xa0>)
 8000f40:	f000 faba 	bl	80014b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f44:	2308      	movs	r3, #8
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4619      	mov	r1, r3
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <HAL_UART_MspInit+0xa0>)
 8000f58:	f000 faae 	bl	80014b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2026      	movs	r0, #38	; 0x26
 8000f62:	f000 f9fc 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f66:	2026      	movs	r0, #38	; 0x26
 8000f68:	f000 fa15 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40004400 	.word	0x40004400
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010800 	.word	0x40010800

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MemManage_Handler+0x4>

08000f92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <UsageFault_Handler+0x4>

08000f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc6:	f000 f8b5 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <USART2_IRQHandler+0x10>)
 8000fd6:	f002 f865 	bl	80030a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000118 	.word	0x20000118

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f002 fafe 	bl	8003614 <__errno>
 8001018:	4602      	mov	r2, r0
 800101a:	230c      	movs	r3, #12
 800101c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20005000 	.word	0x20005000
 8001044:	00000400 	.word	0x00000400
 8001048:	2000008c 	.word	0x2000008c
 800104c:	20000160 	.word	0x20000160

08001050 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800105c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800105e:	e003      	b.n	8001068 <LoopCopyDataInit>

08001060 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001062:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001064:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001066:	3104      	adds	r1, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001068:	480a      	ldr	r0, [pc, #40]	; (8001094 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800106c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800106e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001070:	d3f6      	bcc.n	8001060 <CopyDataInit>
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001074:	e002      	b.n	800107c <LoopFillZerobss>

08001076 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001078:	f842 3b04 	str.w	r3, [r2], #4

0800107c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800107e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001080:	d3f9      	bcc.n	8001076 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001082:	f7ff ffe5 	bl	8001050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f002 facb 	bl	8003620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800108a:	f7ff fd7d 	bl	8000b88 <main>
  bx lr
 800108e:	4770      	bx	lr
  ldr r3, =_sidata
 8001090:	08003f58 	.word	0x08003f58
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001098:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800109c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80010a0:	20000160 	.word	0x20000160

080010a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_2_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_Init+0x28>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_Init+0x28>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f945 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff fe9a 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f95d 	bl	80013b2 <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001110:	f000 f925 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000000 	.word	0x20000000
 800112c:	20000008 	.word	0x20000008
 8001130:	20000004 	.word	0x20000004

08001134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_IncTick+0x1c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_IncTick+0x20>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <HAL_IncTick+0x20>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	20000008 	.word	0x20000008
 8001154:	20000158 	.word	0x20000158

08001158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b02      	ldr	r3, [pc, #8]	; (8001168 <HAL_GetTick+0x10>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000158 	.word	0x20000158

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff fff0 	bl	8001158 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_Delay+0x40>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffe0 	bl	8001158 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000008 	.word	0x20000008

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4906      	ldr	r1, [pc, #24]	; (8001248 <__NVIC_EnableIRQ+0x34>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001328:	f7ff ff90 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff2d 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff42 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff90 	bl	80012a0 <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5f 	bl	800124c <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff35 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffa2 	bl	8001304 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d005      	beq.n	80013ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2204      	movs	r2, #4
 80013e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e051      	b.n	8001492 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 020e 	bic.w	r2, r2, #14
 80013fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0201 	bic.w	r2, r2, #1
 800140c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a22      	ldr	r2, [pc, #136]	; (800149c <HAL_DMA_Abort_IT+0xd0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d029      	beq.n	800146c <HAL_DMA_Abort_IT+0xa0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a20      	ldr	r2, [pc, #128]	; (80014a0 <HAL_DMA_Abort_IT+0xd4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d022      	beq.n	8001468 <HAL_DMA_Abort_IT+0x9c>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <HAL_DMA_Abort_IT+0xd8>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d01a      	beq.n	8001462 <HAL_DMA_Abort_IT+0x96>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <HAL_DMA_Abort_IT+0xdc>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d012      	beq.n	800145c <HAL_DMA_Abort_IT+0x90>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <HAL_DMA_Abort_IT+0xe0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d00a      	beq.n	8001456 <HAL_DMA_Abort_IT+0x8a>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1a      	ldr	r2, [pc, #104]	; (80014b0 <HAL_DMA_Abort_IT+0xe4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d102      	bne.n	8001450 <HAL_DMA_Abort_IT+0x84>
 800144a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800144e:	e00e      	b.n	800146e <HAL_DMA_Abort_IT+0xa2>
 8001450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001454:	e00b      	b.n	800146e <HAL_DMA_Abort_IT+0xa2>
 8001456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145a:	e008      	b.n	800146e <HAL_DMA_Abort_IT+0xa2>
 800145c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001460:	e005      	b.n	800146e <HAL_DMA_Abort_IT+0xa2>
 8001462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001466:	e002      	b.n	800146e <HAL_DMA_Abort_IT+0xa2>
 8001468:	2310      	movs	r3, #16
 800146a:	e000      	b.n	800146e <HAL_DMA_Abort_IT+0xa2>
 800146c:	2301      	movs	r3, #1
 800146e:	4a11      	ldr	r2, [pc, #68]	; (80014b4 <HAL_DMA_Abort_IT+0xe8>)
 8001470:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	4798      	blx	r3
    } 
  }
  return status;
 8001492:	7bfb      	ldrb	r3, [r7, #15]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40020008 	.word	0x40020008
 80014a0:	4002001c 	.word	0x4002001c
 80014a4:	40020030 	.word	0x40020030
 80014a8:	40020044 	.word	0x40020044
 80014ac:	40020058 	.word	0x40020058
 80014b0:	4002006c 	.word	0x4002006c
 80014b4:	40020000 	.word	0x40020000

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b08b      	sub	sp, #44	; 0x2c
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ca:	e127      	b.n	800171c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014cc:	2201      	movs	r2, #1
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 8116 	bne.w	8001716 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b12      	cmp	r3, #18
 80014f0:	d034      	beq.n	800155c <HAL_GPIO_Init+0xa4>
 80014f2:	2b12      	cmp	r3, #18
 80014f4:	d80d      	bhi.n	8001512 <HAL_GPIO_Init+0x5a>
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d02b      	beq.n	8001552 <HAL_GPIO_Init+0x9a>
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d804      	bhi.n	8001508 <HAL_GPIO_Init+0x50>
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d031      	beq.n	8001566 <HAL_GPIO_Init+0xae>
 8001502:	2b01      	cmp	r3, #1
 8001504:	d01c      	beq.n	8001540 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001506:	e048      	b.n	800159a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001508:	2b03      	cmp	r3, #3
 800150a:	d043      	beq.n	8001594 <HAL_GPIO_Init+0xdc>
 800150c:	2b11      	cmp	r3, #17
 800150e:	d01b      	beq.n	8001548 <HAL_GPIO_Init+0x90>
          break;
 8001510:	e043      	b.n	800159a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001512:	4a89      	ldr	r2, [pc, #548]	; (8001738 <HAL_GPIO_Init+0x280>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d026      	beq.n	8001566 <HAL_GPIO_Init+0xae>
 8001518:	4a87      	ldr	r2, [pc, #540]	; (8001738 <HAL_GPIO_Init+0x280>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d806      	bhi.n	800152c <HAL_GPIO_Init+0x74>
 800151e:	4a87      	ldr	r2, [pc, #540]	; (800173c <HAL_GPIO_Init+0x284>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d020      	beq.n	8001566 <HAL_GPIO_Init+0xae>
 8001524:	4a86      	ldr	r2, [pc, #536]	; (8001740 <HAL_GPIO_Init+0x288>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d01d      	beq.n	8001566 <HAL_GPIO_Init+0xae>
          break;
 800152a:	e036      	b.n	800159a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800152c:	4a85      	ldr	r2, [pc, #532]	; (8001744 <HAL_GPIO_Init+0x28c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d019      	beq.n	8001566 <HAL_GPIO_Init+0xae>
 8001532:	4a85      	ldr	r2, [pc, #532]	; (8001748 <HAL_GPIO_Init+0x290>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d016      	beq.n	8001566 <HAL_GPIO_Init+0xae>
 8001538:	4a84      	ldr	r2, [pc, #528]	; (800174c <HAL_GPIO_Init+0x294>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0xae>
          break;
 800153e:	e02c      	b.n	800159a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	623b      	str	r3, [r7, #32]
          break;
 8001546:	e028      	b.n	800159a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	3304      	adds	r3, #4
 800154e:	623b      	str	r3, [r7, #32]
          break;
 8001550:	e023      	b.n	800159a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	3308      	adds	r3, #8
 8001558:	623b      	str	r3, [r7, #32]
          break;
 800155a:	e01e      	b.n	800159a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	330c      	adds	r3, #12
 8001562:	623b      	str	r3, [r7, #32]
          break;
 8001564:	e019      	b.n	800159a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800156e:	2304      	movs	r3, #4
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e012      	b.n	800159a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d105      	bne.n	8001588 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800157c:	2308      	movs	r3, #8
 800157e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	611a      	str	r2, [r3, #16]
          break;
 8001586:	e008      	b.n	800159a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001588:	2308      	movs	r3, #8
 800158a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	615a      	str	r2, [r3, #20]
          break;
 8001592:	e002      	b.n	800159a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
          break;
 8001598:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2bff      	cmp	r3, #255	; 0xff
 800159e:	d801      	bhi.n	80015a4 <HAL_GPIO_Init+0xec>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	e001      	b.n	80015a8 <HAL_GPIO_Init+0xf0>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3304      	adds	r3, #4
 80015a8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2bff      	cmp	r3, #255	; 0xff
 80015ae:	d802      	bhi.n	80015b6 <HAL_GPIO_Init+0xfe>
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	e002      	b.n	80015bc <HAL_GPIO_Init+0x104>
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	3b08      	subs	r3, #8
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	210f      	movs	r1, #15
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	401a      	ands	r2, r3
 80015ce:	6a39      	ldr	r1, [r7, #32]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	431a      	orrs	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 8096 	beq.w	8001716 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ea:	4b59      	ldr	r3, [pc, #356]	; (8001750 <HAL_GPIO_Init+0x298>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	4a58      	ldr	r2, [pc, #352]	; (8001750 <HAL_GPIO_Init+0x298>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6193      	str	r3, [r2, #24]
 80015f6:	4b56      	ldr	r3, [pc, #344]	; (8001750 <HAL_GPIO_Init+0x298>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001602:	4a54      	ldr	r2, [pc, #336]	; (8001754 <HAL_GPIO_Init+0x29c>)
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3302      	adds	r3, #2
 800160a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	220f      	movs	r2, #15
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4013      	ands	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4b      	ldr	r2, [pc, #300]	; (8001758 <HAL_GPIO_Init+0x2a0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d013      	beq.n	8001656 <HAL_GPIO_Init+0x19e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4a      	ldr	r2, [pc, #296]	; (800175c <HAL_GPIO_Init+0x2a4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d00d      	beq.n	8001652 <HAL_GPIO_Init+0x19a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a49      	ldr	r2, [pc, #292]	; (8001760 <HAL_GPIO_Init+0x2a8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d007      	beq.n	800164e <HAL_GPIO_Init+0x196>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a48      	ldr	r2, [pc, #288]	; (8001764 <HAL_GPIO_Init+0x2ac>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d101      	bne.n	800164a <HAL_GPIO_Init+0x192>
 8001646:	2303      	movs	r3, #3
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x1a0>
 800164a:	2304      	movs	r3, #4
 800164c:	e004      	b.n	8001658 <HAL_GPIO_Init+0x1a0>
 800164e:	2302      	movs	r3, #2
 8001650:	e002      	b.n	8001658 <HAL_GPIO_Init+0x1a0>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_GPIO_Init+0x1a0>
 8001656:	2300      	movs	r3, #0
 8001658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165a:	f002 0203 	and.w	r2, r2, #3
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	4093      	lsls	r3, r2
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001668:	493a      	ldr	r1, [pc, #232]	; (8001754 <HAL_GPIO_Init+0x29c>)
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4938      	ldr	r1, [pc, #224]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
 800168e:	e006      	b.n	800169e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001690:	4b35      	ldr	r3, [pc, #212]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	43db      	mvns	r3, r3
 8001698:	4933      	ldr	r1, [pc, #204]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 800169a:	4013      	ands	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016aa:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	492e      	ldr	r1, [pc, #184]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	604b      	str	r3, [r1, #4]
 80016b6:	e006      	b.n	80016c6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016b8:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	43db      	mvns	r3, r3
 80016c0:	4929      	ldr	r1, [pc, #164]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016d2:	4b25      	ldr	r3, [pc, #148]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	4924      	ldr	r1, [pc, #144]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
 80016de:	e006      	b.n	80016ee <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	491f      	ldr	r1, [pc, #124]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	491a      	ldr	r1, [pc, #104]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	60cb      	str	r3, [r1, #12]
 8001706:	e006      	b.n	8001716 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	43db      	mvns	r3, r3
 8001710:	4915      	ldr	r1, [pc, #84]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 8001712:	4013      	ands	r3, r2
 8001714:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	3301      	adds	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	f47f aed0 	bne.w	80014cc <HAL_GPIO_Init+0x14>
  }
}
 800172c:	bf00      	nop
 800172e:	372c      	adds	r7, #44	; 0x2c
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	10210000 	.word	0x10210000
 800173c:	10110000 	.word	0x10110000
 8001740:	10120000 	.word	0x10120000
 8001744:	10310000 	.word	0x10310000
 8001748:	10320000 	.word	0x10320000
 800174c:	10220000 	.word	0x10220000
 8001750:	40021000 	.word	0x40021000
 8001754:	40010000 	.word	0x40010000
 8001758:	40010800 	.word	0x40010800
 800175c:	40010c00 	.word	0x40010c00
 8001760:	40011000 	.word	0x40011000
 8001764:	40011400 	.word	0x40011400
 8001768:	40010400 	.word	0x40010400

0800176c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e11f      	b.n	80019be <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d106      	bne.n	8001798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fb64 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2224      	movs	r2, #36	; 0x24
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017d0:	f001 fb90 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 80017d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4a7b      	ldr	r2, [pc, #492]	; (80019c8 <HAL_I2C_Init+0x25c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d807      	bhi.n	80017f0 <HAL_I2C_Init+0x84>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4a7a      	ldr	r2, [pc, #488]	; (80019cc <HAL_I2C_Init+0x260>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	bf94      	ite	ls
 80017e8:	2301      	movls	r3, #1
 80017ea:	2300      	movhi	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	e006      	b.n	80017fe <HAL_I2C_Init+0x92>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4a77      	ldr	r2, [pc, #476]	; (80019d0 <HAL_I2C_Init+0x264>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	bf94      	ite	ls
 80017f8:	2301      	movls	r3, #1
 80017fa:	2300      	movhi	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e0db      	b.n	80019be <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4a72      	ldr	r2, [pc, #456]	; (80019d4 <HAL_I2C_Init+0x268>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	0c9b      	lsrs	r3, r3, #18
 8001810:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a64      	ldr	r2, [pc, #400]	; (80019c8 <HAL_I2C_Init+0x25c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d802      	bhi.n	8001840 <HAL_I2C_Init+0xd4>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3301      	adds	r3, #1
 800183e:	e009      	b.n	8001854 <HAL_I2C_Init+0xe8>
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	4a63      	ldr	r2, [pc, #396]	; (80019d8 <HAL_I2C_Init+0x26c>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	099b      	lsrs	r3, r3, #6
 8001852:	3301      	adds	r3, #1
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	430b      	orrs	r3, r1
 800185a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001866:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4956      	ldr	r1, [pc, #344]	; (80019c8 <HAL_I2C_Init+0x25c>)
 8001870:	428b      	cmp	r3, r1
 8001872:	d80d      	bhi.n	8001890 <HAL_I2C_Init+0x124>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1e59      	subs	r1, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001882:	3301      	adds	r3, #1
 8001884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001888:	2b04      	cmp	r3, #4
 800188a:	bf38      	it	cc
 800188c:	2304      	movcc	r3, #4
 800188e:	e04f      	b.n	8001930 <HAL_I2C_Init+0x1c4>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d111      	bne.n	80018bc <HAL_I2C_Init+0x150>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1e58      	subs	r0, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	440b      	add	r3, r1
 80018a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018aa:	3301      	adds	r3, #1
 80018ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf0c      	ite	eq
 80018b4:	2301      	moveq	r3, #1
 80018b6:	2300      	movne	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	e012      	b.n	80018e2 <HAL_I2C_Init+0x176>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1e58      	subs	r0, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6859      	ldr	r1, [r3, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	0099      	lsls	r1, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80018d2:	3301      	adds	r3, #1
 80018d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf0c      	ite	eq
 80018dc:	2301      	moveq	r3, #1
 80018de:	2300      	movne	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Init+0x17e>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e022      	b.n	8001930 <HAL_I2C_Init+0x1c4>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10e      	bne.n	8001910 <HAL_I2C_Init+0x1a4>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1e58      	subs	r0, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6859      	ldr	r1, [r3, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	440b      	add	r3, r1
 8001900:	fbb0 f3f3 	udiv	r3, r0, r3
 8001904:	3301      	adds	r3, #1
 8001906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800190e:	e00f      	b.n	8001930 <HAL_I2C_Init+0x1c4>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1e58      	subs	r0, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6859      	ldr	r1, [r3, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	0099      	lsls	r1, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	fbb0 f3f3 	udiv	r3, r0, r3
 8001926:	3301      	adds	r3, #1
 8001928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800192c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	6809      	ldr	r1, [r1, #0]
 8001934:	4313      	orrs	r3, r2
 8001936:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69da      	ldr	r2, [r3, #28]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800195e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6911      	ldr	r1, [r2, #16]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68d2      	ldr	r2, [r2, #12]
 800196a:	4311      	orrs	r1, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	430b      	orrs	r3, r1
 8001972:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2220      	movs	r2, #32
 80019aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	000186a0 	.word	0x000186a0
 80019cc:	001e847f 	.word	0x001e847f
 80019d0:	003d08ff 	.word	0x003d08ff
 80019d4:	431bde83 	.word	0x431bde83
 80019d8:	10624dd3 	.word	0x10624dd3

080019dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	4608      	mov	r0, r1
 80019e6:	4611      	mov	r1, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	817b      	strh	r3, [r7, #10]
 80019ee:	460b      	mov	r3, r1
 80019f0:	813b      	strh	r3, [r7, #8]
 80019f2:	4613      	mov	r3, r2
 80019f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019f6:	f7ff fbaf 	bl	8001158 <HAL_GetTick>
 80019fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	f040 80d9 	bne.w	8001bbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2319      	movs	r3, #25
 8001a10:	2201      	movs	r2, #1
 8001a12:	496d      	ldr	r1, [pc, #436]	; (8001bc8 <HAL_I2C_Mem_Write+0x1ec>)
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 fcbb 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a20:	2302      	movs	r3, #2
 8001a22:	e0cc      	b.n	8001bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_I2C_Mem_Write+0x56>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e0c5      	b.n	8001bbe <HAL_I2C_Mem_Write+0x1e2>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d007      	beq.n	8001a58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2221      	movs	r2, #33	; 0x21
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2240      	movs	r2, #64	; 0x40
 8001a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a3a      	ldr	r2, [r7, #32]
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4a4d      	ldr	r2, [pc, #308]	; (8001bcc <HAL_I2C_Mem_Write+0x1f0>)
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a9a:	88f8      	ldrh	r0, [r7, #6]
 8001a9c:	893a      	ldrh	r2, [r7, #8]
 8001a9e:	8979      	ldrh	r1, [r7, #10]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 faf2 	bl	8002094 <I2C_RequestMemoryWrite>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d052      	beq.n	8001b5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e081      	b.n	8001bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 fd3c 	bl	800253c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d107      	bne.n	8001ae2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e06b      	b.n	8001bbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	781a      	ldrb	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d11b      	bne.n	8001b5c <HAL_I2C_Mem_Write+0x180>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d017      	beq.n	8001b5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1aa      	bne.n	8001aba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 fd28 	bl	80025be <I2C_WaitOnBTFFlagUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00d      	beq.n	8001b90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d107      	bne.n	8001b8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e016      	b.n	8001bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e000      	b.n	8001bbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001bbc:	2302      	movs	r3, #2
  }
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	00100002 	.word	0x00100002
 8001bcc:	ffff0000 	.word	0xffff0000

08001bd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	4608      	mov	r0, r1
 8001bda:	4611      	mov	r1, r2
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	817b      	strh	r3, [r7, #10]
 8001be2:	460b      	mov	r3, r1
 8001be4:	813b      	strh	r3, [r7, #8]
 8001be6:	4613      	mov	r3, r2
 8001be8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bee:	f7ff fab3 	bl	8001158 <HAL_GetTick>
 8001bf2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	f040 823d 	bne.w	800207c <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2319      	movs	r3, #25
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4981      	ldr	r1, [pc, #516]	; (8001e10 <HAL_I2C_Mem_Read+0x240>)
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 fbbf 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e230      	b.n	800207e <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_I2C_Mem_Read+0x5a>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e229      	b.n	800207e <HAL_I2C_Mem_Read+0x4ae>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d007      	beq.n	8001c50 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2222      	movs	r2, #34	; 0x22
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2240      	movs	r2, #64	; 0x40
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001c80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4a61      	ldr	r2, [pc, #388]	; (8001e14 <HAL_I2C_Mem_Read+0x244>)
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c92:	88f8      	ldrh	r0, [r7, #6]
 8001c94:	893a      	ldrh	r2, [r7, #8]
 8001c96:	8979      	ldrh	r1, [r7, #10]
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 fa8c 	bl	80021c0 <I2C_RequestMemoryRead>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e1e5      	b.n	800207e <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d113      	bne.n	8001ce2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e1b9      	b.n	8002056 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d11d      	bne.n	8001d26 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d22:	b662      	cpsie	i
 8001d24:	e197      	b.n	8002056 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d11d      	bne.n	8001d6a <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d3e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d66:	b662      	cpsie	i
 8001d68:	e175      	b.n	8002056 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d78:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001d90:	e161      	b.n	8002056 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	f200 811a 	bhi.w	8001fd0 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d123      	bne.n	8001dec <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 fc49 	bl	8002640 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e162      	b.n	800207e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dea:	e134      	b.n	8002056 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d150      	bne.n	8001e96 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	4906      	ldr	r1, [pc, #24]	; (8001e18 <HAL_I2C_Mem_Read+0x248>)
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 fac6 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e137      	b.n	800207e <HAL_I2C_Mem_Read+0x4ae>
 8001e0e:	bf00      	nop
 8001e10:	00100002 	.word	0x00100002
 8001e14:	ffff0000 	.word	0xffff0000
 8001e18:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e60:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e94:	e0df      	b.n	8002056 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	497a      	ldr	r1, [pc, #488]	; (8002088 <HAL_I2C_Mem_Read+0x4b8>)
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 fa75 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0e6      	b.n	800207e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ebe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001ef4:	4b65      	ldr	r3, [pc, #404]	; (800208c <HAL_I2C_Mem_Read+0x4bc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	4a65      	ldr	r2, [pc, #404]	; (8002090 <HAL_I2C_Mem_Read+0x4c0>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	0a1a      	lsrs	r2, r3, #8
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00da      	lsls	r2, r3, #3
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d117      	bne.n	8001f4a <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f043 0220 	orr.w	r2, r3, #32
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001f3c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e099      	b.n	800207e <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d1da      	bne.n	8001f0e <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f9a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fce:	e042      	b.n	8002056 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fb33 	bl	8002640 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e04c      	b.n	800207e <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b04      	cmp	r3, #4
 8002022:	d118      	bne.n	8002056 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205a:	2b00      	cmp	r3, #0
 800205c:	f47f ae99 	bne.w	8001d92 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e000      	b.n	800207e <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 800207c:	2302      	movs	r3, #2
  }
}
 800207e:	4618      	mov	r0, r3
 8002080:	3728      	adds	r7, #40	; 0x28
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	00010004 	.word	0x00010004
 800208c:	20000000 	.word	0x20000000
 8002090:	14f8b589 	.word	0x14f8b589

08002094 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	4608      	mov	r0, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	461a      	mov	r2, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	817b      	strh	r3, [r7, #10]
 80020a6:	460b      	mov	r3, r1
 80020a8:	813b      	strh	r3, [r7, #8]
 80020aa:	4613      	mov	r3, r2
 80020ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f960 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00d      	beq.n	80020f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e4:	d103      	bne.n	80020ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e05f      	b.n	80021b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020f2:	897b      	ldrh	r3, [r7, #10]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002100:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	6a3a      	ldr	r2, [r7, #32]
 8002106:	492d      	ldr	r1, [pc, #180]	; (80021bc <I2C_RequestMemoryWrite+0x128>)
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f998 	bl	800243e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e04c      	b.n	80021b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	6a39      	ldr	r1, [r7, #32]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fa02 	bl	800253c <I2C_WaitOnTXEFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00d      	beq.n	800215a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2b04      	cmp	r3, #4
 8002144:	d107      	bne.n	8002156 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002154:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e02b      	b.n	80021b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002160:	893b      	ldrh	r3, [r7, #8]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	611a      	str	r2, [r3, #16]
 800216a:	e021      	b.n	80021b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800216c:	893b      	ldrh	r3, [r7, #8]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	b29b      	uxth	r3, r3
 8002172:	b2da      	uxtb	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800217a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217c:	6a39      	ldr	r1, [r7, #32]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f9dc 	bl	800253c <I2C_WaitOnTXEFlagUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00d      	beq.n	80021a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	2b04      	cmp	r3, #4
 8002190:	d107      	bne.n	80021a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e005      	b.n	80021b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021a6:	893b      	ldrh	r3, [r7, #8]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	00010002 	.word	0x00010002

080021c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	817b      	strh	r3, [r7, #10]
 80021d2:	460b      	mov	r3, r1
 80021d4:	813b      	strh	r3, [r7, #8]
 80021d6:	4613      	mov	r3, r2
 80021d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	2200      	movs	r2, #0
 8002202:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f8c2 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00d      	beq.n	800222e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002220:	d103      	bne.n	800222a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0aa      	b.n	8002384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800222e:	897b      	ldrh	r3, [r7, #10]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800223c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	6a3a      	ldr	r2, [r7, #32]
 8002242:	4952      	ldr	r1, [pc, #328]	; (800238c <I2C_RequestMemoryRead+0x1cc>)
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f8fa 	bl	800243e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e097      	b.n	8002384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800226a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226c:	6a39      	ldr	r1, [r7, #32]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f964 	bl	800253c <I2C_WaitOnTXEFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2b04      	cmp	r3, #4
 8002280:	d107      	bne.n	8002292 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002290:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e076      	b.n	8002384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d105      	bne.n	80022a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800229c:	893b      	ldrh	r3, [r7, #8]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	611a      	str	r2, [r3, #16]
 80022a6:	e021      	b.n	80022ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022a8:	893b      	ldrh	r3, [r7, #8]
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b8:	6a39      	ldr	r1, [r7, #32]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f93e 	bl	800253c <I2C_WaitOnTXEFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00d      	beq.n	80022e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d107      	bne.n	80022de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e050      	b.n	8002384 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022e2:	893b      	ldrh	r3, [r7, #8]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ee:	6a39      	ldr	r1, [r7, #32]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f923 	bl	800253c <I2C_WaitOnTXEFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00d      	beq.n	8002318 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	2b04      	cmp	r3, #4
 8002302:	d107      	bne.n	8002314 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002312:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e035      	b.n	8002384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002326:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	2200      	movs	r2, #0
 8002330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f82b 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00d      	beq.n	800235c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800234e:	d103      	bne.n	8002358 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e013      	b.n	8002384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800235c:	897b      	ldrh	r3, [r7, #10]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	b2da      	uxtb	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	6a3a      	ldr	r2, [r7, #32]
 8002370:	4906      	ldr	r1, [pc, #24]	; (800238c <I2C_RequestMemoryRead+0x1cc>)
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f863 	bl	800243e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	00010002 	.word	0x00010002

08002390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a0:	e025      	b.n	80023ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023a8:	d021      	beq.n	80023ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023aa:	f7fe fed5 	bl	8001158 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d302      	bcc.n	80023c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d116      	bne.n	80023ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f043 0220 	orr.w	r2, r3, #32
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e023      	b.n	8002436 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	0c1b      	lsrs	r3, r3, #16
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d10d      	bne.n	8002414 <I2C_WaitOnFlagUntilTimeout+0x84>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4013      	ands	r3, r2
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf0c      	ite	eq
 800240a:	2301      	moveq	r3, #1
 800240c:	2300      	movne	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	e00c      	b.n	800242e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4013      	ands	r3, r2
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf0c      	ite	eq
 8002426:	2301      	moveq	r3, #1
 8002428:	2300      	movne	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	429a      	cmp	r2, r3
 8002432:	d0b6      	beq.n	80023a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800244c:	e051      	b.n	80024f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245c:	d123      	bne.n	80024a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002476:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f043 0204 	orr.w	r2, r3, #4
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e046      	b.n	8002534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024ac:	d021      	beq.n	80024f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ae:	f7fe fe53 	bl	8001158 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d116      	bne.n	80024f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f043 0220 	orr.w	r2, r3, #32
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e020      	b.n	8002534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10c      	bne.n	8002516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	43da      	mvns	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4013      	ands	r3, r2
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf14      	ite	ne
 800250e:	2301      	movne	r3, #1
 8002510:	2300      	moveq	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	e00b      	b.n	800252e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	43da      	mvns	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4013      	ands	r3, r2
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf14      	ite	ne
 8002528:	2301      	movne	r3, #1
 800252a:	2300      	moveq	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d18d      	bne.n	800244e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002548:	e02d      	b.n	80025a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f8ce 	bl	80026ec <I2C_IsAcknowledgeFailed>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e02d      	b.n	80025b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002560:	d021      	beq.n	80025a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002562:	f7fe fdf9 	bl	8001158 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	429a      	cmp	r2, r3
 8002570:	d302      	bcc.n	8002578 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d116      	bne.n	80025a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f043 0220 	orr.w	r2, r3, #32
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e007      	b.n	80025b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b0:	2b80      	cmp	r3, #128	; 0x80
 80025b2:	d1ca      	bne.n	800254a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025ca:	e02d      	b.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f88d 	bl	80026ec <I2C_IsAcknowledgeFailed>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e02d      	b.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025e2:	d021      	beq.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e4:	f7fe fdb8 	bl	8001158 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d302      	bcc.n	80025fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d116      	bne.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e007      	b.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b04      	cmp	r3, #4
 8002634:	d1ca      	bne.n	80025cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800264c:	e042      	b.n	80026d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b10      	cmp	r3, #16
 800265a:	d119      	bne.n	8002690 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0210 	mvn.w	r2, #16
 8002664:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e029      	b.n	80026e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002690:	f7fe fd62 	bl	8001158 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	429a      	cmp	r2, r3
 800269e:	d302      	bcc.n	80026a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d116      	bne.n	80026d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e007      	b.n	80026e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	2b40      	cmp	r3, #64	; 0x40
 80026e0:	d1b5      	bne.n	800264e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002702:	d11b      	bne.n	800273c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800270c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f043 0204 	orr.w	r2, r3, #4
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e26c      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8087 	beq.w	8002876 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002768:	4b92      	ldr	r3, [pc, #584]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b04      	cmp	r3, #4
 8002772:	d00c      	beq.n	800278e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002774:	4b8f      	ldr	r3, [pc, #572]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d112      	bne.n	80027a6 <HAL_RCC_OscConfig+0x5e>
 8002780:	4b8c      	ldr	r3, [pc, #560]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d10b      	bne.n	80027a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278e:	4b89      	ldr	r3, [pc, #548]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d06c      	beq.n	8002874 <HAL_RCC_OscConfig+0x12c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d168      	bne.n	8002874 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e246      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x76>
 80027b0:	4b80      	ldr	r3, [pc, #512]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a7f      	ldr	r2, [pc, #508]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e02e      	b.n	800281c <HAL_RCC_OscConfig+0xd4>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x98>
 80027c6:	4b7b      	ldr	r3, [pc, #492]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a7a      	ldr	r2, [pc, #488]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b78      	ldr	r3, [pc, #480]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a77      	ldr	r2, [pc, #476]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e01d      	b.n	800281c <HAL_RCC_OscConfig+0xd4>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0xbc>
 80027ea:	4b72      	ldr	r3, [pc, #456]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a71      	ldr	r2, [pc, #452]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b6f      	ldr	r3, [pc, #444]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a6e      	ldr	r2, [pc, #440]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0xd4>
 8002804:	4b6b      	ldr	r3, [pc, #428]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a6a      	ldr	r2, [pc, #424]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 800280a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b68      	ldr	r3, [pc, #416]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a67      	ldr	r2, [pc, #412]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe fc98 	bl	8001158 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7fe fc94 	bl	8001158 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e1fa      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0xe4>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe fc84 	bl	8001158 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe fc80 	bl	8001158 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e1e6      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x10c>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d063      	beq.n	800294a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002882:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b08      	cmp	r3, #8
 8002898:	d11c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x18c>
 800289a:	4b46      	ldr	r3, [pc, #280]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	4b43      	ldr	r3, [pc, #268]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x176>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1ba      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b3d      	ldr	r3, [pc, #244]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4939      	ldr	r1, [pc, #228]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	e03a      	b.n	800294a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <HAL_RCC_OscConfig+0x270>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe fc39 	bl	8001158 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ea:	f7fe fc35 	bl	8001158 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e19b      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4927      	ldr	r1, [pc, #156]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291e:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <HAL_RCC_OscConfig+0x270>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fe fc18 	bl	8001158 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292c:	f7fe fc14 	bl	8001158 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e17a      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d03a      	beq.n	80029cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d019      	beq.n	8002992 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7fe fbf8 	bl	8001158 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296c:	f7fe fbf4 	bl	8001158 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e15a      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800298a:	2001      	movs	r0, #1
 800298c:	f000 fada 	bl	8002f44 <RCC_Delay>
 8002990:	e01c      	b.n	80029cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002998:	f7fe fbde 	bl	8001158 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299e:	e00f      	b.n	80029c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a0:	f7fe fbda 	bl	8001158 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d908      	bls.n	80029c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e140      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	42420000 	.word	0x42420000
 80029bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c0:	4b9e      	ldr	r3, [pc, #632]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e9      	bne.n	80029a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80a6 	beq.w	8002b26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029da:	2300      	movs	r3, #0
 80029dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029de:	4b97      	ldr	r3, [pc, #604]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10d      	bne.n	8002a06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	4b94      	ldr	r3, [pc, #592]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4a93      	ldr	r2, [pc, #588]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f4:	61d3      	str	r3, [r2, #28]
 80029f6:	4b91      	ldr	r3, [pc, #580]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a06:	4b8e      	ldr	r3, [pc, #568]	; (8002c40 <HAL_RCC_OscConfig+0x4f8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d118      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a12:	4b8b      	ldr	r3, [pc, #556]	; (8002c40 <HAL_RCC_OscConfig+0x4f8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a8a      	ldr	r2, [pc, #552]	; (8002c40 <HAL_RCC_OscConfig+0x4f8>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fb9b 	bl	8001158 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a26:	f7fe fb97 	bl	8001158 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b64      	cmp	r3, #100	; 0x64
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0fd      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	4b81      	ldr	r3, [pc, #516]	; (8002c40 <HAL_RCC_OscConfig+0x4f8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCC_OscConfig+0x312>
 8002a4c:	4b7b      	ldr	r3, [pc, #492]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4a7a      	ldr	r2, [pc, #488]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6213      	str	r3, [r2, #32]
 8002a58:	e02d      	b.n	8002ab6 <HAL_RCC_OscConfig+0x36e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x334>
 8002a62:	4b76      	ldr	r3, [pc, #472]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4a75      	ldr	r2, [pc, #468]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	6213      	str	r3, [r2, #32]
 8002a6e:	4b73      	ldr	r3, [pc, #460]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	4a72      	ldr	r2, [pc, #456]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a74:	f023 0304 	bic.w	r3, r3, #4
 8002a78:	6213      	str	r3, [r2, #32]
 8002a7a:	e01c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x36e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCC_OscConfig+0x356>
 8002a84:	4b6d      	ldr	r3, [pc, #436]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4a6c      	ldr	r2, [pc, #432]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	6213      	str	r3, [r2, #32]
 8002a90:	4b6a      	ldr	r3, [pc, #424]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4a69      	ldr	r2, [pc, #420]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6213      	str	r3, [r2, #32]
 8002a9c:	e00b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x36e>
 8002a9e:	4b67      	ldr	r3, [pc, #412]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a66      	ldr	r2, [pc, #408]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6213      	str	r3, [r2, #32]
 8002aaa:	4b64      	ldr	r3, [pc, #400]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a63      	ldr	r2, [pc, #396]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d015      	beq.n	8002aea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7fe fb4b 	bl	8001158 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe fb47 	bl	8001158 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0ab      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	4b57      	ldr	r3, [pc, #348]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ee      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x37e>
 8002ae8:	e014      	b.n	8002b14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aea:	f7fe fb35 	bl	8001158 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fe fb31 	bl	8001158 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e095      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b08:	4b4c      	ldr	r3, [pc, #304]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ee      	bne.n	8002af2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d105      	bne.n	8002b26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1a:	4b48      	ldr	r3, [pc, #288]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	4a47      	ldr	r2, [pc, #284]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8081 	beq.w	8002c32 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b30:	4b42      	ldr	r3, [pc, #264]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d061      	beq.n	8002c00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d146      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b3f      	ldr	r3, [pc, #252]	; (8002c44 <HAL_RCC_OscConfig+0x4fc>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7fe fb05 	bl	8001158 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b52:	f7fe fb01 	bl	8001158 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e067      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b64:	4b35      	ldr	r3, [pc, #212]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f0      	bne.n	8002b52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b78:	d108      	bne.n	8002b8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b7a:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	492d      	ldr	r1, [pc, #180]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a19      	ldr	r1, [r3, #32]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	4927      	ldr	r1, [pc, #156]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba4:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <HAL_RCC_OscConfig+0x4fc>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fe fad5 	bl	8001158 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7fe fad1 	bl	8001158 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e037      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x46a>
 8002bd0:	e02f      	b.n	8002c32 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <HAL_RCC_OscConfig+0x4fc>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fabe 	bl	8001158 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be0:	f7fe faba 	bl	8001158 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e020      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x498>
 8002bfe:	e018      	b.n	8002c32 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e013      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40007000 	.word	0x40007000
 8002c44:	42420060 	.word	0x42420060

08002c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0d0      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b6a      	ldr	r3, [pc, #424]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d910      	bls.n	8002c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b67      	ldr	r3, [pc, #412]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 0207 	bic.w	r2, r3, #7
 8002c72:	4965      	ldr	r1, [pc, #404]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b63      	ldr	r3, [pc, #396]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0b8      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca4:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4a58      	ldr	r2, [pc, #352]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cbc:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a52      	ldr	r2, [pc, #328]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc8:	4b50      	ldr	r3, [pc, #320]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	494d      	ldr	r1, [pc, #308]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d040      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d115      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e07f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d06:	4b41      	ldr	r3, [pc, #260]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e073      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d16:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e06b      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d26:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f023 0203 	bic.w	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4936      	ldr	r1, [pc, #216]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d38:	f7fe fa0e 	bl	8001158 <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d40:	f7fe fa0a 	bl	8001158 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e053      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 020c 	and.w	r2, r3, #12
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d1eb      	bne.n	8002d40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d68:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d210      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 0207 	bic.w	r2, r3, #7
 8002d7e:	4922      	ldr	r1, [pc, #136]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e032      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da4:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4916      	ldr	r1, [pc, #88]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	490e      	ldr	r1, [pc, #56]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dd6:	f000 f821 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002dda:	4601      	mov	r1, r0
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002de8:	5cd3      	ldrb	r3, [r2, r3]
 8002dea:	fa21 f303 	lsr.w	r3, r1, r3
 8002dee:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <HAL_RCC_ClockConfig+0x1cc>)
 8002df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1d0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe f96c 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08003f04 	.word	0x08003f04
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000004 	.word	0x20000004

08002e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e1c:	b490      	push	{r4, r7}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e24:	1d3c      	adds	r4, r7, #4
 8002e26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e2c:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e46:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d002      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x40>
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d003      	beq.n	8002e62 <HAL_RCC_GetSysClockFreq+0x46>
 8002e5a:	e02d      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e5e:	623b      	str	r3, [r7, #32]
      break;
 8002e60:	e02d      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	0c9b      	lsrs	r3, r3, #18
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e6e:	4413      	add	r3, r2
 8002e70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e74:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	0c5b      	lsrs	r3, r3, #17
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e8e:	4413      	add	r3, r2
 8002e90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	4a0f      	ldr	r2, [pc, #60]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e9a:	fb02 f203 	mul.w	r2, r2, r3
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea6:	e004      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	623b      	str	r3, [r7, #32]
      break;
 8002eb6:	e002      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eba:	623b      	str	r3, [r7, #32]
      break;
 8002ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3728      	adds	r7, #40	; 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc90      	pop	{r4, r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	08003ef0 	.word	0x08003ef0
 8002ed0:	08003f00 	.word	0x08003f00
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	007a1200 	.word	0x007a1200
 8002edc:	003d0900 	.word	0x003d0900

08002ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee4:	4b02      	ldr	r3, [pc, #8]	; (8002ef0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	20000000 	.word	0x20000000

08002ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ef8:	f7ff fff2 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002efc:	4601      	mov	r1, r0
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4a03      	ldr	r2, [pc, #12]	; (8002f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f0a:	5cd3      	ldrb	r3, [r2, r3]
 8002f0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	08003f14 	.word	0x08003f14

08002f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f20:	f7ff ffde 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002f24:	4601      	mov	r1, r0
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	0adb      	lsrs	r3, r3, #11
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	4a03      	ldr	r2, [pc, #12]	; (8002f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f32:	5cd3      	ldrb	r3, [r2, r3]
 8002f34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	08003f14 	.word	0x08003f14

08002f44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <RCC_Delay+0x34>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <RCC_Delay+0x38>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0a5b      	lsrs	r3, r3, #9
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f60:	bf00      	nop
  }
  while (Delay --);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1e5a      	subs	r2, r3, #1
 8002f66:	60fa      	str	r2, [r7, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f9      	bne.n	8002f60 <RCC_Delay+0x1c>
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	10624dd3 	.word	0x10624dd3

08002f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e03f      	b.n	8003012 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fd ff98 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2224      	movs	r2, #36	; 0x24
 8002fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fa97 	bl	80034f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	4613      	mov	r3, r2
 8003026:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b20      	cmp	r3, #32
 8003032:	d130      	bne.n	8003096 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_UART_Transmit_IT+0x26>
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e029      	b.n	8003098 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_UART_Transmit_IT+0x38>
 800304e:	2302      	movs	r3, #2
 8003050:	e022      	b.n	8003098 <HAL_UART_Transmit_IT+0x7e>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	88fa      	ldrh	r2, [r7, #6]
 800306a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2221      	movs	r2, #33	; 0x21
 8003076:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003090:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10d      	bne.n	80030f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_UART_IRQHandler+0x52>
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f982 	bl	80033f8 <UART_Receive_IT>
      return;
 80030f4:	e0d1      	b.n	800329a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80b0 	beq.w	800325e <HAL_UART_IRQHandler+0x1ba>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d105      	bne.n	8003114 <HAL_UART_IRQHandler+0x70>
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80a5 	beq.w	800325e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_UART_IRQHandler+0x90>
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_UART_IRQHandler+0xb0>
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314c:	f043 0202 	orr.w	r2, r3, #2
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_UART_IRQHandler+0xd0>
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	f043 0204 	orr.w	r2, r3, #4
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00f      	beq.n	800319e <HAL_UART_IRQHandler+0xfa>
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d104      	bne.n	8003192 <HAL_UART_IRQHandler+0xee>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003196:	f043 0208 	orr.w	r2, r3, #8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d078      	beq.n	8003298 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <HAL_UART_IRQHandler+0x11c>
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f91c 	bl	80033f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bf14      	ite	ne
 80031ce:	2301      	movne	r3, #1
 80031d0:	2300      	moveq	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <HAL_UART_IRQHandler+0x144>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d031      	beq.n	800324c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f86d 	bl	80032c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d023      	beq.n	8003244 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800320a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003218:	4a21      	ldr	r2, [pc, #132]	; (80032a0 <HAL_UART_IRQHandler+0x1fc>)
 800321a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe f8d3 	bl	80013cc <HAL_DMA_Abort_IT>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d016      	beq.n	800325a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003236:	4610      	mov	r0, r2
 8003238:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323a:	e00e      	b.n	800325a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f83a 	bl	80032b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003242:	e00a      	b.n	800325a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f836 	bl	80032b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324a:	e006      	b.n	800325a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f832 	bl	80032b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003258:	e01e      	b.n	8003298 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325a:	bf00      	nop
    return;
 800325c:	e01c      	b.n	8003298 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_UART_IRQHandler+0x1d6>
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f859 	bl	800332a <UART_Transmit_IT>
    return;
 8003278:	e00f      	b.n	800329a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_UART_IRQHandler+0x1f6>
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f89a 	bl	80033c8 <UART_EndTransmit_IT>
    return;
 8003294:	bf00      	nop
 8003296:	e000      	b.n	800329a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003298:	bf00      	nop
  }
}
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	08003303 	.word	0x08003303

080032a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr

080032b6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f7ff ffca 	bl	80032b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800332a:	b480      	push	{r7}
 800332c:	b085      	sub	sp, #20
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b21      	cmp	r3, #33	; 0x21
 800333c:	d13e      	bne.n	80033bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003346:	d114      	bne.n	8003372 <UART_Transmit_IT+0x48>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d110      	bne.n	8003372 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003364:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	1c9a      	adds	r2, r3, #2
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	621a      	str	r2, [r3, #32]
 8003370:	e008      	b.n	8003384 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	1c59      	adds	r1, r3, #1
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6211      	str	r1, [r2, #32]
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29b      	uxth	r3, r3
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4619      	mov	r1, r3
 8003392:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10f      	bne.n	80033b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e000      	b.n	80033be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7fd fcf9 	bl	8000de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b22      	cmp	r3, #34	; 0x22
 800340a:	d170      	bne.n	80034ee <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003414:	d117      	bne.n	8003446 <UART_Receive_IT+0x4e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d113      	bne.n	8003446 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	b29b      	uxth	r3, r3
 8003430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003434:	b29a      	uxth	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	1c9a      	adds	r2, r3, #2
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
 8003444:	e026      	b.n	8003494 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800344c:	2300      	movs	r3, #0
 800344e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003458:	d007      	beq.n	800346a <UART_Receive_IT+0x72>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10a      	bne.n	8003478 <UART_Receive_IT+0x80>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	e008      	b.n	800348a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29b      	uxth	r3, r3
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4619      	mov	r1, r3
 80034a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d120      	bne.n	80034ea <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0220 	bic.w	r2, r2, #32
 80034b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0201 	bic.w	r2, r2, #1
 80034d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff fedf 	bl	80032a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e002      	b.n	80034f0 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e000      	b.n	80034f0 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	4313      	orrs	r3, r2
 8003526:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003532:	f023 030c 	bic.w	r3, r3, #12
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	430b      	orrs	r3, r1
 800353e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a2c      	ldr	r2, [pc, #176]	; (800360c <UART_SetConfig+0x114>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d103      	bne.n	8003568 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003560:	f7ff fcdc 	bl	8002f1c <HAL_RCC_GetPCLK2Freq>
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	e002      	b.n	800356e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003568:	f7ff fcc4 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 800356c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	009a      	lsls	r2, r3, #2
 8003578:	441a      	add	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	4a22      	ldr	r2, [pc, #136]	; (8003610 <UART_SetConfig+0x118>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	0119      	lsls	r1, r3, #4
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	009a      	lsls	r2, r3, #2
 8003598:	441a      	add	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a4:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <UART_SetConfig+0x118>)
 80035a6:	fba3 0302 	umull	r0, r3, r3, r2
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	2064      	movs	r0, #100	; 0x64
 80035ae:	fb00 f303 	mul.w	r3, r0, r3
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	3332      	adds	r3, #50	; 0x32
 80035b8:	4a15      	ldr	r2, [pc, #84]	; (8003610 <UART_SetConfig+0x118>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c4:	4419      	add	r1, r3
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	009a      	lsls	r2, r3, #2
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <UART_SetConfig+0x118>)
 80035de:	fba3 0302 	umull	r0, r3, r3, r2
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2064      	movs	r0, #100	; 0x64
 80035e6:	fb00 f303 	mul.w	r3, r0, r3
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	3332      	adds	r3, #50	; 0x32
 80035f0:	4a07      	ldr	r2, [pc, #28]	; (8003610 <UART_SetConfig+0x118>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	f003 020f 	and.w	r2, r3, #15
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	440a      	add	r2, r1
 8003602:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003604:	bf00      	nop
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40013800 	.word	0x40013800
 8003610:	51eb851f 	.word	0x51eb851f

08003614 <__errno>:
 8003614:	4b01      	ldr	r3, [pc, #4]	; (800361c <__errno+0x8>)
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	2000000c 	.word	0x2000000c

08003620 <__libc_init_array>:
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	2500      	movs	r5, #0
 8003624:	4e0c      	ldr	r6, [pc, #48]	; (8003658 <__libc_init_array+0x38>)
 8003626:	4c0d      	ldr	r4, [pc, #52]	; (800365c <__libc_init_array+0x3c>)
 8003628:	1ba4      	subs	r4, r4, r6
 800362a:	10a4      	asrs	r4, r4, #2
 800362c:	42a5      	cmp	r5, r4
 800362e:	d109      	bne.n	8003644 <__libc_init_array+0x24>
 8003630:	f000 fc34 	bl	8003e9c <_init>
 8003634:	2500      	movs	r5, #0
 8003636:	4e0a      	ldr	r6, [pc, #40]	; (8003660 <__libc_init_array+0x40>)
 8003638:	4c0a      	ldr	r4, [pc, #40]	; (8003664 <__libc_init_array+0x44>)
 800363a:	1ba4      	subs	r4, r4, r6
 800363c:	10a4      	asrs	r4, r4, #2
 800363e:	42a5      	cmp	r5, r4
 8003640:	d105      	bne.n	800364e <__libc_init_array+0x2e>
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003648:	4798      	blx	r3
 800364a:	3501      	adds	r5, #1
 800364c:	e7ee      	b.n	800362c <__libc_init_array+0xc>
 800364e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003652:	4798      	blx	r3
 8003654:	3501      	adds	r5, #1
 8003656:	e7f2      	b.n	800363e <__libc_init_array+0x1e>
 8003658:	08003f50 	.word	0x08003f50
 800365c:	08003f50 	.word	0x08003f50
 8003660:	08003f50 	.word	0x08003f50
 8003664:	08003f54 	.word	0x08003f54

08003668 <memset>:
 8003668:	4603      	mov	r3, r0
 800366a:	4402      	add	r2, r0
 800366c:	4293      	cmp	r3, r2
 800366e:	d100      	bne.n	8003672 <memset+0xa>
 8003670:	4770      	bx	lr
 8003672:	f803 1b01 	strb.w	r1, [r3], #1
 8003676:	e7f9      	b.n	800366c <memset+0x4>

08003678 <siprintf>:
 8003678:	b40e      	push	{r1, r2, r3}
 800367a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800367e:	b500      	push	{lr}
 8003680:	b09c      	sub	sp, #112	; 0x70
 8003682:	ab1d      	add	r3, sp, #116	; 0x74
 8003684:	9002      	str	r0, [sp, #8]
 8003686:	9006      	str	r0, [sp, #24]
 8003688:	9107      	str	r1, [sp, #28]
 800368a:	9104      	str	r1, [sp, #16]
 800368c:	4808      	ldr	r0, [pc, #32]	; (80036b0 <siprintf+0x38>)
 800368e:	4909      	ldr	r1, [pc, #36]	; (80036b4 <siprintf+0x3c>)
 8003690:	f853 2b04 	ldr.w	r2, [r3], #4
 8003694:	9105      	str	r1, [sp, #20]
 8003696:	6800      	ldr	r0, [r0, #0]
 8003698:	a902      	add	r1, sp, #8
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	f000 f866 	bl	800376c <_svfiprintf_r>
 80036a0:	2200      	movs	r2, #0
 80036a2:	9b02      	ldr	r3, [sp, #8]
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	b01c      	add	sp, #112	; 0x70
 80036a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80036ac:	b003      	add	sp, #12
 80036ae:	4770      	bx	lr
 80036b0:	2000000c 	.word	0x2000000c
 80036b4:	ffff0208 	.word	0xffff0208

080036b8 <__ssputs_r>:
 80036b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036bc:	688e      	ldr	r6, [r1, #8]
 80036be:	4682      	mov	sl, r0
 80036c0:	429e      	cmp	r6, r3
 80036c2:	460c      	mov	r4, r1
 80036c4:	4690      	mov	r8, r2
 80036c6:	4699      	mov	r9, r3
 80036c8:	d837      	bhi.n	800373a <__ssputs_r+0x82>
 80036ca:	898a      	ldrh	r2, [r1, #12]
 80036cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036d0:	d031      	beq.n	8003736 <__ssputs_r+0x7e>
 80036d2:	2302      	movs	r3, #2
 80036d4:	6825      	ldr	r5, [r4, #0]
 80036d6:	6909      	ldr	r1, [r1, #16]
 80036d8:	1a6f      	subs	r7, r5, r1
 80036da:	6965      	ldr	r5, [r4, #20]
 80036dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80036e4:	f109 0301 	add.w	r3, r9, #1
 80036e8:	443b      	add	r3, r7
 80036ea:	429d      	cmp	r5, r3
 80036ec:	bf38      	it	cc
 80036ee:	461d      	movcc	r5, r3
 80036f0:	0553      	lsls	r3, r2, #21
 80036f2:	d530      	bpl.n	8003756 <__ssputs_r+0x9e>
 80036f4:	4629      	mov	r1, r5
 80036f6:	f000 fb37 	bl	8003d68 <_malloc_r>
 80036fa:	4606      	mov	r6, r0
 80036fc:	b950      	cbnz	r0, 8003714 <__ssputs_r+0x5c>
 80036fe:	230c      	movs	r3, #12
 8003700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003704:	f8ca 3000 	str.w	r3, [sl]
 8003708:	89a3      	ldrh	r3, [r4, #12]
 800370a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800370e:	81a3      	strh	r3, [r4, #12]
 8003710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003714:	463a      	mov	r2, r7
 8003716:	6921      	ldr	r1, [r4, #16]
 8003718:	f000 fab6 	bl	8003c88 <memcpy>
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003726:	81a3      	strh	r3, [r4, #12]
 8003728:	6126      	str	r6, [r4, #16]
 800372a:	443e      	add	r6, r7
 800372c:	6026      	str	r6, [r4, #0]
 800372e:	464e      	mov	r6, r9
 8003730:	6165      	str	r5, [r4, #20]
 8003732:	1bed      	subs	r5, r5, r7
 8003734:	60a5      	str	r5, [r4, #8]
 8003736:	454e      	cmp	r6, r9
 8003738:	d900      	bls.n	800373c <__ssputs_r+0x84>
 800373a:	464e      	mov	r6, r9
 800373c:	4632      	mov	r2, r6
 800373e:	4641      	mov	r1, r8
 8003740:	6820      	ldr	r0, [r4, #0]
 8003742:	f000 faac 	bl	8003c9e <memmove>
 8003746:	68a3      	ldr	r3, [r4, #8]
 8003748:	2000      	movs	r0, #0
 800374a:	1b9b      	subs	r3, r3, r6
 800374c:	60a3      	str	r3, [r4, #8]
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	441e      	add	r6, r3
 8003752:	6026      	str	r6, [r4, #0]
 8003754:	e7dc      	b.n	8003710 <__ssputs_r+0x58>
 8003756:	462a      	mov	r2, r5
 8003758:	f000 fb60 	bl	8003e1c <_realloc_r>
 800375c:	4606      	mov	r6, r0
 800375e:	2800      	cmp	r0, #0
 8003760:	d1e2      	bne.n	8003728 <__ssputs_r+0x70>
 8003762:	6921      	ldr	r1, [r4, #16]
 8003764:	4650      	mov	r0, sl
 8003766:	f000 fab3 	bl	8003cd0 <_free_r>
 800376a:	e7c8      	b.n	80036fe <__ssputs_r+0x46>

0800376c <_svfiprintf_r>:
 800376c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003770:	461d      	mov	r5, r3
 8003772:	898b      	ldrh	r3, [r1, #12]
 8003774:	b09d      	sub	sp, #116	; 0x74
 8003776:	061f      	lsls	r7, r3, #24
 8003778:	4680      	mov	r8, r0
 800377a:	460c      	mov	r4, r1
 800377c:	4616      	mov	r6, r2
 800377e:	d50f      	bpl.n	80037a0 <_svfiprintf_r+0x34>
 8003780:	690b      	ldr	r3, [r1, #16]
 8003782:	b96b      	cbnz	r3, 80037a0 <_svfiprintf_r+0x34>
 8003784:	2140      	movs	r1, #64	; 0x40
 8003786:	f000 faef 	bl	8003d68 <_malloc_r>
 800378a:	6020      	str	r0, [r4, #0]
 800378c:	6120      	str	r0, [r4, #16]
 800378e:	b928      	cbnz	r0, 800379c <_svfiprintf_r+0x30>
 8003790:	230c      	movs	r3, #12
 8003792:	f8c8 3000 	str.w	r3, [r8]
 8003796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800379a:	e0c8      	b.n	800392e <_svfiprintf_r+0x1c2>
 800379c:	2340      	movs	r3, #64	; 0x40
 800379e:	6163      	str	r3, [r4, #20]
 80037a0:	2300      	movs	r3, #0
 80037a2:	9309      	str	r3, [sp, #36]	; 0x24
 80037a4:	2320      	movs	r3, #32
 80037a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037aa:	2330      	movs	r3, #48	; 0x30
 80037ac:	f04f 0b01 	mov.w	fp, #1
 80037b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037b4:	9503      	str	r5, [sp, #12]
 80037b6:	4637      	mov	r7, r6
 80037b8:	463d      	mov	r5, r7
 80037ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80037be:	b10b      	cbz	r3, 80037c4 <_svfiprintf_r+0x58>
 80037c0:	2b25      	cmp	r3, #37	; 0x25
 80037c2:	d13e      	bne.n	8003842 <_svfiprintf_r+0xd6>
 80037c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80037c8:	d00b      	beq.n	80037e2 <_svfiprintf_r+0x76>
 80037ca:	4653      	mov	r3, sl
 80037cc:	4632      	mov	r2, r6
 80037ce:	4621      	mov	r1, r4
 80037d0:	4640      	mov	r0, r8
 80037d2:	f7ff ff71 	bl	80036b8 <__ssputs_r>
 80037d6:	3001      	adds	r0, #1
 80037d8:	f000 80a4 	beq.w	8003924 <_svfiprintf_r+0x1b8>
 80037dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037de:	4453      	add	r3, sl
 80037e0:	9309      	str	r3, [sp, #36]	; 0x24
 80037e2:	783b      	ldrb	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 809d 	beq.w	8003924 <_svfiprintf_r+0x1b8>
 80037ea:	2300      	movs	r3, #0
 80037ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037f4:	9304      	str	r3, [sp, #16]
 80037f6:	9307      	str	r3, [sp, #28]
 80037f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037fc:	931a      	str	r3, [sp, #104]	; 0x68
 80037fe:	462f      	mov	r7, r5
 8003800:	2205      	movs	r2, #5
 8003802:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003806:	4850      	ldr	r0, [pc, #320]	; (8003948 <_svfiprintf_r+0x1dc>)
 8003808:	f000 fa30 	bl	8003c6c <memchr>
 800380c:	9b04      	ldr	r3, [sp, #16]
 800380e:	b9d0      	cbnz	r0, 8003846 <_svfiprintf_r+0xda>
 8003810:	06d9      	lsls	r1, r3, #27
 8003812:	bf44      	itt	mi
 8003814:	2220      	movmi	r2, #32
 8003816:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800381a:	071a      	lsls	r2, r3, #28
 800381c:	bf44      	itt	mi
 800381e:	222b      	movmi	r2, #43	; 0x2b
 8003820:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003824:	782a      	ldrb	r2, [r5, #0]
 8003826:	2a2a      	cmp	r2, #42	; 0x2a
 8003828:	d015      	beq.n	8003856 <_svfiprintf_r+0xea>
 800382a:	462f      	mov	r7, r5
 800382c:	2000      	movs	r0, #0
 800382e:	250a      	movs	r5, #10
 8003830:	9a07      	ldr	r2, [sp, #28]
 8003832:	4639      	mov	r1, r7
 8003834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003838:	3b30      	subs	r3, #48	; 0x30
 800383a:	2b09      	cmp	r3, #9
 800383c:	d94d      	bls.n	80038da <_svfiprintf_r+0x16e>
 800383e:	b1b8      	cbz	r0, 8003870 <_svfiprintf_r+0x104>
 8003840:	e00f      	b.n	8003862 <_svfiprintf_r+0xf6>
 8003842:	462f      	mov	r7, r5
 8003844:	e7b8      	b.n	80037b8 <_svfiprintf_r+0x4c>
 8003846:	4a40      	ldr	r2, [pc, #256]	; (8003948 <_svfiprintf_r+0x1dc>)
 8003848:	463d      	mov	r5, r7
 800384a:	1a80      	subs	r0, r0, r2
 800384c:	fa0b f000 	lsl.w	r0, fp, r0
 8003850:	4318      	orrs	r0, r3
 8003852:	9004      	str	r0, [sp, #16]
 8003854:	e7d3      	b.n	80037fe <_svfiprintf_r+0x92>
 8003856:	9a03      	ldr	r2, [sp, #12]
 8003858:	1d11      	adds	r1, r2, #4
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	9103      	str	r1, [sp, #12]
 800385e:	2a00      	cmp	r2, #0
 8003860:	db01      	blt.n	8003866 <_svfiprintf_r+0xfa>
 8003862:	9207      	str	r2, [sp, #28]
 8003864:	e004      	b.n	8003870 <_svfiprintf_r+0x104>
 8003866:	4252      	negs	r2, r2
 8003868:	f043 0302 	orr.w	r3, r3, #2
 800386c:	9207      	str	r2, [sp, #28]
 800386e:	9304      	str	r3, [sp, #16]
 8003870:	783b      	ldrb	r3, [r7, #0]
 8003872:	2b2e      	cmp	r3, #46	; 0x2e
 8003874:	d10c      	bne.n	8003890 <_svfiprintf_r+0x124>
 8003876:	787b      	ldrb	r3, [r7, #1]
 8003878:	2b2a      	cmp	r3, #42	; 0x2a
 800387a:	d133      	bne.n	80038e4 <_svfiprintf_r+0x178>
 800387c:	9b03      	ldr	r3, [sp, #12]
 800387e:	3702      	adds	r7, #2
 8003880:	1d1a      	adds	r2, r3, #4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	9203      	str	r2, [sp, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	bfb8      	it	lt
 800388a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800388e:	9305      	str	r3, [sp, #20]
 8003890:	4d2e      	ldr	r5, [pc, #184]	; (800394c <_svfiprintf_r+0x1e0>)
 8003892:	2203      	movs	r2, #3
 8003894:	7839      	ldrb	r1, [r7, #0]
 8003896:	4628      	mov	r0, r5
 8003898:	f000 f9e8 	bl	8003c6c <memchr>
 800389c:	b138      	cbz	r0, 80038ae <_svfiprintf_r+0x142>
 800389e:	2340      	movs	r3, #64	; 0x40
 80038a0:	1b40      	subs	r0, r0, r5
 80038a2:	fa03 f000 	lsl.w	r0, r3, r0
 80038a6:	9b04      	ldr	r3, [sp, #16]
 80038a8:	3701      	adds	r7, #1
 80038aa:	4303      	orrs	r3, r0
 80038ac:	9304      	str	r3, [sp, #16]
 80038ae:	7839      	ldrb	r1, [r7, #0]
 80038b0:	2206      	movs	r2, #6
 80038b2:	4827      	ldr	r0, [pc, #156]	; (8003950 <_svfiprintf_r+0x1e4>)
 80038b4:	1c7e      	adds	r6, r7, #1
 80038b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038ba:	f000 f9d7 	bl	8003c6c <memchr>
 80038be:	2800      	cmp	r0, #0
 80038c0:	d038      	beq.n	8003934 <_svfiprintf_r+0x1c8>
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <_svfiprintf_r+0x1e8>)
 80038c4:	bb13      	cbnz	r3, 800390c <_svfiprintf_r+0x1a0>
 80038c6:	9b03      	ldr	r3, [sp, #12]
 80038c8:	3307      	adds	r3, #7
 80038ca:	f023 0307 	bic.w	r3, r3, #7
 80038ce:	3308      	adds	r3, #8
 80038d0:	9303      	str	r3, [sp, #12]
 80038d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038d4:	444b      	add	r3, r9
 80038d6:	9309      	str	r3, [sp, #36]	; 0x24
 80038d8:	e76d      	b.n	80037b6 <_svfiprintf_r+0x4a>
 80038da:	fb05 3202 	mla	r2, r5, r2, r3
 80038de:	2001      	movs	r0, #1
 80038e0:	460f      	mov	r7, r1
 80038e2:	e7a6      	b.n	8003832 <_svfiprintf_r+0xc6>
 80038e4:	2300      	movs	r3, #0
 80038e6:	250a      	movs	r5, #10
 80038e8:	4619      	mov	r1, r3
 80038ea:	3701      	adds	r7, #1
 80038ec:	9305      	str	r3, [sp, #20]
 80038ee:	4638      	mov	r0, r7
 80038f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038f4:	3a30      	subs	r2, #48	; 0x30
 80038f6:	2a09      	cmp	r2, #9
 80038f8:	d903      	bls.n	8003902 <_svfiprintf_r+0x196>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0c8      	beq.n	8003890 <_svfiprintf_r+0x124>
 80038fe:	9105      	str	r1, [sp, #20]
 8003900:	e7c6      	b.n	8003890 <_svfiprintf_r+0x124>
 8003902:	fb05 2101 	mla	r1, r5, r1, r2
 8003906:	2301      	movs	r3, #1
 8003908:	4607      	mov	r7, r0
 800390a:	e7f0      	b.n	80038ee <_svfiprintf_r+0x182>
 800390c:	ab03      	add	r3, sp, #12
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	4622      	mov	r2, r4
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <_svfiprintf_r+0x1ec>)
 8003914:	a904      	add	r1, sp, #16
 8003916:	4640      	mov	r0, r8
 8003918:	f3af 8000 	nop.w
 800391c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003920:	4681      	mov	r9, r0
 8003922:	d1d6      	bne.n	80038d2 <_svfiprintf_r+0x166>
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	065b      	lsls	r3, r3, #25
 8003928:	f53f af35 	bmi.w	8003796 <_svfiprintf_r+0x2a>
 800392c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800392e:	b01d      	add	sp, #116	; 0x74
 8003930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003934:	ab03      	add	r3, sp, #12
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	4622      	mov	r2, r4
 800393a:	4b07      	ldr	r3, [pc, #28]	; (8003958 <_svfiprintf_r+0x1ec>)
 800393c:	a904      	add	r1, sp, #16
 800393e:	4640      	mov	r0, r8
 8003940:	f000 f882 	bl	8003a48 <_printf_i>
 8003944:	e7ea      	b.n	800391c <_svfiprintf_r+0x1b0>
 8003946:	bf00      	nop
 8003948:	08003f1c 	.word	0x08003f1c
 800394c:	08003f22 	.word	0x08003f22
 8003950:	08003f26 	.word	0x08003f26
 8003954:	00000000 	.word	0x00000000
 8003958:	080036b9 	.word	0x080036b9

0800395c <_printf_common>:
 800395c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003960:	4691      	mov	r9, r2
 8003962:	461f      	mov	r7, r3
 8003964:	688a      	ldr	r2, [r1, #8]
 8003966:	690b      	ldr	r3, [r1, #16]
 8003968:	4606      	mov	r6, r0
 800396a:	4293      	cmp	r3, r2
 800396c:	bfb8      	it	lt
 800396e:	4613      	movlt	r3, r2
 8003970:	f8c9 3000 	str.w	r3, [r9]
 8003974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003978:	460c      	mov	r4, r1
 800397a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800397e:	b112      	cbz	r2, 8003986 <_printf_common+0x2a>
 8003980:	3301      	adds	r3, #1
 8003982:	f8c9 3000 	str.w	r3, [r9]
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	0699      	lsls	r1, r3, #26
 800398a:	bf42      	ittt	mi
 800398c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003990:	3302      	addmi	r3, #2
 8003992:	f8c9 3000 	strmi.w	r3, [r9]
 8003996:	6825      	ldr	r5, [r4, #0]
 8003998:	f015 0506 	ands.w	r5, r5, #6
 800399c:	d107      	bne.n	80039ae <_printf_common+0x52>
 800399e:	f104 0a19 	add.w	sl, r4, #25
 80039a2:	68e3      	ldr	r3, [r4, #12]
 80039a4:	f8d9 2000 	ldr.w	r2, [r9]
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	42ab      	cmp	r3, r5
 80039ac:	dc29      	bgt.n	8003a02 <_printf_common+0xa6>
 80039ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80039b2:	6822      	ldr	r2, [r4, #0]
 80039b4:	3300      	adds	r3, #0
 80039b6:	bf18      	it	ne
 80039b8:	2301      	movne	r3, #1
 80039ba:	0692      	lsls	r2, r2, #26
 80039bc:	d42e      	bmi.n	8003a1c <_printf_common+0xc0>
 80039be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039c2:	4639      	mov	r1, r7
 80039c4:	4630      	mov	r0, r6
 80039c6:	47c0      	blx	r8
 80039c8:	3001      	adds	r0, #1
 80039ca:	d021      	beq.n	8003a10 <_printf_common+0xb4>
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	68e5      	ldr	r5, [r4, #12]
 80039d0:	f003 0306 	and.w	r3, r3, #6
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	bf18      	it	ne
 80039d8:	2500      	movne	r5, #0
 80039da:	f8d9 2000 	ldr.w	r2, [r9]
 80039de:	f04f 0900 	mov.w	r9, #0
 80039e2:	bf08      	it	eq
 80039e4:	1aad      	subeq	r5, r5, r2
 80039e6:	68a3      	ldr	r3, [r4, #8]
 80039e8:	6922      	ldr	r2, [r4, #16]
 80039ea:	bf08      	it	eq
 80039ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039f0:	4293      	cmp	r3, r2
 80039f2:	bfc4      	itt	gt
 80039f4:	1a9b      	subgt	r3, r3, r2
 80039f6:	18ed      	addgt	r5, r5, r3
 80039f8:	341a      	adds	r4, #26
 80039fa:	454d      	cmp	r5, r9
 80039fc:	d11a      	bne.n	8003a34 <_printf_common+0xd8>
 80039fe:	2000      	movs	r0, #0
 8003a00:	e008      	b.n	8003a14 <_printf_common+0xb8>
 8003a02:	2301      	movs	r3, #1
 8003a04:	4652      	mov	r2, sl
 8003a06:	4639      	mov	r1, r7
 8003a08:	4630      	mov	r0, r6
 8003a0a:	47c0      	blx	r8
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d103      	bne.n	8003a18 <_printf_common+0xbc>
 8003a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a18:	3501      	adds	r5, #1
 8003a1a:	e7c2      	b.n	80039a2 <_printf_common+0x46>
 8003a1c:	2030      	movs	r0, #48	; 0x30
 8003a1e:	18e1      	adds	r1, r4, r3
 8003a20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a2a:	4422      	add	r2, r4
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a32:	e7c4      	b.n	80039be <_printf_common+0x62>
 8003a34:	2301      	movs	r3, #1
 8003a36:	4622      	mov	r2, r4
 8003a38:	4639      	mov	r1, r7
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	47c0      	blx	r8
 8003a3e:	3001      	adds	r0, #1
 8003a40:	d0e6      	beq.n	8003a10 <_printf_common+0xb4>
 8003a42:	f109 0901 	add.w	r9, r9, #1
 8003a46:	e7d8      	b.n	80039fa <_printf_common+0x9e>

08003a48 <_printf_i>:
 8003a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003a50:	460c      	mov	r4, r1
 8003a52:	7e09      	ldrb	r1, [r1, #24]
 8003a54:	b085      	sub	sp, #20
 8003a56:	296e      	cmp	r1, #110	; 0x6e
 8003a58:	4617      	mov	r7, r2
 8003a5a:	4606      	mov	r6, r0
 8003a5c:	4698      	mov	r8, r3
 8003a5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a60:	f000 80b3 	beq.w	8003bca <_printf_i+0x182>
 8003a64:	d822      	bhi.n	8003aac <_printf_i+0x64>
 8003a66:	2963      	cmp	r1, #99	; 0x63
 8003a68:	d036      	beq.n	8003ad8 <_printf_i+0x90>
 8003a6a:	d80a      	bhi.n	8003a82 <_printf_i+0x3a>
 8003a6c:	2900      	cmp	r1, #0
 8003a6e:	f000 80b9 	beq.w	8003be4 <_printf_i+0x19c>
 8003a72:	2958      	cmp	r1, #88	; 0x58
 8003a74:	f000 8083 	beq.w	8003b7e <_printf_i+0x136>
 8003a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003a80:	e032      	b.n	8003ae8 <_printf_i+0xa0>
 8003a82:	2964      	cmp	r1, #100	; 0x64
 8003a84:	d001      	beq.n	8003a8a <_printf_i+0x42>
 8003a86:	2969      	cmp	r1, #105	; 0x69
 8003a88:	d1f6      	bne.n	8003a78 <_printf_i+0x30>
 8003a8a:	6820      	ldr	r0, [r4, #0]
 8003a8c:	6813      	ldr	r3, [r2, #0]
 8003a8e:	0605      	lsls	r5, r0, #24
 8003a90:	f103 0104 	add.w	r1, r3, #4
 8003a94:	d52a      	bpl.n	8003aec <_printf_i+0xa4>
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6011      	str	r1, [r2, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	da03      	bge.n	8003aa6 <_printf_i+0x5e>
 8003a9e:	222d      	movs	r2, #45	; 0x2d
 8003aa0:	425b      	negs	r3, r3
 8003aa2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003aa6:	486f      	ldr	r0, [pc, #444]	; (8003c64 <_printf_i+0x21c>)
 8003aa8:	220a      	movs	r2, #10
 8003aaa:	e039      	b.n	8003b20 <_printf_i+0xd8>
 8003aac:	2973      	cmp	r1, #115	; 0x73
 8003aae:	f000 809d 	beq.w	8003bec <_printf_i+0x1a4>
 8003ab2:	d808      	bhi.n	8003ac6 <_printf_i+0x7e>
 8003ab4:	296f      	cmp	r1, #111	; 0x6f
 8003ab6:	d020      	beq.n	8003afa <_printf_i+0xb2>
 8003ab8:	2970      	cmp	r1, #112	; 0x70
 8003aba:	d1dd      	bne.n	8003a78 <_printf_i+0x30>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	f043 0320 	orr.w	r3, r3, #32
 8003ac2:	6023      	str	r3, [r4, #0]
 8003ac4:	e003      	b.n	8003ace <_printf_i+0x86>
 8003ac6:	2975      	cmp	r1, #117	; 0x75
 8003ac8:	d017      	beq.n	8003afa <_printf_i+0xb2>
 8003aca:	2978      	cmp	r1, #120	; 0x78
 8003acc:	d1d4      	bne.n	8003a78 <_printf_i+0x30>
 8003ace:	2378      	movs	r3, #120	; 0x78
 8003ad0:	4865      	ldr	r0, [pc, #404]	; (8003c68 <_printf_i+0x220>)
 8003ad2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ad6:	e055      	b.n	8003b84 <_printf_i+0x13c>
 8003ad8:	6813      	ldr	r3, [r2, #0]
 8003ada:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ade:	1d19      	adds	r1, r3, #4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6011      	str	r1, [r2, #0]
 8003ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e08c      	b.n	8003c06 <_printf_i+0x1be>
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003af2:	6011      	str	r1, [r2, #0]
 8003af4:	bf18      	it	ne
 8003af6:	b21b      	sxthne	r3, r3
 8003af8:	e7cf      	b.n	8003a9a <_printf_i+0x52>
 8003afa:	6813      	ldr	r3, [r2, #0]
 8003afc:	6825      	ldr	r5, [r4, #0]
 8003afe:	1d18      	adds	r0, r3, #4
 8003b00:	6010      	str	r0, [r2, #0]
 8003b02:	0628      	lsls	r0, r5, #24
 8003b04:	d501      	bpl.n	8003b0a <_printf_i+0xc2>
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	e002      	b.n	8003b10 <_printf_i+0xc8>
 8003b0a:	0668      	lsls	r0, r5, #25
 8003b0c:	d5fb      	bpl.n	8003b06 <_printf_i+0xbe>
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	296f      	cmp	r1, #111	; 0x6f
 8003b12:	bf14      	ite	ne
 8003b14:	220a      	movne	r2, #10
 8003b16:	2208      	moveq	r2, #8
 8003b18:	4852      	ldr	r0, [pc, #328]	; (8003c64 <_printf_i+0x21c>)
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b20:	6865      	ldr	r5, [r4, #4]
 8003b22:	2d00      	cmp	r5, #0
 8003b24:	60a5      	str	r5, [r4, #8]
 8003b26:	f2c0 8095 	blt.w	8003c54 <_printf_i+0x20c>
 8003b2a:	6821      	ldr	r1, [r4, #0]
 8003b2c:	f021 0104 	bic.w	r1, r1, #4
 8003b30:	6021      	str	r1, [r4, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d13d      	bne.n	8003bb2 <_printf_i+0x16a>
 8003b36:	2d00      	cmp	r5, #0
 8003b38:	f040 808e 	bne.w	8003c58 <_printf_i+0x210>
 8003b3c:	4665      	mov	r5, ip
 8003b3e:	2a08      	cmp	r2, #8
 8003b40:	d10b      	bne.n	8003b5a <_printf_i+0x112>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	07db      	lsls	r3, r3, #31
 8003b46:	d508      	bpl.n	8003b5a <_printf_i+0x112>
 8003b48:	6923      	ldr	r3, [r4, #16]
 8003b4a:	6862      	ldr	r2, [r4, #4]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	bfde      	ittt	le
 8003b50:	2330      	movle	r3, #48	; 0x30
 8003b52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b56:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b5a:	ebac 0305 	sub.w	r3, ip, r5
 8003b5e:	6123      	str	r3, [r4, #16]
 8003b60:	f8cd 8000 	str.w	r8, [sp]
 8003b64:	463b      	mov	r3, r7
 8003b66:	aa03      	add	r2, sp, #12
 8003b68:	4621      	mov	r1, r4
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	f7ff fef6 	bl	800395c <_printf_common>
 8003b70:	3001      	adds	r0, #1
 8003b72:	d14d      	bne.n	8003c10 <_printf_i+0x1c8>
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b78:	b005      	add	sp, #20
 8003b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b7e:	4839      	ldr	r0, [pc, #228]	; (8003c64 <_printf_i+0x21c>)
 8003b80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003b84:	6813      	ldr	r3, [r2, #0]
 8003b86:	6821      	ldr	r1, [r4, #0]
 8003b88:	1d1d      	adds	r5, r3, #4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6015      	str	r5, [r2, #0]
 8003b8e:	060a      	lsls	r2, r1, #24
 8003b90:	d50b      	bpl.n	8003baa <_printf_i+0x162>
 8003b92:	07ca      	lsls	r2, r1, #31
 8003b94:	bf44      	itt	mi
 8003b96:	f041 0120 	orrmi.w	r1, r1, #32
 8003b9a:	6021      	strmi	r1, [r4, #0]
 8003b9c:	b91b      	cbnz	r3, 8003ba6 <_printf_i+0x15e>
 8003b9e:	6822      	ldr	r2, [r4, #0]
 8003ba0:	f022 0220 	bic.w	r2, r2, #32
 8003ba4:	6022      	str	r2, [r4, #0]
 8003ba6:	2210      	movs	r2, #16
 8003ba8:	e7b7      	b.n	8003b1a <_printf_i+0xd2>
 8003baa:	064d      	lsls	r5, r1, #25
 8003bac:	bf48      	it	mi
 8003bae:	b29b      	uxthmi	r3, r3
 8003bb0:	e7ef      	b.n	8003b92 <_printf_i+0x14a>
 8003bb2:	4665      	mov	r5, ip
 8003bb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bb8:	fb02 3311 	mls	r3, r2, r1, r3
 8003bbc:	5cc3      	ldrb	r3, [r0, r3]
 8003bbe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	2900      	cmp	r1, #0
 8003bc6:	d1f5      	bne.n	8003bb4 <_printf_i+0x16c>
 8003bc8:	e7b9      	b.n	8003b3e <_printf_i+0xf6>
 8003bca:	6813      	ldr	r3, [r2, #0]
 8003bcc:	6825      	ldr	r5, [r4, #0]
 8003bce:	1d18      	adds	r0, r3, #4
 8003bd0:	6961      	ldr	r1, [r4, #20]
 8003bd2:	6010      	str	r0, [r2, #0]
 8003bd4:	0628      	lsls	r0, r5, #24
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	d501      	bpl.n	8003bde <_printf_i+0x196>
 8003bda:	6019      	str	r1, [r3, #0]
 8003bdc:	e002      	b.n	8003be4 <_printf_i+0x19c>
 8003bde:	066a      	lsls	r2, r5, #25
 8003be0:	d5fb      	bpl.n	8003bda <_printf_i+0x192>
 8003be2:	8019      	strh	r1, [r3, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	4665      	mov	r5, ip
 8003be8:	6123      	str	r3, [r4, #16]
 8003bea:	e7b9      	b.n	8003b60 <_printf_i+0x118>
 8003bec:	6813      	ldr	r3, [r2, #0]
 8003bee:	1d19      	adds	r1, r3, #4
 8003bf0:	6011      	str	r1, [r2, #0]
 8003bf2:	681d      	ldr	r5, [r3, #0]
 8003bf4:	6862      	ldr	r2, [r4, #4]
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	f000 f837 	bl	8003c6c <memchr>
 8003bfe:	b108      	cbz	r0, 8003c04 <_printf_i+0x1bc>
 8003c00:	1b40      	subs	r0, r0, r5
 8003c02:	6060      	str	r0, [r4, #4]
 8003c04:	6863      	ldr	r3, [r4, #4]
 8003c06:	6123      	str	r3, [r4, #16]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c0e:	e7a7      	b.n	8003b60 <_printf_i+0x118>
 8003c10:	6923      	ldr	r3, [r4, #16]
 8003c12:	462a      	mov	r2, r5
 8003c14:	4639      	mov	r1, r7
 8003c16:	4630      	mov	r0, r6
 8003c18:	47c0      	blx	r8
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	d0aa      	beq.n	8003b74 <_printf_i+0x12c>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	079b      	lsls	r3, r3, #30
 8003c22:	d413      	bmi.n	8003c4c <_printf_i+0x204>
 8003c24:	68e0      	ldr	r0, [r4, #12]
 8003c26:	9b03      	ldr	r3, [sp, #12]
 8003c28:	4298      	cmp	r0, r3
 8003c2a:	bfb8      	it	lt
 8003c2c:	4618      	movlt	r0, r3
 8003c2e:	e7a3      	b.n	8003b78 <_printf_i+0x130>
 8003c30:	2301      	movs	r3, #1
 8003c32:	464a      	mov	r2, r9
 8003c34:	4639      	mov	r1, r7
 8003c36:	4630      	mov	r0, r6
 8003c38:	47c0      	blx	r8
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	d09a      	beq.n	8003b74 <_printf_i+0x12c>
 8003c3e:	3501      	adds	r5, #1
 8003c40:	68e3      	ldr	r3, [r4, #12]
 8003c42:	9a03      	ldr	r2, [sp, #12]
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	42ab      	cmp	r3, r5
 8003c48:	dcf2      	bgt.n	8003c30 <_printf_i+0x1e8>
 8003c4a:	e7eb      	b.n	8003c24 <_printf_i+0x1dc>
 8003c4c:	2500      	movs	r5, #0
 8003c4e:	f104 0919 	add.w	r9, r4, #25
 8003c52:	e7f5      	b.n	8003c40 <_printf_i+0x1f8>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ac      	bne.n	8003bb2 <_printf_i+0x16a>
 8003c58:	7803      	ldrb	r3, [r0, #0]
 8003c5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c62:	e76c      	b.n	8003b3e <_printf_i+0xf6>
 8003c64:	08003f2d 	.word	0x08003f2d
 8003c68:	08003f3e 	.word	0x08003f3e

08003c6c <memchr>:
 8003c6c:	b510      	push	{r4, lr}
 8003c6e:	b2c9      	uxtb	r1, r1
 8003c70:	4402      	add	r2, r0
 8003c72:	4290      	cmp	r0, r2
 8003c74:	4603      	mov	r3, r0
 8003c76:	d101      	bne.n	8003c7c <memchr+0x10>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e003      	b.n	8003c84 <memchr+0x18>
 8003c7c:	781c      	ldrb	r4, [r3, #0]
 8003c7e:	3001      	adds	r0, #1
 8003c80:	428c      	cmp	r4, r1
 8003c82:	d1f6      	bne.n	8003c72 <memchr+0x6>
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd10      	pop	{r4, pc}

08003c88 <memcpy>:
 8003c88:	b510      	push	{r4, lr}
 8003c8a:	1e43      	subs	r3, r0, #1
 8003c8c:	440a      	add	r2, r1
 8003c8e:	4291      	cmp	r1, r2
 8003c90:	d100      	bne.n	8003c94 <memcpy+0xc>
 8003c92:	bd10      	pop	{r4, pc}
 8003c94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c9c:	e7f7      	b.n	8003c8e <memcpy+0x6>

08003c9e <memmove>:
 8003c9e:	4288      	cmp	r0, r1
 8003ca0:	b510      	push	{r4, lr}
 8003ca2:	eb01 0302 	add.w	r3, r1, r2
 8003ca6:	d807      	bhi.n	8003cb8 <memmove+0x1a>
 8003ca8:	1e42      	subs	r2, r0, #1
 8003caa:	4299      	cmp	r1, r3
 8003cac:	d00a      	beq.n	8003cc4 <memmove+0x26>
 8003cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cb2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003cb6:	e7f8      	b.n	8003caa <memmove+0xc>
 8003cb8:	4283      	cmp	r3, r0
 8003cba:	d9f5      	bls.n	8003ca8 <memmove+0xa>
 8003cbc:	1881      	adds	r1, r0, r2
 8003cbe:	1ad2      	subs	r2, r2, r3
 8003cc0:	42d3      	cmn	r3, r2
 8003cc2:	d100      	bne.n	8003cc6 <memmove+0x28>
 8003cc4:	bd10      	pop	{r4, pc}
 8003cc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003cce:	e7f7      	b.n	8003cc0 <memmove+0x22>

08003cd0 <_free_r>:
 8003cd0:	b538      	push	{r3, r4, r5, lr}
 8003cd2:	4605      	mov	r5, r0
 8003cd4:	2900      	cmp	r1, #0
 8003cd6:	d043      	beq.n	8003d60 <_free_r+0x90>
 8003cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cdc:	1f0c      	subs	r4, r1, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bfb8      	it	lt
 8003ce2:	18e4      	addlt	r4, r4, r3
 8003ce4:	f000 f8d0 	bl	8003e88 <__malloc_lock>
 8003ce8:	4a1e      	ldr	r2, [pc, #120]	; (8003d64 <_free_r+0x94>)
 8003cea:	6813      	ldr	r3, [r2, #0]
 8003cec:	4610      	mov	r0, r2
 8003cee:	b933      	cbnz	r3, 8003cfe <_free_r+0x2e>
 8003cf0:	6063      	str	r3, [r4, #4]
 8003cf2:	6014      	str	r4, [r2, #0]
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cfa:	f000 b8c6 	b.w	8003e8a <__malloc_unlock>
 8003cfe:	42a3      	cmp	r3, r4
 8003d00:	d90b      	bls.n	8003d1a <_free_r+0x4a>
 8003d02:	6821      	ldr	r1, [r4, #0]
 8003d04:	1862      	adds	r2, r4, r1
 8003d06:	4293      	cmp	r3, r2
 8003d08:	bf01      	itttt	eq
 8003d0a:	681a      	ldreq	r2, [r3, #0]
 8003d0c:	685b      	ldreq	r3, [r3, #4]
 8003d0e:	1852      	addeq	r2, r2, r1
 8003d10:	6022      	streq	r2, [r4, #0]
 8003d12:	6063      	str	r3, [r4, #4]
 8003d14:	6004      	str	r4, [r0, #0]
 8003d16:	e7ed      	b.n	8003cf4 <_free_r+0x24>
 8003d18:	4613      	mov	r3, r2
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	b10a      	cbz	r2, 8003d22 <_free_r+0x52>
 8003d1e:	42a2      	cmp	r2, r4
 8003d20:	d9fa      	bls.n	8003d18 <_free_r+0x48>
 8003d22:	6819      	ldr	r1, [r3, #0]
 8003d24:	1858      	adds	r0, r3, r1
 8003d26:	42a0      	cmp	r0, r4
 8003d28:	d10b      	bne.n	8003d42 <_free_r+0x72>
 8003d2a:	6820      	ldr	r0, [r4, #0]
 8003d2c:	4401      	add	r1, r0
 8003d2e:	1858      	adds	r0, r3, r1
 8003d30:	4282      	cmp	r2, r0
 8003d32:	6019      	str	r1, [r3, #0]
 8003d34:	d1de      	bne.n	8003cf4 <_free_r+0x24>
 8003d36:	6810      	ldr	r0, [r2, #0]
 8003d38:	6852      	ldr	r2, [r2, #4]
 8003d3a:	4401      	add	r1, r0
 8003d3c:	6019      	str	r1, [r3, #0]
 8003d3e:	605a      	str	r2, [r3, #4]
 8003d40:	e7d8      	b.n	8003cf4 <_free_r+0x24>
 8003d42:	d902      	bls.n	8003d4a <_free_r+0x7a>
 8003d44:	230c      	movs	r3, #12
 8003d46:	602b      	str	r3, [r5, #0]
 8003d48:	e7d4      	b.n	8003cf4 <_free_r+0x24>
 8003d4a:	6820      	ldr	r0, [r4, #0]
 8003d4c:	1821      	adds	r1, r4, r0
 8003d4e:	428a      	cmp	r2, r1
 8003d50:	bf01      	itttt	eq
 8003d52:	6811      	ldreq	r1, [r2, #0]
 8003d54:	6852      	ldreq	r2, [r2, #4]
 8003d56:	1809      	addeq	r1, r1, r0
 8003d58:	6021      	streq	r1, [r4, #0]
 8003d5a:	6062      	str	r2, [r4, #4]
 8003d5c:	605c      	str	r4, [r3, #4]
 8003d5e:	e7c9      	b.n	8003cf4 <_free_r+0x24>
 8003d60:	bd38      	pop	{r3, r4, r5, pc}
 8003d62:	bf00      	nop
 8003d64:	20000090 	.word	0x20000090

08003d68 <_malloc_r>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	1ccd      	adds	r5, r1, #3
 8003d6c:	f025 0503 	bic.w	r5, r5, #3
 8003d70:	3508      	adds	r5, #8
 8003d72:	2d0c      	cmp	r5, #12
 8003d74:	bf38      	it	cc
 8003d76:	250c      	movcc	r5, #12
 8003d78:	2d00      	cmp	r5, #0
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	db01      	blt.n	8003d82 <_malloc_r+0x1a>
 8003d7e:	42a9      	cmp	r1, r5
 8003d80:	d903      	bls.n	8003d8a <_malloc_r+0x22>
 8003d82:	230c      	movs	r3, #12
 8003d84:	6033      	str	r3, [r6, #0]
 8003d86:	2000      	movs	r0, #0
 8003d88:	bd70      	pop	{r4, r5, r6, pc}
 8003d8a:	f000 f87d 	bl	8003e88 <__malloc_lock>
 8003d8e:	4a21      	ldr	r2, [pc, #132]	; (8003e14 <_malloc_r+0xac>)
 8003d90:	6814      	ldr	r4, [r2, #0]
 8003d92:	4621      	mov	r1, r4
 8003d94:	b991      	cbnz	r1, 8003dbc <_malloc_r+0x54>
 8003d96:	4c20      	ldr	r4, [pc, #128]	; (8003e18 <_malloc_r+0xb0>)
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	b91b      	cbnz	r3, 8003da4 <_malloc_r+0x3c>
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f000 f863 	bl	8003e68 <_sbrk_r>
 8003da2:	6020      	str	r0, [r4, #0]
 8003da4:	4629      	mov	r1, r5
 8003da6:	4630      	mov	r0, r6
 8003da8:	f000 f85e 	bl	8003e68 <_sbrk_r>
 8003dac:	1c43      	adds	r3, r0, #1
 8003dae:	d124      	bne.n	8003dfa <_malloc_r+0x92>
 8003db0:	230c      	movs	r3, #12
 8003db2:	4630      	mov	r0, r6
 8003db4:	6033      	str	r3, [r6, #0]
 8003db6:	f000 f868 	bl	8003e8a <__malloc_unlock>
 8003dba:	e7e4      	b.n	8003d86 <_malloc_r+0x1e>
 8003dbc:	680b      	ldr	r3, [r1, #0]
 8003dbe:	1b5b      	subs	r3, r3, r5
 8003dc0:	d418      	bmi.n	8003df4 <_malloc_r+0x8c>
 8003dc2:	2b0b      	cmp	r3, #11
 8003dc4:	d90f      	bls.n	8003de6 <_malloc_r+0x7e>
 8003dc6:	600b      	str	r3, [r1, #0]
 8003dc8:	18cc      	adds	r4, r1, r3
 8003dca:	50cd      	str	r5, [r1, r3]
 8003dcc:	4630      	mov	r0, r6
 8003dce:	f000 f85c 	bl	8003e8a <__malloc_unlock>
 8003dd2:	f104 000b 	add.w	r0, r4, #11
 8003dd6:	1d23      	adds	r3, r4, #4
 8003dd8:	f020 0007 	bic.w	r0, r0, #7
 8003ddc:	1ac3      	subs	r3, r0, r3
 8003dde:	d0d3      	beq.n	8003d88 <_malloc_r+0x20>
 8003de0:	425a      	negs	r2, r3
 8003de2:	50e2      	str	r2, [r4, r3]
 8003de4:	e7d0      	b.n	8003d88 <_malloc_r+0x20>
 8003de6:	684b      	ldr	r3, [r1, #4]
 8003de8:	428c      	cmp	r4, r1
 8003dea:	bf16      	itet	ne
 8003dec:	6063      	strne	r3, [r4, #4]
 8003dee:	6013      	streq	r3, [r2, #0]
 8003df0:	460c      	movne	r4, r1
 8003df2:	e7eb      	b.n	8003dcc <_malloc_r+0x64>
 8003df4:	460c      	mov	r4, r1
 8003df6:	6849      	ldr	r1, [r1, #4]
 8003df8:	e7cc      	b.n	8003d94 <_malloc_r+0x2c>
 8003dfa:	1cc4      	adds	r4, r0, #3
 8003dfc:	f024 0403 	bic.w	r4, r4, #3
 8003e00:	42a0      	cmp	r0, r4
 8003e02:	d005      	beq.n	8003e10 <_malloc_r+0xa8>
 8003e04:	1a21      	subs	r1, r4, r0
 8003e06:	4630      	mov	r0, r6
 8003e08:	f000 f82e 	bl	8003e68 <_sbrk_r>
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d0cf      	beq.n	8003db0 <_malloc_r+0x48>
 8003e10:	6025      	str	r5, [r4, #0]
 8003e12:	e7db      	b.n	8003dcc <_malloc_r+0x64>
 8003e14:	20000090 	.word	0x20000090
 8003e18:	20000094 	.word	0x20000094

08003e1c <_realloc_r>:
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	4607      	mov	r7, r0
 8003e20:	4614      	mov	r4, r2
 8003e22:	460e      	mov	r6, r1
 8003e24:	b921      	cbnz	r1, 8003e30 <_realloc_r+0x14>
 8003e26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	f7ff bf9c 	b.w	8003d68 <_malloc_r>
 8003e30:	b922      	cbnz	r2, 8003e3c <_realloc_r+0x20>
 8003e32:	f7ff ff4d 	bl	8003cd0 <_free_r>
 8003e36:	4625      	mov	r5, r4
 8003e38:	4628      	mov	r0, r5
 8003e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e3c:	f000 f826 	bl	8003e8c <_malloc_usable_size_r>
 8003e40:	42a0      	cmp	r0, r4
 8003e42:	d20f      	bcs.n	8003e64 <_realloc_r+0x48>
 8003e44:	4621      	mov	r1, r4
 8003e46:	4638      	mov	r0, r7
 8003e48:	f7ff ff8e 	bl	8003d68 <_malloc_r>
 8003e4c:	4605      	mov	r5, r0
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d0f2      	beq.n	8003e38 <_realloc_r+0x1c>
 8003e52:	4631      	mov	r1, r6
 8003e54:	4622      	mov	r2, r4
 8003e56:	f7ff ff17 	bl	8003c88 <memcpy>
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	f7ff ff37 	bl	8003cd0 <_free_r>
 8003e62:	e7e9      	b.n	8003e38 <_realloc_r+0x1c>
 8003e64:	4635      	mov	r5, r6
 8003e66:	e7e7      	b.n	8003e38 <_realloc_r+0x1c>

08003e68 <_sbrk_r>:
 8003e68:	b538      	push	{r3, r4, r5, lr}
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	4c05      	ldr	r4, [pc, #20]	; (8003e84 <_sbrk_r+0x1c>)
 8003e6e:	4605      	mov	r5, r0
 8003e70:	4608      	mov	r0, r1
 8003e72:	6023      	str	r3, [r4, #0]
 8003e74:	f7fd f8b6 	bl	8000fe4 <_sbrk>
 8003e78:	1c43      	adds	r3, r0, #1
 8003e7a:	d102      	bne.n	8003e82 <_sbrk_r+0x1a>
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	b103      	cbz	r3, 8003e82 <_sbrk_r+0x1a>
 8003e80:	602b      	str	r3, [r5, #0]
 8003e82:	bd38      	pop	{r3, r4, r5, pc}
 8003e84:	2000015c 	.word	0x2000015c

08003e88 <__malloc_lock>:
 8003e88:	4770      	bx	lr

08003e8a <__malloc_unlock>:
 8003e8a:	4770      	bx	lr

08003e8c <_malloc_usable_size_r>:
 8003e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e90:	1f18      	subs	r0, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bfbc      	itt	lt
 8003e96:	580b      	ldrlt	r3, [r1, r0]
 8003e98:	18c0      	addlt	r0, r0, r3
 8003e9a:	4770      	bx	lr

08003e9c <_init>:
 8003e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9e:	bf00      	nop
 8003ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea2:	bc08      	pop	{r3}
 8003ea4:	469e      	mov	lr, r3
 8003ea6:	4770      	bx	lr

08003ea8 <_fini>:
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	bf00      	nop
 8003eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eae:	bc08      	pop	{r3}
 8003eb0:	469e      	mov	lr, r3
 8003eb2:	4770      	bx	lr
