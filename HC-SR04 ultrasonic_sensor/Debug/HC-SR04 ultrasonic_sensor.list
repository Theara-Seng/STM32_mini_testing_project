
HC-SR04 ultrasonic_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003ce0  08003ce0  00013ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d6c  08003d6c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003d6c  08003d6c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d6c  08003d6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d6c  08003d6c  00013d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000070  08003de4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003de4  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af73  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a20  00000000  00000000  0002b00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd8  00000000  00000000  0002ca30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b00  00000000  00000000  0002d608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000175ee  00000000  00000000  0002e108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000090a3  00000000  00000000  000456f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000892ad  00000000  00000000  0004e799  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7a46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035bc  00000000  00000000  000d7ac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cc8 	.word	0x08003cc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003cc8 	.word	0x08003cc8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr
 800092c:	0000      	movs	r0, r0
	...

08000930 <HAL_TIM_IC_CaptureCallback>:
uint32_t Distance  = 0;

#define TRIG_PIN GPIO_PIN_9
#define TRIG_PORT GPIOA
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7f1b      	ldrb	r3, [r3, #28]
 800093c:	2b01      	cmp	r3, #1
 800093e:	f040 8082 	bne.w	8000a46 <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000942:	4b45      	ldr	r3, [pc, #276]	; (8000a58 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d11a      	bne.n	8000980 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800094a:	2100      	movs	r1, #0
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f001 ff2b 	bl	80027a8 <HAL_TIM_ReadCapturedValue>
 8000952:	4602      	mov	r2, r0
 8000954:	4b41      	ldr	r3, [pc, #260]	; (8000a5c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000956:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000958:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <HAL_TIM_IC_CaptureCallback+0x128>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	6a1a      	ldr	r2, [r3, #32]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f022 020a 	bic.w	r2, r2, #10
 800096c:	621a      	str	r2, [r3, #32]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	6a1a      	ldr	r2, [r3, #32]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f042 0202 	orr.w	r2, r2, #2
 800097c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 800097e:	e062      	b.n	8000a46 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000980:	4b35      	ldr	r3, [pc, #212]	; (8000a58 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d15e      	bne.n	8000a46 <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000988:	2100      	movs	r1, #0
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f001 ff0c 	bl	80027a8 <HAL_TIM_ReadCapturedValue>
 8000990:	4602      	mov	r2, r0
 8000992:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000994:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800099e:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <HAL_TIM_IC_CaptureCallback+0x130>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d907      	bls.n	80009ba <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <HAL_TIM_IC_CaptureCallback+0x130>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	4a2b      	ldr	r2, [pc, #172]	; (8000a64 <HAL_TIM_IC_CaptureCallback+0x134>)
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	e00f      	b.n	80009da <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <HAL_TIM_IC_CaptureCallback+0x130>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d909      	bls.n	80009da <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80009c6:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <HAL_TIM_IC_CaptureCallback+0x130>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80009d4:	33ff      	adds	r3, #255	; 0xff
 80009d6:	4a23      	ldr	r2, [pc, #140]	; (8000a64 <HAL_TIM_IC_CaptureCallback+0x134>)
 80009d8:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 80009da:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <HAL_TIM_IC_CaptureCallback+0x134>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fcf8 	bl	80003d4 <__aeabi_ui2d>
 80009e4:	a31a      	add	r3, pc, #104	; (adr r3, 8000a50 <HAL_TIM_IC_CaptureCallback+0x120>)
 80009e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ea:	f7ff fd6d 	bl	80004c8 <__aeabi_dmul>
 80009ee:	4603      	mov	r3, r0
 80009f0:	460c      	mov	r4, r1
 80009f2:	4618      	mov	r0, r3
 80009f4:	4621      	mov	r1, r4
 80009f6:	f04f 0200 	mov.w	r2, #0
 80009fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009fe:	f7ff fe8d 	bl	800071c <__aeabi_ddiv>
 8000a02:	4603      	mov	r3, r0
 8000a04:	460c      	mov	r4, r1
 8000a06:	4618      	mov	r0, r3
 8000a08:	4621      	mov	r1, r4
 8000a0a:	f7ff ff6f 	bl	80008ec <__aeabi_d2uiz>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000a12:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6a1a      	ldr	r2, [r3, #32]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 020a 	bic.w	r2, r2, #10
 8000a28:	621a      	str	r2, [r3, #32]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6a12      	ldr	r2, [r2, #32]
 8000a34:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	68da      	ldr	r2, [r3, #12]
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f022 0202 	bic.w	r2, r2, #2
 8000a44:	60da      	str	r2, [r3, #12]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd90      	pop	{r4, r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	b020c49c 	.word	0xb020c49c
 8000a54:	3fa16872 	.word	0x3fa16872
 8000a58:	20000098 	.word	0x20000098
 8000a5c:	2000008c 	.word	0x2000008c
 8000a60:	20000090 	.word	0x20000090
 8000a64:	20000094 	.word	0x20000094
 8000a68:	2000009c 	.word	0x2000009c
 8000a6c:	200000e0 	.word	0x200000e0

08000a70 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7a:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <HCSR04_Read+0x38>)
 8000a7c:	f000 fe5e 	bl	800173c <HAL_GPIO_WritePin>
	HAL_Delay(0.0001); // wait for 10 us
 8000a80:	2000      	movs	r0, #0
 8000a82:	f000 fb5b 	bl	800113c <HAL_Delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8c:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <HCSR04_Read+0x38>)
 8000a8e:	f000 fe55 	bl	800173c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HCSR04_Read+0x3c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <HCSR04_Read+0x3c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f042 0202 	orr.w	r2, r2, #2
 8000aa0:	60da      	str	r2, [r3, #12]
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40010800 	.word	0x40010800
 8000aac:	200000e0 	.word	0x200000e0

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab6:	f000 fadf 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aba:	f000 f841 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abe:	f000 f923 	bl	8000d08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ac2:	f000 f8f7 	bl	8000cb4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ac6:	f000 f881 	bl	8000bcc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
 char hello[20]="hello world";
 8000aca:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <main+0x74>)
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ad0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4811      	ldr	r0, [pc, #68]	; (8000b28 <main+0x78>)
 8000ae2:	f001 fb07 	bl	80020f4 <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Read();
 8000ae6:	f7ff ffc3 	bl	8000a70 <HCSR04_Read>
	  sprintf(buffer,"distance=%02d %d cm \n",Distance,(Distance%10)+48);
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <main+0x7c>)
 8000aec:	6818      	ldr	r0, [r3, #0]
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <main+0x7c>)
 8000af0:	6819      	ldr	r1, [r3, #0]
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <main+0x80>)
 8000af4:	fba3 2301 	umull	r2, r3, r3, r1
 8000af8:	08da      	lsrs	r2, r3, #3
 8000afa:	4613      	mov	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	1aca      	subs	r2, r1, r3
 8000b04:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000b08:	4602      	mov	r2, r0
 8000b0a:	490a      	ldr	r1, [pc, #40]	; (8000b34 <main+0x84>)
 8000b0c:	480a      	ldr	r0, [pc, #40]	; (8000b38 <main+0x88>)
 8000b0e:	f002 fcc9 	bl	80034a4 <siprintf>
	  HAL_UART_Transmit_IT(&huart2, buffer, sizeof(buffer));
 8000b12:	2232      	movs	r2, #50	; 0x32
 8000b14:	4908      	ldr	r1, [pc, #32]	; (8000b38 <main+0x88>)
 8000b16:	4809      	ldr	r0, [pc, #36]	; (8000b3c <main+0x8c>)
 8000b18:	f002 f995 	bl	8002e46 <HAL_UART_Transmit_IT>
	  HAL_Delay(200);
 8000b1c:	20c8      	movs	r0, #200	; 0xc8
 8000b1e:	f000 fb0d 	bl	800113c <HAL_Delay>
  {
 8000b22:	e7e0      	b.n	8000ae6 <main+0x36>
 8000b24:	08003cf8 	.word	0x08003cf8
 8000b28:	200000e0 	.word	0x200000e0
 8000b2c:	2000009c 	.word	0x2000009c
 8000b30:	cccccccd 	.word	0xcccccccd
 8000b34:	08003ce0 	.word	0x08003ce0
 8000b38:	200000ac 	.word	0x200000ac
 8000b3c:	20000128 	.word	0x20000128

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b090      	sub	sp, #64	; 0x40
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0318 	add.w	r3, r7, #24
 8000b4a:	2228      	movs	r2, #40	; 0x28
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 fca0 	bl	8003494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b70:	2301      	movs	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b74:	2302      	movs	r3, #2
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b7e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0318 	add.w	r3, r7, #24
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fdef 	bl	800176c <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b94:	f000 f901 	bl	8000d9a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 f85a 	bl	8001c6c <HAL_RCC_ClockConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bbe:	f000 f8ec 	bl	8000d9a <Error_Handler>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3740      	adds	r7, #64	; 0x40
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd2:	f107 0318 	add.w	r3, r7, #24
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bea:	463b      	mov	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <MX_TIM1_Init+0xe0>)
 8000bf8:	4a2d      	ldr	r2, [pc, #180]	; (8000cb0 <MX_TIM1_Init+0xe4>)
 8000bfa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_TIM1_Init+0xe0>)
 8000bfe:	2247      	movs	r2, #71	; 0x47
 8000c00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <MX_TIM1_Init+0xe0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c08:	4b28      	ldr	r3, [pc, #160]	; (8000cac <MX_TIM1_Init+0xe0>)
 8000c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	4b26      	ldr	r3, [pc, #152]	; (8000cac <MX_TIM1_Init+0xe0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c16:	4b25      	ldr	r3, [pc, #148]	; (8000cac <MX_TIM1_Init+0xe0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1c:	4b23      	ldr	r3, [pc, #140]	; (8000cac <MX_TIM1_Init+0xe0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c22:	4822      	ldr	r0, [pc, #136]	; (8000cac <MX_TIM1_Init+0xe0>)
 8000c24:	f001 f9be 	bl	8001fa4 <HAL_TIM_Base_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000c2e:	f000 f8b4 	bl	8000d9a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c36:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c38:	f107 0318 	add.w	r3, r7, #24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481b      	ldr	r0, [pc, #108]	; (8000cac <MX_TIM1_Init+0xe0>)
 8000c40:	f001 fcfa 	bl	8002638 <HAL_TIM_ConfigClockSource>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c4a:	f000 f8a6 	bl	8000d9a <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000c4e:	4817      	ldr	r0, [pc, #92]	; (8000cac <MX_TIM1_Init+0xe0>)
 8000c50:	f001 f9f7 	bl	8002042 <HAL_TIM_IC_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000c5a:	f000 f89e 	bl	8000d9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <MX_TIM1_Init+0xe0>)
 8000c6e:	f002 f82d 	bl	8002ccc <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000c78:	f000 f88f 	bl	8000d9a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c80:	2301      	movs	r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <MX_TIM1_Init+0xe0>)
 8000c94:	f001 fc3c 	bl	8002510 <HAL_TIM_IC_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000c9e:	f000 f87c 	bl	8000d9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000e0 	.word	0x200000e0
 8000cb0:	40012c00 	.word	0x40012c00

08000cb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <MX_USART2_UART_Init+0x50>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cec:	f002 f85e 	bl	8002dac <HAL_UART_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cf6:	f000 f850 	bl	8000d9a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000128 	.word	0x20000128
 8000d04:	40004400 	.word	0x40004400

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_GPIO_Init+0x78>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <MX_GPIO_Init+0x78>)
 8000d22:	f043 0320 	orr.w	r3, r3, #32
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_GPIO_Init+0x78>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0320 	and.w	r3, r3, #32
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_GPIO_Init+0x78>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <MX_GPIO_Init+0x78>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_GPIO_Init+0x78>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <MX_GPIO_Init+0x7c>)
 8000d54:	f000 fcf2 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2302      	movs	r3, #2
 8000d68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_GPIO_Init+0x7c>)
 8000d72:	f000 fb89 	bl	8001488 <HAL_GPIO_Init>

}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010800 	.word	0x40010800

08000d88 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

 }
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr

08000d9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <Error_Handler+0x6>
	...

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_MspInit+0x5c>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <HAL_MspInit+0x5c>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6193      	str	r3, [r2, #24]
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_MspInit+0x5c>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <HAL_MspInit+0x5c>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <HAL_MspInit+0x5c>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	61d3      	str	r3, [r2, #28]
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_MspInit+0x5c>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_MspInit+0x60>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_MspInit+0x60>)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010000 	.word	0x40010000

08000e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <HAL_TIM_Base_MspInit+0x84>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d12c      	bne.n	8000e82 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_TIM_Base_MspInit+0x88>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <HAL_TIM_Base_MspInit+0x88>)
 8000e2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_TIM_Base_MspInit+0x88>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_TIM_Base_MspInit+0x88>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <HAL_TIM_Base_MspInit+0x88>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_TIM_Base_MspInit+0x88>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <HAL_TIM_Base_MspInit+0x8c>)
 8000e6e:	f000 fb0b 	bl	8001488 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	201b      	movs	r0, #27
 8000e78:	f000 fa59 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e7c:	201b      	movs	r0, #27
 8000e7e:	f000 fa72 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3720      	adds	r7, #32
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40012c00 	.word	0x40012c00
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010800 	.word	0x40010800

08000e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <HAL_UART_MspInit+0x98>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d137      	bne.n	8000f28 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <HAL_UART_MspInit+0x9c>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <HAL_UART_MspInit+0x9c>)
 8000ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec2:	61d3      	str	r3, [r2, #28]
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_UART_MspInit+0x9c>)
 8000ec6:	69db      	ldr	r3, [r3, #28]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_UART_MspInit+0x9c>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <HAL_UART_MspInit+0x9c>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_UART_MspInit+0x9c>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480f      	ldr	r0, [pc, #60]	; (8000f38 <HAL_UART_MspInit+0xa0>)
 8000efc:	f000 fac4 	bl	8001488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f00:	2308      	movs	r3, #8
 8000f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4619      	mov	r1, r3
 8000f12:	4809      	ldr	r0, [pc, #36]	; (8000f38 <HAL_UART_MspInit+0xa0>)
 8000f14:	f000 fab8 	bl	8001488 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2026      	movs	r0, #38	; 0x26
 8000f1e:	f000 fa06 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f22:	2026      	movs	r0, #38	; 0x26
 8000f24:	f000 fa1f 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40004400 	.word	0x40004400
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010800 	.word	0x40010800

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <NMI_Handler+0x4>

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler+0x4>

08000f4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f82:	f000 f8bf 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <TIM1_CC_IRQHandler+0x10>)
 8000f92:	f001 f9b5 	bl	8002300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000e0 	.word	0x200000e0

08000fa0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <USART2_IRQHandler+0x10>)
 8000fa6:	f001 ff93 	bl	8002ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000128 	.word	0x20000128

08000fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fbc:	4a14      	ldr	r2, [pc, #80]	; (8001010 <_sbrk+0x5c>)
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <_sbrk+0x60>)
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <_sbrk+0x64>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <_sbrk+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d207      	bcs.n	8000ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe4:	f002 fa2c 	bl	8003440 <__errno>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	230c      	movs	r3, #12
 8000fec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ff2:	e009      	b.n	8001008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <_sbrk+0x64>)
 8001004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20005000 	.word	0x20005000
 8001014:	00000400 	.word	0x00000400
 8001018:	200000a0 	.word	0x200000a0
 800101c:	20000170 	.word	0x20000170

08001020 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800102c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800102e:	e003      	b.n	8001038 <LoopCopyDataInit>

08001030 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001032:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001034:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001036:	3104      	adds	r1, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001038:	480a      	ldr	r0, [pc, #40]	; (8001064 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800103c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800103e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001040:	d3f6      	bcc.n	8001030 <CopyDataInit>
  ldr r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001044:	e002      	b.n	800104c <LoopFillZerobss>

08001046 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001048:	f842 3b04 	str.w	r3, [r2], #4

0800104c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800104e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001050:	d3f9      	bcc.n	8001046 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001052:	f7ff ffe5 	bl	8001020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f002 f9f9 	bl	800344c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800105a:	f7ff fd29 	bl	8000ab0 <main>
  bx lr
 800105e:	4770      	bx	lr
  ldr r3, =_sidata
 8001060:	08003d74 	.word	0x08003d74
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001068:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800106c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001070:	20000170 	.word	0x20000170

08001074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC1_2_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_Init+0x28>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_Init+0x28>)
 8001082:	f043 0310 	orr.w	r3, r3, #16
 8001086:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001088:	2003      	movs	r0, #3
 800108a:	f000 f945 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108e:	2000      	movs	r0, #0
 8001090:	f000 f808 	bl	80010a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001094:	f7ff fe86 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40022000 	.word	0x40022000

080010a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x54>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x58>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f95d 	bl	8001382 <HAL_SYSTICK_Config>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00e      	b.n	80010f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d80a      	bhi.n	80010ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e0:	f000 f925 	bl	800132e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <HAL_InitTick+0x5c>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e000      	b.n	80010f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000004 	.word	0x20000004

08001104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_IncTick+0x1c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_IncTick+0x20>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a03      	ldr	r2, [pc, #12]	; (8001124 <HAL_IncTick+0x20>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	20000008 	.word	0x20000008
 8001124:	20000168 	.word	0x20000168

08001128 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b02      	ldr	r3, [pc, #8]	; (8001138 <HAL_GetTick+0x10>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	20000168 	.word	0x20000168

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff fff0 	bl	8001128 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_Delay+0x40>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffe0 	bl	8001128 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000008 	.word	0x20000008

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0b      	blt.n	800120e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	4906      	ldr	r1, [pc, #24]	; (8001218 <__NVIC_EnableIRQ+0x34>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e4:	d301      	bcc.n	80012ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <SysTick_Config+0x40>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f2:	210f      	movs	r1, #15
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f8:	f7ff ff90 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <SysTick_Config+0x40>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <SysTick_Config+0x40>)
 8001304:	2207      	movs	r2, #7
 8001306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff2d 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff42 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff90 	bl	8001270 <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5f 	bl	800121c <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff35 	bl	80011e4 <__NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffa2 	bl	80012d4 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d005      	beq.n	80013be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2204      	movs	r2, #4
 80013b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e051      	b.n	8001462 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 020e 	bic.w	r2, r2, #14
 80013cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0201 	bic.w	r2, r2, #1
 80013dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a22      	ldr	r2, [pc, #136]	; (800146c <HAL_DMA_Abort_IT+0xd0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d029      	beq.n	800143c <HAL_DMA_Abort_IT+0xa0>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a20      	ldr	r2, [pc, #128]	; (8001470 <HAL_DMA_Abort_IT+0xd4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d022      	beq.n	8001438 <HAL_DMA_Abort_IT+0x9c>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <HAL_DMA_Abort_IT+0xd8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d01a      	beq.n	8001432 <HAL_DMA_Abort_IT+0x96>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <HAL_DMA_Abort_IT+0xdc>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d012      	beq.n	800142c <HAL_DMA_Abort_IT+0x90>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1c      	ldr	r2, [pc, #112]	; (800147c <HAL_DMA_Abort_IT+0xe0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d00a      	beq.n	8001426 <HAL_DMA_Abort_IT+0x8a>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a1a      	ldr	r2, [pc, #104]	; (8001480 <HAL_DMA_Abort_IT+0xe4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d102      	bne.n	8001420 <HAL_DMA_Abort_IT+0x84>
 800141a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800141e:	e00e      	b.n	800143e <HAL_DMA_Abort_IT+0xa2>
 8001420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001424:	e00b      	b.n	800143e <HAL_DMA_Abort_IT+0xa2>
 8001426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800142a:	e008      	b.n	800143e <HAL_DMA_Abort_IT+0xa2>
 800142c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001430:	e005      	b.n	800143e <HAL_DMA_Abort_IT+0xa2>
 8001432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001436:	e002      	b.n	800143e <HAL_DMA_Abort_IT+0xa2>
 8001438:	2310      	movs	r3, #16
 800143a:	e000      	b.n	800143e <HAL_DMA_Abort_IT+0xa2>
 800143c:	2301      	movs	r3, #1
 800143e:	4a11      	ldr	r2, [pc, #68]	; (8001484 <HAL_DMA_Abort_IT+0xe8>)
 8001440:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	4798      	blx	r3
    } 
  }
  return status;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40020008 	.word	0x40020008
 8001470:	4002001c 	.word	0x4002001c
 8001474:	40020030 	.word	0x40020030
 8001478:	40020044 	.word	0x40020044
 800147c:	40020058 	.word	0x40020058
 8001480:	4002006c 	.word	0x4002006c
 8001484:	40020000 	.word	0x40020000

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b480      	push	{r7}
 800148a:	b08b      	sub	sp, #44	; 0x2c
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800149a:	e127      	b.n	80016ec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800149c:	2201      	movs	r2, #1
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	f040 8116 	bne.w	80016e6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b12      	cmp	r3, #18
 80014c0:	d034      	beq.n	800152c <HAL_GPIO_Init+0xa4>
 80014c2:	2b12      	cmp	r3, #18
 80014c4:	d80d      	bhi.n	80014e2 <HAL_GPIO_Init+0x5a>
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d02b      	beq.n	8001522 <HAL_GPIO_Init+0x9a>
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d804      	bhi.n	80014d8 <HAL_GPIO_Init+0x50>
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d031      	beq.n	8001536 <HAL_GPIO_Init+0xae>
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d01c      	beq.n	8001510 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014d6:	e048      	b.n	800156a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d043      	beq.n	8001564 <HAL_GPIO_Init+0xdc>
 80014dc:	2b11      	cmp	r3, #17
 80014de:	d01b      	beq.n	8001518 <HAL_GPIO_Init+0x90>
          break;
 80014e0:	e043      	b.n	800156a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014e2:	4a89      	ldr	r2, [pc, #548]	; (8001708 <HAL_GPIO_Init+0x280>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d026      	beq.n	8001536 <HAL_GPIO_Init+0xae>
 80014e8:	4a87      	ldr	r2, [pc, #540]	; (8001708 <HAL_GPIO_Init+0x280>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d806      	bhi.n	80014fc <HAL_GPIO_Init+0x74>
 80014ee:	4a87      	ldr	r2, [pc, #540]	; (800170c <HAL_GPIO_Init+0x284>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d020      	beq.n	8001536 <HAL_GPIO_Init+0xae>
 80014f4:	4a86      	ldr	r2, [pc, #536]	; (8001710 <HAL_GPIO_Init+0x288>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d01d      	beq.n	8001536 <HAL_GPIO_Init+0xae>
          break;
 80014fa:	e036      	b.n	800156a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014fc:	4a85      	ldr	r2, [pc, #532]	; (8001714 <HAL_GPIO_Init+0x28c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d019      	beq.n	8001536 <HAL_GPIO_Init+0xae>
 8001502:	4a85      	ldr	r2, [pc, #532]	; (8001718 <HAL_GPIO_Init+0x290>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d016      	beq.n	8001536 <HAL_GPIO_Init+0xae>
 8001508:	4a84      	ldr	r2, [pc, #528]	; (800171c <HAL_GPIO_Init+0x294>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d013      	beq.n	8001536 <HAL_GPIO_Init+0xae>
          break;
 800150e:	e02c      	b.n	800156a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e028      	b.n	800156a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	3304      	adds	r3, #4
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	e023      	b.n	800156a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	3308      	adds	r3, #8
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e01e      	b.n	800156a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	330c      	adds	r3, #12
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e019      	b.n	800156a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800153e:	2304      	movs	r3, #4
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e012      	b.n	800156a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d105      	bne.n	8001558 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800154c:	2308      	movs	r3, #8
 800154e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	611a      	str	r2, [r3, #16]
          break;
 8001556:	e008      	b.n	800156a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001558:	2308      	movs	r3, #8
 800155a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	615a      	str	r2, [r3, #20]
          break;
 8001562:	e002      	b.n	800156a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	2bff      	cmp	r3, #255	; 0xff
 800156e:	d801      	bhi.n	8001574 <HAL_GPIO_Init+0xec>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	e001      	b.n	8001578 <HAL_GPIO_Init+0xf0>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3304      	adds	r3, #4
 8001578:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	2bff      	cmp	r3, #255	; 0xff
 800157e:	d802      	bhi.n	8001586 <HAL_GPIO_Init+0xfe>
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x104>
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	3b08      	subs	r3, #8
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	210f      	movs	r1, #15
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	401a      	ands	r2, r3
 800159e:	6a39      	ldr	r1, [r7, #32]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	431a      	orrs	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 8096 	beq.w	80016e6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ba:	4b59      	ldr	r3, [pc, #356]	; (8001720 <HAL_GPIO_Init+0x298>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	4a58      	ldr	r2, [pc, #352]	; (8001720 <HAL_GPIO_Init+0x298>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6193      	str	r3, [r2, #24]
 80015c6:	4b56      	ldr	r3, [pc, #344]	; (8001720 <HAL_GPIO_Init+0x298>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015d2:	4a54      	ldr	r2, [pc, #336]	; (8001724 <HAL_GPIO_Init+0x29c>)
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015de:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4013      	ands	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4b      	ldr	r2, [pc, #300]	; (8001728 <HAL_GPIO_Init+0x2a0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0x19e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4a      	ldr	r2, [pc, #296]	; (800172c <HAL_GPIO_Init+0x2a4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00d      	beq.n	8001622 <HAL_GPIO_Init+0x19a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a49      	ldr	r2, [pc, #292]	; (8001730 <HAL_GPIO_Init+0x2a8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x196>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a48      	ldr	r2, [pc, #288]	; (8001734 <HAL_GPIO_Init+0x2ac>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_GPIO_Init+0x192>
 8001616:	2303      	movs	r3, #3
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x1a0>
 800161a:	2304      	movs	r3, #4
 800161c:	e004      	b.n	8001628 <HAL_GPIO_Init+0x1a0>
 800161e:	2302      	movs	r3, #2
 8001620:	e002      	b.n	8001628 <HAL_GPIO_Init+0x1a0>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <HAL_GPIO_Init+0x1a0>
 8001626:	2300      	movs	r3, #0
 8001628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162a:	f002 0203 	and.w	r2, r2, #3
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	4093      	lsls	r3, r2
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4313      	orrs	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001638:	493a      	ldr	r1, [pc, #232]	; (8001724 <HAL_GPIO_Init+0x29c>)
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	3302      	adds	r3, #2
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001652:	4b39      	ldr	r3, [pc, #228]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4938      	ldr	r1, [pc, #224]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
 800165e:	e006      	b.n	800166e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001660:	4b35      	ldr	r3, [pc, #212]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	43db      	mvns	r3, r3
 8001668:	4933      	ldr	r1, [pc, #204]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 800166a:	4013      	ands	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800167a:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	492e      	ldr	r1, [pc, #184]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
 8001686:	e006      	b.n	8001696 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001688:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	43db      	mvns	r3, r3
 8001690:	4929      	ldr	r1, [pc, #164]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 8001692:	4013      	ands	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d006      	beq.n	80016b0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	4924      	ldr	r1, [pc, #144]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
 80016ae:	e006      	b.n	80016be <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	491f      	ldr	r1, [pc, #124]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d006      	beq.n	80016d8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	491a      	ldr	r1, [pc, #104]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60cb      	str	r3, [r1, #12]
 80016d6:	e006      	b.n	80016e6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	43db      	mvns	r3, r3
 80016e0:	4915      	ldr	r1, [pc, #84]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	3301      	adds	r3, #1
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	fa22 f303 	lsr.w	r3, r2, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f47f aed0 	bne.w	800149c <HAL_GPIO_Init+0x14>
  }
}
 80016fc:	bf00      	nop
 80016fe:	372c      	adds	r7, #44	; 0x2c
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	10210000 	.word	0x10210000
 800170c:	10110000 	.word	0x10110000
 8001710:	10120000 	.word	0x10120000
 8001714:	10310000 	.word	0x10310000
 8001718:	10320000 	.word	0x10320000
 800171c:	10220000 	.word	0x10220000
 8001720:	40021000 	.word	0x40021000
 8001724:	40010000 	.word	0x40010000
 8001728:	40010800 	.word	0x40010800
 800172c:	40010c00 	.word	0x40010c00
 8001730:	40011000 	.word	0x40011000
 8001734:	40011400 	.word	0x40011400
 8001738:	40010400 	.word	0x40010400

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001758:	e003      	b.n	8001762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	041a      	lsls	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	611a      	str	r2, [r3, #16]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e26c      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8087 	beq.w	800189a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800178c:	4b92      	ldr	r3, [pc, #584]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	2b04      	cmp	r3, #4
 8001796:	d00c      	beq.n	80017b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001798:	4b8f      	ldr	r3, [pc, #572]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d112      	bne.n	80017ca <HAL_RCC_OscConfig+0x5e>
 80017a4:	4b8c      	ldr	r3, [pc, #560]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b0:	d10b      	bne.n	80017ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b2:	4b89      	ldr	r3, [pc, #548]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d06c      	beq.n	8001898 <HAL_RCC_OscConfig+0x12c>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d168      	bne.n	8001898 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e246      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x76>
 80017d4:	4b80      	ldr	r3, [pc, #512]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a7f      	ldr	r2, [pc, #508]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	e02e      	b.n	8001840 <HAL_RCC_OscConfig+0xd4>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0x98>
 80017ea:	4b7b      	ldr	r3, [pc, #492]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a7a      	ldr	r2, [pc, #488]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a77      	ldr	r2, [pc, #476]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e01d      	b.n	8001840 <HAL_RCC_OscConfig+0xd4>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0xbc>
 800180e:	4b72      	ldr	r3, [pc, #456]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a71      	ldr	r2, [pc, #452]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b6f      	ldr	r3, [pc, #444]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a6e      	ldr	r2, [pc, #440]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0xd4>
 8001828:	4b6b      	ldr	r3, [pc, #428]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a6a      	ldr	r2, [pc, #424]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800182e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a67      	ldr	r2, [pc, #412]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fc6e 	bl	8001128 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fc6a 	bl	8001128 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1fa      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	4b5d      	ldr	r3, [pc, #372]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0xe4>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fc5a 	bl	8001128 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fc56 	bl	8001128 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1e6      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188a:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x10c>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d063      	beq.n	800196e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a6:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018b2:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d11c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x18c>
 80018be:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d116      	bne.n	80018f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ca:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_RCC_OscConfig+0x176>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e1ba      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4939      	ldr	r1, [pc, #228]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f6:	e03a      	b.n	800196e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d020      	beq.n	8001942 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001900:	4b36      	ldr	r3, [pc, #216]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff fc0f 	bl	8001128 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190e:	f7ff fc0b 	bl	8001128 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e19b      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192c:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4927      	ldr	r1, [pc, #156]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]
 8001940:	e015      	b.n	800196e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fbee 	bl	8001128 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff fbea 	bl	8001128 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e17a      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d03a      	beq.n	80019f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d019      	beq.n	80019b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001982:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001988:	f7ff fbce 	bl	8001128 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff fbca 	bl	8001128 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e15a      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f000 fada 	bl	8001f68 <RCC_Delay>
 80019b4:	e01c      	b.n	80019f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_RCC_OscConfig+0x274>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7ff fbb4 	bl	8001128 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c2:	e00f      	b.n	80019e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff fbb0 	bl	8001128 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d908      	bls.n	80019e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e140      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
 80019dc:	42420000 	.word	0x42420000
 80019e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e4:	4b9e      	ldr	r3, [pc, #632]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1e9      	bne.n	80019c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80a6 	beq.w	8001b4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a02:	4b97      	ldr	r3, [pc, #604]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10d      	bne.n	8001a2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b94      	ldr	r3, [pc, #592]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a93      	ldr	r2, [pc, #588]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b91      	ldr	r3, [pc, #580]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a26:	2301      	movs	r3, #1
 8001a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	4b8e      	ldr	r3, [pc, #568]	; (8001c64 <HAL_RCC_OscConfig+0x4f8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d118      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a36:	4b8b      	ldr	r3, [pc, #556]	; (8001c64 <HAL_RCC_OscConfig+0x4f8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a8a      	ldr	r2, [pc, #552]	; (8001c64 <HAL_RCC_OscConfig+0x4f8>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a42:	f7ff fb71 	bl	8001128 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4a:	f7ff fb6d 	bl	8001128 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b64      	cmp	r3, #100	; 0x64
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e0fd      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	4b81      	ldr	r3, [pc, #516]	; (8001c64 <HAL_RCC_OscConfig+0x4f8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x312>
 8001a70:	4b7b      	ldr	r3, [pc, #492]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a7a      	ldr	r2, [pc, #488]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6213      	str	r3, [r2, #32]
 8001a7c:	e02d      	b.n	8001ada <HAL_RCC_OscConfig+0x36e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x334>
 8001a86:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a75      	ldr	r2, [pc, #468]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	4b73      	ldr	r3, [pc, #460]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a72      	ldr	r2, [pc, #456]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	6213      	str	r3, [r2, #32]
 8001a9e:	e01c      	b.n	8001ada <HAL_RCC_OscConfig+0x36e>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d10c      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x356>
 8001aa8:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4a6c      	ldr	r2, [pc, #432]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6213      	str	r3, [r2, #32]
 8001ab4:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4a69      	ldr	r2, [pc, #420]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6213      	str	r3, [r2, #32]
 8001ac0:	e00b      	b.n	8001ada <HAL_RCC_OscConfig+0x36e>
 8001ac2:	4b67      	ldr	r3, [pc, #412]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a66      	ldr	r2, [pc, #408]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6213      	str	r3, [r2, #32]
 8001ace:	4b64      	ldr	r3, [pc, #400]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4a63      	ldr	r2, [pc, #396]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d015      	beq.n	8001b0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fb21 	bl	8001128 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff fb1d 	bl	8001128 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e0ab      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b00:	4b57      	ldr	r3, [pc, #348]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0ee      	beq.n	8001aea <HAL_RCC_OscConfig+0x37e>
 8001b0c:	e014      	b.n	8001b38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0e:	f7ff fb0b 	bl	8001128 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7ff fb07 	bl	8001128 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e095      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2c:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1ee      	bne.n	8001b16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d105      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3e:	4b48      	ldr	r3, [pc, #288]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a47      	ldr	r2, [pc, #284]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8081 	beq.w	8001c56 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b54:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d061      	beq.n	8001c24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d146      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b68:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_RCC_OscConfig+0x4fc>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7ff fadb 	bl	8001128 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b76:	f7ff fad7 	bl	8001128 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e067      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b88:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f0      	bne.n	8001b76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9c:	d108      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b9e:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	492d      	ldr	r1, [pc, #180]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a19      	ldr	r1, [r3, #32]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	4927      	ldr	r1, [pc, #156]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_RCC_OscConfig+0x4fc>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff faab 	bl	8001128 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7ff faa7 	bl	8001128 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e037      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x46a>
 8001bf4:	e02f      	b.n	8001c56 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_RCC_OscConfig+0x4fc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fa94 	bl	8001128 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff fa90 	bl	8001128 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e020      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x498>
 8001c22:	e018      	b.n	8001c56 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e013      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_OscConfig+0x4f4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40007000 	.word	0x40007000
 8001c68:	42420060 	.word	0x42420060

08001c6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0d0      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c80:	4b6a      	ldr	r3, [pc, #424]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d910      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b67      	ldr	r3, [pc, #412]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 0207 	bic.w	r2, r3, #7
 8001c96:	4965      	ldr	r1, [pc, #404]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b63      	ldr	r3, [pc, #396]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0b8      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d020      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc8:	4b59      	ldr	r3, [pc, #356]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4a58      	ldr	r2, [pc, #352]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce0:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4a52      	ldr	r2, [pc, #328]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cec:	4b50      	ldr	r3, [pc, #320]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	494d      	ldr	r1, [pc, #308]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d040      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b47      	ldr	r3, [pc, #284]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d115      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e07f      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2a:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e073      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e06b      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d4a:	4b39      	ldr	r3, [pc, #228]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f023 0203 	bic.w	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4936      	ldr	r1, [pc, #216]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d5c:	f7ff f9e4 	bl	8001128 <HAL_GetTick>
 8001d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d64:	f7ff f9e0 	bl	8001128 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e053      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 020c 	and.w	r2, r3, #12
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d1eb      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d210      	bcs.n	8001dbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 0207 	bic.w	r2, r3, #7
 8001da2:	4922      	ldr	r1, [pc, #136]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e032      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4916      	ldr	r1, [pc, #88]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	490e      	ldr	r1, [pc, #56]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dfa:	f000 f821 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 8001dfe:	4601      	mov	r1, r0
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0c:	5cd3      	ldrb	r3, [r2, r3]
 8001e0e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <HAL_RCC_ClockConfig+0x1cc>)
 8001e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x1d0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f942 	bl	80010a4 <HAL_InitTick>

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40022000 	.word	0x40022000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	08003d20 	.word	0x08003d20
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	20000004 	.word	0x20000004

08001e40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e40:	b490      	push	{r4, r7}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e48:	1d3c      	adds	r4, r7, #4
 8001e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e6a:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d002      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x40>
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d003      	beq.n	8001e86 <HAL_RCC_GetSysClockFreq+0x46>
 8001e7e:	e02d      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e82:	623b      	str	r3, [r7, #32]
      break;
 8001e84:	e02d      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	0c9b      	lsrs	r3, r3, #18
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e92:	4413      	add	r3, r2
 8001e94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e98:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d013      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	0c5b      	lsrs	r3, r3, #17
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001eb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ebe:	fb02 f203 	mul.w	r2, r2, r3
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eca:	e004      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	623b      	str	r3, [r7, #32]
      break;
 8001eda:	e002      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ede:	623b      	str	r3, [r7, #32]
      break;
 8001ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3728      	adds	r7, #40	; 0x28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc90      	pop	{r4, r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	08003d0c 	.word	0x08003d0c
 8001ef4:	08003d1c 	.word	0x08003d1c
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	007a1200 	.word	0x007a1200
 8001f00:	003d0900 	.word	0x003d0900

08001f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f08:	4b02      	ldr	r3, [pc, #8]	; (8001f14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	20000000 	.word	0x20000000

08001f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f1c:	f7ff fff2 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f20:	4601      	mov	r1, r0
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
 8001f30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08003d30 	.word	0x08003d30

08001f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f44:	f7ff ffde 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f48:	4601      	mov	r1, r0
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	0adb      	lsrs	r3, r3, #11
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08003d30 	.word	0x08003d30

08001f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <RCC_Delay+0x34>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <RCC_Delay+0x38>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	0a5b      	lsrs	r3, r3, #9
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f84:	bf00      	nop
  }
  while (Delay --);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1e5a      	subs	r2, r3, #1
 8001f8a:	60fa      	str	r2, [r7, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f9      	bne.n	8001f84 <RCC_Delay+0x1c>
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	10624dd3 	.word	0x10624dd3

08001fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e041      	b.n	800203a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe ff1c 	bl	8000e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	f000 fc48 	bl	8002878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e041      	b.n	80020d8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d106      	bne.n	800206e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f839 	bl	80020e0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	4619      	mov	r1, r3
 8002080:	4610      	mov	r0, r2
 8002082:	f000 fbf9 	bl	8002878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d104      	bne.n	800210e <HAL_TIM_IC_Start_IT+0x1a>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800210a:	b2db      	uxtb	r3, r3
 800210c:	e013      	b.n	8002136 <HAL_TIM_IC_Start_IT+0x42>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d104      	bne.n	800211e <HAL_TIM_IC_Start_IT+0x2a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800211a:	b2db      	uxtb	r3, r3
 800211c:	e00b      	b.n	8002136 <HAL_TIM_IC_Start_IT+0x42>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b08      	cmp	r3, #8
 8002122:	d104      	bne.n	800212e <HAL_TIM_IC_Start_IT+0x3a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800212a:	b2db      	uxtb	r3, r3
 800212c:	e003      	b.n	8002136 <HAL_TIM_IC_Start_IT+0x42>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002134:	b2db      	uxtb	r3, r3
 8002136:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d104      	bne.n	8002148 <HAL_TIM_IC_Start_IT+0x54>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e013      	b.n	8002170 <HAL_TIM_IC_Start_IT+0x7c>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b04      	cmp	r3, #4
 800214c:	d104      	bne.n	8002158 <HAL_TIM_IC_Start_IT+0x64>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e00b      	b.n	8002170 <HAL_TIM_IC_Start_IT+0x7c>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b08      	cmp	r3, #8
 800215c:	d104      	bne.n	8002168 <HAL_TIM_IC_Start_IT+0x74>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002164:	b2db      	uxtb	r3, r3
 8002166:	e003      	b.n	8002170 <HAL_TIM_IC_Start_IT+0x7c>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800216e:	b2db      	uxtb	r3, r3
 8002170:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d102      	bne.n	800217e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002178:	7bbb      	ldrb	r3, [r7, #14]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d001      	beq.n	8002182 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e0b3      	b.n	80022ea <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d104      	bne.n	8002192 <HAL_TIM_IC_Start_IT+0x9e>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002190:	e013      	b.n	80021ba <HAL_TIM_IC_Start_IT+0xc6>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b04      	cmp	r3, #4
 8002196:	d104      	bne.n	80021a2 <HAL_TIM_IC_Start_IT+0xae>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a0:	e00b      	b.n	80021ba <HAL_TIM_IC_Start_IT+0xc6>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d104      	bne.n	80021b2 <HAL_TIM_IC_Start_IT+0xbe>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b0:	e003      	b.n	80021ba <HAL_TIM_IC_Start_IT+0xc6>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d104      	bne.n	80021ca <HAL_TIM_IC_Start_IT+0xd6>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021c8:	e013      	b.n	80021f2 <HAL_TIM_IC_Start_IT+0xfe>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d104      	bne.n	80021da <HAL_TIM_IC_Start_IT+0xe6>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021d8:	e00b      	b.n	80021f2 <HAL_TIM_IC_Start_IT+0xfe>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d104      	bne.n	80021ea <HAL_TIM_IC_Start_IT+0xf6>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e8:	e003      	b.n	80021f2 <HAL_TIM_IC_Start_IT+0xfe>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2202      	movs	r2, #2
 80021ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b0c      	cmp	r3, #12
 80021f6:	d841      	bhi.n	800227c <HAL_TIM_IC_Start_IT+0x188>
 80021f8:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <HAL_TIM_IC_Start_IT+0x10c>)
 80021fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fe:	bf00      	nop
 8002200:	08002235 	.word	0x08002235
 8002204:	0800227d 	.word	0x0800227d
 8002208:	0800227d 	.word	0x0800227d
 800220c:	0800227d 	.word	0x0800227d
 8002210:	08002247 	.word	0x08002247
 8002214:	0800227d 	.word	0x0800227d
 8002218:	0800227d 	.word	0x0800227d
 800221c:	0800227d 	.word	0x0800227d
 8002220:	08002259 	.word	0x08002259
 8002224:	0800227d 	.word	0x0800227d
 8002228:	0800227d 	.word	0x0800227d
 800222c:	0800227d 	.word	0x0800227d
 8002230:	0800226b 	.word	0x0800226b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0202 	orr.w	r2, r2, #2
 8002242:	60da      	str	r2, [r3, #12]
      break;
 8002244:	e01b      	b.n	800227e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0204 	orr.w	r2, r2, #4
 8002254:	60da      	str	r2, [r3, #12]
      break;
 8002256:	e012      	b.n	800227e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0208 	orr.w	r2, r2, #8
 8002266:	60da      	str	r2, [r3, #12]
      break;
 8002268:	e009      	b.n	800227e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0210 	orr.w	r2, r2, #16
 8002278:	60da      	str	r2, [r3, #12]
      break;
 800227a:	e000      	b.n	800227e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800227c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2201      	movs	r2, #1
 8002284:	6839      	ldr	r1, [r7, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fcfb 	bl	8002c82 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <HAL_TIM_IC_Start_IT+0x200>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_TIM_IC_Start_IT+0x1c0>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229e:	d009      	beq.n	80022b4 <HAL_TIM_IC_Start_IT+0x1c0>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <HAL_TIM_IC_Start_IT+0x204>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_TIM_IC_Start_IT+0x1c0>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a13      	ldr	r2, [pc, #76]	; (80022fc <HAL_TIM_IC_Start_IT+0x208>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d111      	bne.n	80022d8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d010      	beq.n	80022e8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d6:	e007      	b.n	80022e8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40000800 	.word	0x40000800

08002300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	d122      	bne.n	800235c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b02      	cmp	r3, #2
 8002322:	d11b      	bne.n	800235c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0202 	mvn.w	r2, #2
 800232c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe faf4 	bl	8000930 <HAL_TIM_IC_CaptureCallback>
 8002348:	e005      	b.n	8002356 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fa79 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 fa7f 	bl	8002854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b04      	cmp	r3, #4
 8002368:	d122      	bne.n	80023b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b04      	cmp	r3, #4
 8002376:	d11b      	bne.n	80023b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0204 	mvn.w	r2, #4
 8002380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe faca 	bl	8000930 <HAL_TIM_IC_CaptureCallback>
 800239c:	e005      	b.n	80023aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fa4f 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fa55 	bl	8002854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d122      	bne.n	8002404 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d11b      	bne.n	8002404 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0208 	mvn.w	r2, #8
 80023d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2204      	movs	r2, #4
 80023da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe faa0 	bl	8000930 <HAL_TIM_IC_CaptureCallback>
 80023f0:	e005      	b.n	80023fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fa25 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fa2b 	bl	8002854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b10      	cmp	r3, #16
 8002410:	d122      	bne.n	8002458 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b10      	cmp	r3, #16
 800241e:	d11b      	bne.n	8002458 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0210 	mvn.w	r2, #16
 8002428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2208      	movs	r2, #8
 800242e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fe fa76 	bl	8000930 <HAL_TIM_IC_CaptureCallback>
 8002444:	e005      	b.n	8002452 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f9fb 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fa01 	bl	8002854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d10e      	bne.n	8002484 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d107      	bne.n	8002484 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0201 	mvn.w	r2, #1
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f9d6 	bl	8002830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248e:	2b80      	cmp	r3, #128	; 0x80
 8002490:	d10e      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249c:	2b80      	cmp	r3, #128	; 0x80
 800249e:	d107      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fc75 	bl	8002d9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ba:	2b40      	cmp	r3, #64	; 0x40
 80024bc:	d10e      	bne.n	80024dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c8:	2b40      	cmp	r3, #64	; 0x40
 80024ca:	d107      	bne.n	80024dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f9c5 	bl	8002866 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d10e      	bne.n	8002508 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d107      	bne.n	8002508 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0220 	mvn.w	r2, #32
 8002500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fc40 	bl	8002d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_TIM_IC_ConfigChannel+0x1a>
 8002526:	2302      	movs	r3, #2
 8002528:	e082      	b.n	8002630 <HAL_TIM_IC_ConfigChannel+0x120>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d11b      	bne.n	8002570 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f000 f9f8 	bl	800293c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 020c 	bic.w	r2, r2, #12
 800255a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6999      	ldr	r1, [r3, #24]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	619a      	str	r2, [r3, #24]
 800256e:	e05a      	b.n	8002626 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b04      	cmp	r3, #4
 8002574:	d11c      	bne.n	80025b0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	6819      	ldr	r1, [r3, #0]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f000 fa61 	bl	8002a4c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699a      	ldr	r2, [r3, #24]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002598:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6999      	ldr	r1, [r3, #24]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	021a      	lsls	r2, r3, #8
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	619a      	str	r2, [r3, #24]
 80025ae:	e03a      	b.n	8002626 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d11b      	bne.n	80025ee <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f000 faac 	bl	8002b22 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 020c 	bic.w	r2, r2, #12
 80025d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69d9      	ldr	r1, [r3, #28]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	61da      	str	r2, [r3, #28]
 80025ec:	e01b      	b.n	8002626 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f000 facb 	bl	8002b98 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002610:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69d9      	ldr	r1, [r3, #28]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	021a      	lsls	r2, r3, #8
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_TIM_ConfigClockSource+0x18>
 800264c:	2302      	movs	r3, #2
 800264e:	e0a6      	b.n	800279e <HAL_TIM_ConfigClockSource+0x166>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800266e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002676:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d067      	beq.n	8002758 <HAL_TIM_ConfigClockSource+0x120>
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d80b      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x6c>
 800268c:	2b10      	cmp	r3, #16
 800268e:	d073      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0x140>
 8002690:	2b10      	cmp	r3, #16
 8002692:	d802      	bhi.n	800269a <HAL_TIM_ConfigClockSource+0x62>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d06f      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002698:	e078      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800269a:	2b20      	cmp	r3, #32
 800269c:	d06c      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0x140>
 800269e:	2b30      	cmp	r3, #48	; 0x30
 80026a0:	d06a      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80026a2:	e073      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026a4:	2b70      	cmp	r3, #112	; 0x70
 80026a6:	d00d      	beq.n	80026c4 <HAL_TIM_ConfigClockSource+0x8c>
 80026a8:	2b70      	cmp	r3, #112	; 0x70
 80026aa:	d804      	bhi.n	80026b6 <HAL_TIM_ConfigClockSource+0x7e>
 80026ac:	2b50      	cmp	r3, #80	; 0x50
 80026ae:	d033      	beq.n	8002718 <HAL_TIM_ConfigClockSource+0xe0>
 80026b0:	2b60      	cmp	r3, #96	; 0x60
 80026b2:	d041      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80026b4:	e06a      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ba:	d066      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x152>
 80026bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c0:	d017      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80026c2:	e063      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6899      	ldr	r1, [r3, #8]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f000 fab6 	bl	8002c44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	609a      	str	r2, [r3, #8]
      break;
 80026f0:	e04c      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6899      	ldr	r1, [r3, #8]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f000 fa9f 	bl	8002c44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002714:	609a      	str	r2, [r3, #8]
      break;
 8002716:	e039      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	461a      	mov	r2, r3
 8002726:	f000 f963 	bl	80029f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2150      	movs	r1, #80	; 0x50
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fa6d 	bl	8002c10 <TIM_ITRx_SetConfig>
      break;
 8002736:	e029      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	461a      	mov	r2, r3
 8002746:	f000 f9bd 	bl	8002ac4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2160      	movs	r1, #96	; 0x60
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fa5d 	bl	8002c10 <TIM_ITRx_SetConfig>
      break;
 8002756:	e019      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	461a      	mov	r2, r3
 8002766:	f000 f943 	bl	80029f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2140      	movs	r1, #64	; 0x40
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fa4d 	bl	8002c10 <TIM_ITRx_SetConfig>
      break;
 8002776:	e009      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	4610      	mov	r0, r2
 8002784:	f000 fa44 	bl	8002c10 <TIM_ITRx_SetConfig>
        break;
 8002788:	e000      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800278a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	d831      	bhi.n	8002820 <HAL_TIM_ReadCapturedValue+0x78>
 80027bc:	a201      	add	r2, pc, #4	; (adr r2, 80027c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80027be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c2:	bf00      	nop
 80027c4:	080027f9 	.word	0x080027f9
 80027c8:	08002821 	.word	0x08002821
 80027cc:	08002821 	.word	0x08002821
 80027d0:	08002821 	.word	0x08002821
 80027d4:	08002803 	.word	0x08002803
 80027d8:	08002821 	.word	0x08002821
 80027dc:	08002821 	.word	0x08002821
 80027e0:	08002821 	.word	0x08002821
 80027e4:	0800280d 	.word	0x0800280d
 80027e8:	08002821 	.word	0x08002821
 80027ec:	08002821 	.word	0x08002821
 80027f0:	08002821 	.word	0x08002821
 80027f4:	08002817 	.word	0x08002817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fe:	60fb      	str	r3, [r7, #12]

      break;
 8002800:	e00f      	b.n	8002822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	60fb      	str	r3, [r7, #12]

      break;
 800280a:	e00a      	b.n	8002822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002812:	60fb      	str	r3, [r7, #12]

      break;
 8002814:	e005      	b.n	8002822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	60fb      	str	r3, [r7, #12]

      break;
 800281e:	e000      	b.n	8002822 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002820:	bf00      	nop
  }

  return tmpreg;
 8002822:	68fb      	ldr	r3, [r7, #12]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop

08002830 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a29      	ldr	r2, [pc, #164]	; (8002930 <TIM_Base_SetConfig+0xb8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00b      	beq.n	80028a8 <TIM_Base_SetConfig+0x30>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002896:	d007      	beq.n	80028a8 <TIM_Base_SetConfig+0x30>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a26      	ldr	r2, [pc, #152]	; (8002934 <TIM_Base_SetConfig+0xbc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d003      	beq.n	80028a8 <TIM_Base_SetConfig+0x30>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a25      	ldr	r2, [pc, #148]	; (8002938 <TIM_Base_SetConfig+0xc0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d108      	bne.n	80028ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <TIM_Base_SetConfig+0xb8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00b      	beq.n	80028da <TIM_Base_SetConfig+0x62>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c8:	d007      	beq.n	80028da <TIM_Base_SetConfig+0x62>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a19      	ldr	r2, [pc, #100]	; (8002934 <TIM_Base_SetConfig+0xbc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d003      	beq.n	80028da <TIM_Base_SetConfig+0x62>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a18      	ldr	r2, [pc, #96]	; (8002938 <TIM_Base_SetConfig+0xc0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d108      	bne.n	80028ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a07      	ldr	r2, [pc, #28]	; (8002930 <TIM_Base_SetConfig+0xb8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d103      	bne.n	8002920 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	615a      	str	r2, [r3, #20]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40000400 	.word	0x40000400
 8002938:	40000800 	.word	0x40000800

0800293c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
 8002948:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	f023 0201 	bic.w	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4a1f      	ldr	r2, [pc, #124]	; (80029e4 <TIM_TI1_SetConfig+0xa8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00b      	beq.n	8002982 <TIM_TI1_SetConfig+0x46>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002970:	d007      	beq.n	8002982 <TIM_TI1_SetConfig+0x46>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4a1c      	ldr	r2, [pc, #112]	; (80029e8 <TIM_TI1_SetConfig+0xac>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d003      	beq.n	8002982 <TIM_TI1_SetConfig+0x46>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a1b      	ldr	r2, [pc, #108]	; (80029ec <TIM_TI1_SetConfig+0xb0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <TIM_TI1_SetConfig+0x4a>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <TIM_TI1_SetConfig+0x4c>
 8002986:	2300      	movs	r3, #0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f023 0303 	bic.w	r3, r3, #3
 8002992:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4313      	orrs	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	e003      	b.n	80029a6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f023 030a 	bic.w	r3, r3, #10
 80029c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f003 030a 	and.w	r3, r3, #10
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	621a      	str	r2, [r3, #32]
}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	40012c00 	.word	0x40012c00
 80029e8:	40000400 	.word	0x40000400
 80029ec:	40000800 	.word	0x40000800

080029f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f023 0201 	bic.w	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f023 030a 	bic.w	r3, r3, #10
 8002a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	621a      	str	r2, [r3, #32]
}
 8002a42:	bf00      	nop
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	f023 0210 	bic.w	r2, r3, #16
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	031b      	lsls	r3, r3, #12
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	621a      	str	r2, [r3, #32]
}
 8002aba:	bf00      	nop
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f023 0210 	bic.w	r2, r3, #16
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	031b      	lsls	r3, r3, #12
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	621a      	str	r2, [r3, #32]
}
 8002b18:	bf00      	nop
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b087      	sub	sp, #28
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	621a      	str	r2, [r3, #32]
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bd6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	031b      	lsls	r3, r3, #12
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	031b      	lsls	r3, r3, #12
 8002bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	621a      	str	r2, [r3, #32]
}
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f043 0307 	orr.w	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	609a      	str	r2, [r3, #8]
}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	021a      	lsls	r2, r3, #8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	609a      	str	r2, [r3, #8]
}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b087      	sub	sp, #28
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2201      	movs	r2, #1
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a1a      	ldr	r2, [r3, #32]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a1a      	ldr	r2, [r3, #32]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	621a      	str	r2, [r3, #32]
}
 8002cc0:	bf00      	nop
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e046      	b.n	8002d72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00e      	beq.n	8002d46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d30:	d009      	beq.n	8002d46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d004      	beq.n	8002d46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d10c      	bne.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800

08002d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e03f      	b.n	8002e3e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fe f860 	bl	8000e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2224      	movs	r2, #36	; 0x24
 8002ddc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fa97 	bl	8003324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b085      	sub	sp, #20
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	4613      	mov	r3, r2
 8002e52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d130      	bne.n	8002ec2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_UART_Transmit_IT+0x26>
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e029      	b.n	8002ec4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Transmit_IT+0x38>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e022      	b.n	8002ec4 <HAL_UART_Transmit_IT+0x7e>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2221      	movs	r2, #33	; 0x21
 8002ea2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ebc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e000      	b.n	8002ec4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
  }
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10d      	bne.n	8002f22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_UART_IRQHandler+0x52>
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f982 	bl	8003224 <UART_Receive_IT>
      return;
 8002f20:	e0d1      	b.n	80030c6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80b0 	beq.w	800308a <HAL_UART_IRQHandler+0x1ba>
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d105      	bne.n	8002f40 <HAL_UART_IRQHandler+0x70>
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80a5 	beq.w	800308a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_UART_IRQHandler+0x90>
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	f043 0201 	orr.w	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_UART_IRQHandler+0xb0>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f78:	f043 0202 	orr.w	r2, r3, #2
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_UART_IRQHandler+0xd0>
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	f043 0204 	orr.w	r2, r3, #4
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00f      	beq.n	8002fca <HAL_UART_IRQHandler+0xfa>
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d104      	bne.n	8002fbe <HAL_UART_IRQHandler+0xee>
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	f043 0208 	orr.w	r2, r3, #8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d078      	beq.n	80030c4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <HAL_UART_IRQHandler+0x11c>
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f91c 	bl	8003224 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <HAL_UART_IRQHandler+0x144>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d031      	beq.n	8003078 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f86d 	bl	80030f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d023      	beq.n	8003070 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003036:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003044:	4a21      	ldr	r2, [pc, #132]	; (80030cc <HAL_UART_IRQHandler+0x1fc>)
 8003046:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe f9a5 	bl	800139c <HAL_DMA_Abort_IT>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d016      	beq.n	8003086 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003062:	4610      	mov	r0, r2
 8003064:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003066:	e00e      	b.n	8003086 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f83a 	bl	80030e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800306e:	e00a      	b.n	8003086 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f836 	bl	80030e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003076:	e006      	b.n	8003086 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f832 	bl	80030e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003084:	e01e      	b.n	80030c4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003086:	bf00      	nop
    return;
 8003088:	e01c      	b.n	80030c4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_UART_IRQHandler+0x1d6>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f859 	bl	8003156 <UART_Transmit_IT>
    return;
 80030a4:	e00f      	b.n	80030c6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1f6>
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f89a 	bl	80031f4 <UART_EndTransmit_IT>
    return;
 80030c0:	bf00      	nop
 80030c2:	e000      	b.n	80030c6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80030c4:	bf00      	nop
  }
}
 80030c6:	3720      	adds	r7, #32
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	0800312f 	.word	0x0800312f

080030d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800310a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7ff ffca 	bl	80030e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b21      	cmp	r3, #33	; 0x21
 8003168:	d13e      	bne.n	80031e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003172:	d114      	bne.n	800319e <UART_Transmit_IT+0x48>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d110      	bne.n	800319e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003190:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	1c9a      	adds	r2, r3, #2
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	621a      	str	r2, [r3, #32]
 800319c:	e008      	b.n	80031b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	1c59      	adds	r1, r3, #1
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6211      	str	r1, [r2, #32]
 80031a8:	781a      	ldrb	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4619      	mov	r1, r3
 80031be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10f      	bne.n	80031e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e000      	b.n	80031ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
  }
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800320a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7fd fdb7 	bl	8000d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b22      	cmp	r3, #34	; 0x22
 8003236:	d170      	bne.n	800331a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003240:	d117      	bne.n	8003272 <UART_Receive_IT+0x4e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d113      	bne.n	8003272 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	b29b      	uxth	r3, r3
 800325c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003260:	b29a      	uxth	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	1c9a      	adds	r2, r3, #2
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	629a      	str	r2, [r3, #40]	; 0x28
 8003270:	e026      	b.n	80032c0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003278:	2300      	movs	r3, #0
 800327a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003284:	d007      	beq.n	8003296 <UART_Receive_IT+0x72>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <UART_Receive_IT+0x80>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e008      	b.n	80032b6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4619      	mov	r1, r3
 80032ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d120      	bne.n	8003316 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0220 	bic.w	r2, r2, #32
 80032e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff fedf 	bl	80030d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e002      	b.n	800331c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	e000      	b.n	800331c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800331a:	2302      	movs	r3, #2
  }
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800335e:	f023 030c 	bic.w	r3, r3, #12
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	430b      	orrs	r3, r1
 800336a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a2c      	ldr	r2, [pc, #176]	; (8003438 <UART_SetConfig+0x114>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d103      	bne.n	8003394 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800338c:	f7fe fdd8 	bl	8001f40 <HAL_RCC_GetPCLK2Freq>
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	e002      	b.n	800339a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003394:	f7fe fdc0 	bl	8001f18 <HAL_RCC_GetPCLK1Freq>
 8003398:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	009a      	lsls	r2, r3, #2
 80033a4:	441a      	add	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	4a22      	ldr	r2, [pc, #136]	; (800343c <UART_SetConfig+0x118>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	0119      	lsls	r1, r3, #4
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	009a      	lsls	r2, r3, #2
 80033c4:	441a      	add	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <UART_SetConfig+0x118>)
 80033d2:	fba3 0302 	umull	r0, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2064      	movs	r0, #100	; 0x64
 80033da:	fb00 f303 	mul.w	r3, r0, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	3332      	adds	r3, #50	; 0x32
 80033e4:	4a15      	ldr	r2, [pc, #84]	; (800343c <UART_SetConfig+0x118>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f0:	4419      	add	r1, r3
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	009a      	lsls	r2, r3, #2
 80033fc:	441a      	add	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	fbb2 f2f3 	udiv	r2, r2, r3
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <UART_SetConfig+0x118>)
 800340a:	fba3 0302 	umull	r0, r3, r3, r2
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	2064      	movs	r0, #100	; 0x64
 8003412:	fb00 f303 	mul.w	r3, r0, r3
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	3332      	adds	r3, #50	; 0x32
 800341c:	4a07      	ldr	r2, [pc, #28]	; (800343c <UART_SetConfig+0x118>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	f003 020f 	and.w	r2, r3, #15
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	440a      	add	r2, r1
 800342e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40013800 	.word	0x40013800
 800343c:	51eb851f 	.word	0x51eb851f

08003440 <__errno>:
 8003440:	4b01      	ldr	r3, [pc, #4]	; (8003448 <__errno+0x8>)
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	2000000c 	.word	0x2000000c

0800344c <__libc_init_array>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	2500      	movs	r5, #0
 8003450:	4e0c      	ldr	r6, [pc, #48]	; (8003484 <__libc_init_array+0x38>)
 8003452:	4c0d      	ldr	r4, [pc, #52]	; (8003488 <__libc_init_array+0x3c>)
 8003454:	1ba4      	subs	r4, r4, r6
 8003456:	10a4      	asrs	r4, r4, #2
 8003458:	42a5      	cmp	r5, r4
 800345a:	d109      	bne.n	8003470 <__libc_init_array+0x24>
 800345c:	f000 fc34 	bl	8003cc8 <_init>
 8003460:	2500      	movs	r5, #0
 8003462:	4e0a      	ldr	r6, [pc, #40]	; (800348c <__libc_init_array+0x40>)
 8003464:	4c0a      	ldr	r4, [pc, #40]	; (8003490 <__libc_init_array+0x44>)
 8003466:	1ba4      	subs	r4, r4, r6
 8003468:	10a4      	asrs	r4, r4, #2
 800346a:	42a5      	cmp	r5, r4
 800346c:	d105      	bne.n	800347a <__libc_init_array+0x2e>
 800346e:	bd70      	pop	{r4, r5, r6, pc}
 8003470:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003474:	4798      	blx	r3
 8003476:	3501      	adds	r5, #1
 8003478:	e7ee      	b.n	8003458 <__libc_init_array+0xc>
 800347a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800347e:	4798      	blx	r3
 8003480:	3501      	adds	r5, #1
 8003482:	e7f2      	b.n	800346a <__libc_init_array+0x1e>
 8003484:	08003d6c 	.word	0x08003d6c
 8003488:	08003d6c 	.word	0x08003d6c
 800348c:	08003d6c 	.word	0x08003d6c
 8003490:	08003d70 	.word	0x08003d70

08003494 <memset>:
 8003494:	4603      	mov	r3, r0
 8003496:	4402      	add	r2, r0
 8003498:	4293      	cmp	r3, r2
 800349a:	d100      	bne.n	800349e <memset+0xa>
 800349c:	4770      	bx	lr
 800349e:	f803 1b01 	strb.w	r1, [r3], #1
 80034a2:	e7f9      	b.n	8003498 <memset+0x4>

080034a4 <siprintf>:
 80034a4:	b40e      	push	{r1, r2, r3}
 80034a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034aa:	b500      	push	{lr}
 80034ac:	b09c      	sub	sp, #112	; 0x70
 80034ae:	ab1d      	add	r3, sp, #116	; 0x74
 80034b0:	9002      	str	r0, [sp, #8]
 80034b2:	9006      	str	r0, [sp, #24]
 80034b4:	9107      	str	r1, [sp, #28]
 80034b6:	9104      	str	r1, [sp, #16]
 80034b8:	4808      	ldr	r0, [pc, #32]	; (80034dc <siprintf+0x38>)
 80034ba:	4909      	ldr	r1, [pc, #36]	; (80034e0 <siprintf+0x3c>)
 80034bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80034c0:	9105      	str	r1, [sp, #20]
 80034c2:	6800      	ldr	r0, [r0, #0]
 80034c4:	a902      	add	r1, sp, #8
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	f000 f866 	bl	8003598 <_svfiprintf_r>
 80034cc:	2200      	movs	r2, #0
 80034ce:	9b02      	ldr	r3, [sp, #8]
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	b01c      	add	sp, #112	; 0x70
 80034d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034d8:	b003      	add	sp, #12
 80034da:	4770      	bx	lr
 80034dc:	2000000c 	.word	0x2000000c
 80034e0:	ffff0208 	.word	0xffff0208

080034e4 <__ssputs_r>:
 80034e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e8:	688e      	ldr	r6, [r1, #8]
 80034ea:	4682      	mov	sl, r0
 80034ec:	429e      	cmp	r6, r3
 80034ee:	460c      	mov	r4, r1
 80034f0:	4690      	mov	r8, r2
 80034f2:	4699      	mov	r9, r3
 80034f4:	d837      	bhi.n	8003566 <__ssputs_r+0x82>
 80034f6:	898a      	ldrh	r2, [r1, #12]
 80034f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034fc:	d031      	beq.n	8003562 <__ssputs_r+0x7e>
 80034fe:	2302      	movs	r3, #2
 8003500:	6825      	ldr	r5, [r4, #0]
 8003502:	6909      	ldr	r1, [r1, #16]
 8003504:	1a6f      	subs	r7, r5, r1
 8003506:	6965      	ldr	r5, [r4, #20]
 8003508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800350c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003510:	f109 0301 	add.w	r3, r9, #1
 8003514:	443b      	add	r3, r7
 8003516:	429d      	cmp	r5, r3
 8003518:	bf38      	it	cc
 800351a:	461d      	movcc	r5, r3
 800351c:	0553      	lsls	r3, r2, #21
 800351e:	d530      	bpl.n	8003582 <__ssputs_r+0x9e>
 8003520:	4629      	mov	r1, r5
 8003522:	f000 fb37 	bl	8003b94 <_malloc_r>
 8003526:	4606      	mov	r6, r0
 8003528:	b950      	cbnz	r0, 8003540 <__ssputs_r+0x5c>
 800352a:	230c      	movs	r3, #12
 800352c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003530:	f8ca 3000 	str.w	r3, [sl]
 8003534:	89a3      	ldrh	r3, [r4, #12]
 8003536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800353a:	81a3      	strh	r3, [r4, #12]
 800353c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003540:	463a      	mov	r2, r7
 8003542:	6921      	ldr	r1, [r4, #16]
 8003544:	f000 fab6 	bl	8003ab4 <memcpy>
 8003548:	89a3      	ldrh	r3, [r4, #12]
 800354a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800354e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003552:	81a3      	strh	r3, [r4, #12]
 8003554:	6126      	str	r6, [r4, #16]
 8003556:	443e      	add	r6, r7
 8003558:	6026      	str	r6, [r4, #0]
 800355a:	464e      	mov	r6, r9
 800355c:	6165      	str	r5, [r4, #20]
 800355e:	1bed      	subs	r5, r5, r7
 8003560:	60a5      	str	r5, [r4, #8]
 8003562:	454e      	cmp	r6, r9
 8003564:	d900      	bls.n	8003568 <__ssputs_r+0x84>
 8003566:	464e      	mov	r6, r9
 8003568:	4632      	mov	r2, r6
 800356a:	4641      	mov	r1, r8
 800356c:	6820      	ldr	r0, [r4, #0]
 800356e:	f000 faac 	bl	8003aca <memmove>
 8003572:	68a3      	ldr	r3, [r4, #8]
 8003574:	2000      	movs	r0, #0
 8003576:	1b9b      	subs	r3, r3, r6
 8003578:	60a3      	str	r3, [r4, #8]
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	441e      	add	r6, r3
 800357e:	6026      	str	r6, [r4, #0]
 8003580:	e7dc      	b.n	800353c <__ssputs_r+0x58>
 8003582:	462a      	mov	r2, r5
 8003584:	f000 fb60 	bl	8003c48 <_realloc_r>
 8003588:	4606      	mov	r6, r0
 800358a:	2800      	cmp	r0, #0
 800358c:	d1e2      	bne.n	8003554 <__ssputs_r+0x70>
 800358e:	6921      	ldr	r1, [r4, #16]
 8003590:	4650      	mov	r0, sl
 8003592:	f000 fab3 	bl	8003afc <_free_r>
 8003596:	e7c8      	b.n	800352a <__ssputs_r+0x46>

08003598 <_svfiprintf_r>:
 8003598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800359c:	461d      	mov	r5, r3
 800359e:	898b      	ldrh	r3, [r1, #12]
 80035a0:	b09d      	sub	sp, #116	; 0x74
 80035a2:	061f      	lsls	r7, r3, #24
 80035a4:	4680      	mov	r8, r0
 80035a6:	460c      	mov	r4, r1
 80035a8:	4616      	mov	r6, r2
 80035aa:	d50f      	bpl.n	80035cc <_svfiprintf_r+0x34>
 80035ac:	690b      	ldr	r3, [r1, #16]
 80035ae:	b96b      	cbnz	r3, 80035cc <_svfiprintf_r+0x34>
 80035b0:	2140      	movs	r1, #64	; 0x40
 80035b2:	f000 faef 	bl	8003b94 <_malloc_r>
 80035b6:	6020      	str	r0, [r4, #0]
 80035b8:	6120      	str	r0, [r4, #16]
 80035ba:	b928      	cbnz	r0, 80035c8 <_svfiprintf_r+0x30>
 80035bc:	230c      	movs	r3, #12
 80035be:	f8c8 3000 	str.w	r3, [r8]
 80035c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035c6:	e0c8      	b.n	800375a <_svfiprintf_r+0x1c2>
 80035c8:	2340      	movs	r3, #64	; 0x40
 80035ca:	6163      	str	r3, [r4, #20]
 80035cc:	2300      	movs	r3, #0
 80035ce:	9309      	str	r3, [sp, #36]	; 0x24
 80035d0:	2320      	movs	r3, #32
 80035d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035d6:	2330      	movs	r3, #48	; 0x30
 80035d8:	f04f 0b01 	mov.w	fp, #1
 80035dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035e0:	9503      	str	r5, [sp, #12]
 80035e2:	4637      	mov	r7, r6
 80035e4:	463d      	mov	r5, r7
 80035e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80035ea:	b10b      	cbz	r3, 80035f0 <_svfiprintf_r+0x58>
 80035ec:	2b25      	cmp	r3, #37	; 0x25
 80035ee:	d13e      	bne.n	800366e <_svfiprintf_r+0xd6>
 80035f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80035f4:	d00b      	beq.n	800360e <_svfiprintf_r+0x76>
 80035f6:	4653      	mov	r3, sl
 80035f8:	4632      	mov	r2, r6
 80035fa:	4621      	mov	r1, r4
 80035fc:	4640      	mov	r0, r8
 80035fe:	f7ff ff71 	bl	80034e4 <__ssputs_r>
 8003602:	3001      	adds	r0, #1
 8003604:	f000 80a4 	beq.w	8003750 <_svfiprintf_r+0x1b8>
 8003608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800360a:	4453      	add	r3, sl
 800360c:	9309      	str	r3, [sp, #36]	; 0x24
 800360e:	783b      	ldrb	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 809d 	beq.w	8003750 <_svfiprintf_r+0x1b8>
 8003616:	2300      	movs	r3, #0
 8003618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800361c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003620:	9304      	str	r3, [sp, #16]
 8003622:	9307      	str	r3, [sp, #28]
 8003624:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003628:	931a      	str	r3, [sp, #104]	; 0x68
 800362a:	462f      	mov	r7, r5
 800362c:	2205      	movs	r2, #5
 800362e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003632:	4850      	ldr	r0, [pc, #320]	; (8003774 <_svfiprintf_r+0x1dc>)
 8003634:	f000 fa30 	bl	8003a98 <memchr>
 8003638:	9b04      	ldr	r3, [sp, #16]
 800363a:	b9d0      	cbnz	r0, 8003672 <_svfiprintf_r+0xda>
 800363c:	06d9      	lsls	r1, r3, #27
 800363e:	bf44      	itt	mi
 8003640:	2220      	movmi	r2, #32
 8003642:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003646:	071a      	lsls	r2, r3, #28
 8003648:	bf44      	itt	mi
 800364a:	222b      	movmi	r2, #43	; 0x2b
 800364c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003650:	782a      	ldrb	r2, [r5, #0]
 8003652:	2a2a      	cmp	r2, #42	; 0x2a
 8003654:	d015      	beq.n	8003682 <_svfiprintf_r+0xea>
 8003656:	462f      	mov	r7, r5
 8003658:	2000      	movs	r0, #0
 800365a:	250a      	movs	r5, #10
 800365c:	9a07      	ldr	r2, [sp, #28]
 800365e:	4639      	mov	r1, r7
 8003660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003664:	3b30      	subs	r3, #48	; 0x30
 8003666:	2b09      	cmp	r3, #9
 8003668:	d94d      	bls.n	8003706 <_svfiprintf_r+0x16e>
 800366a:	b1b8      	cbz	r0, 800369c <_svfiprintf_r+0x104>
 800366c:	e00f      	b.n	800368e <_svfiprintf_r+0xf6>
 800366e:	462f      	mov	r7, r5
 8003670:	e7b8      	b.n	80035e4 <_svfiprintf_r+0x4c>
 8003672:	4a40      	ldr	r2, [pc, #256]	; (8003774 <_svfiprintf_r+0x1dc>)
 8003674:	463d      	mov	r5, r7
 8003676:	1a80      	subs	r0, r0, r2
 8003678:	fa0b f000 	lsl.w	r0, fp, r0
 800367c:	4318      	orrs	r0, r3
 800367e:	9004      	str	r0, [sp, #16]
 8003680:	e7d3      	b.n	800362a <_svfiprintf_r+0x92>
 8003682:	9a03      	ldr	r2, [sp, #12]
 8003684:	1d11      	adds	r1, r2, #4
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	9103      	str	r1, [sp, #12]
 800368a:	2a00      	cmp	r2, #0
 800368c:	db01      	blt.n	8003692 <_svfiprintf_r+0xfa>
 800368e:	9207      	str	r2, [sp, #28]
 8003690:	e004      	b.n	800369c <_svfiprintf_r+0x104>
 8003692:	4252      	negs	r2, r2
 8003694:	f043 0302 	orr.w	r3, r3, #2
 8003698:	9207      	str	r2, [sp, #28]
 800369a:	9304      	str	r3, [sp, #16]
 800369c:	783b      	ldrb	r3, [r7, #0]
 800369e:	2b2e      	cmp	r3, #46	; 0x2e
 80036a0:	d10c      	bne.n	80036bc <_svfiprintf_r+0x124>
 80036a2:	787b      	ldrb	r3, [r7, #1]
 80036a4:	2b2a      	cmp	r3, #42	; 0x2a
 80036a6:	d133      	bne.n	8003710 <_svfiprintf_r+0x178>
 80036a8:	9b03      	ldr	r3, [sp, #12]
 80036aa:	3702      	adds	r7, #2
 80036ac:	1d1a      	adds	r2, r3, #4
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	9203      	str	r2, [sp, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bfb8      	it	lt
 80036b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80036ba:	9305      	str	r3, [sp, #20]
 80036bc:	4d2e      	ldr	r5, [pc, #184]	; (8003778 <_svfiprintf_r+0x1e0>)
 80036be:	2203      	movs	r2, #3
 80036c0:	7839      	ldrb	r1, [r7, #0]
 80036c2:	4628      	mov	r0, r5
 80036c4:	f000 f9e8 	bl	8003a98 <memchr>
 80036c8:	b138      	cbz	r0, 80036da <_svfiprintf_r+0x142>
 80036ca:	2340      	movs	r3, #64	; 0x40
 80036cc:	1b40      	subs	r0, r0, r5
 80036ce:	fa03 f000 	lsl.w	r0, r3, r0
 80036d2:	9b04      	ldr	r3, [sp, #16]
 80036d4:	3701      	adds	r7, #1
 80036d6:	4303      	orrs	r3, r0
 80036d8:	9304      	str	r3, [sp, #16]
 80036da:	7839      	ldrb	r1, [r7, #0]
 80036dc:	2206      	movs	r2, #6
 80036de:	4827      	ldr	r0, [pc, #156]	; (800377c <_svfiprintf_r+0x1e4>)
 80036e0:	1c7e      	adds	r6, r7, #1
 80036e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036e6:	f000 f9d7 	bl	8003a98 <memchr>
 80036ea:	2800      	cmp	r0, #0
 80036ec:	d038      	beq.n	8003760 <_svfiprintf_r+0x1c8>
 80036ee:	4b24      	ldr	r3, [pc, #144]	; (8003780 <_svfiprintf_r+0x1e8>)
 80036f0:	bb13      	cbnz	r3, 8003738 <_svfiprintf_r+0x1a0>
 80036f2:	9b03      	ldr	r3, [sp, #12]
 80036f4:	3307      	adds	r3, #7
 80036f6:	f023 0307 	bic.w	r3, r3, #7
 80036fa:	3308      	adds	r3, #8
 80036fc:	9303      	str	r3, [sp, #12]
 80036fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003700:	444b      	add	r3, r9
 8003702:	9309      	str	r3, [sp, #36]	; 0x24
 8003704:	e76d      	b.n	80035e2 <_svfiprintf_r+0x4a>
 8003706:	fb05 3202 	mla	r2, r5, r2, r3
 800370a:	2001      	movs	r0, #1
 800370c:	460f      	mov	r7, r1
 800370e:	e7a6      	b.n	800365e <_svfiprintf_r+0xc6>
 8003710:	2300      	movs	r3, #0
 8003712:	250a      	movs	r5, #10
 8003714:	4619      	mov	r1, r3
 8003716:	3701      	adds	r7, #1
 8003718:	9305      	str	r3, [sp, #20]
 800371a:	4638      	mov	r0, r7
 800371c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003720:	3a30      	subs	r2, #48	; 0x30
 8003722:	2a09      	cmp	r2, #9
 8003724:	d903      	bls.n	800372e <_svfiprintf_r+0x196>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0c8      	beq.n	80036bc <_svfiprintf_r+0x124>
 800372a:	9105      	str	r1, [sp, #20]
 800372c:	e7c6      	b.n	80036bc <_svfiprintf_r+0x124>
 800372e:	fb05 2101 	mla	r1, r5, r1, r2
 8003732:	2301      	movs	r3, #1
 8003734:	4607      	mov	r7, r0
 8003736:	e7f0      	b.n	800371a <_svfiprintf_r+0x182>
 8003738:	ab03      	add	r3, sp, #12
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4622      	mov	r2, r4
 800373e:	4b11      	ldr	r3, [pc, #68]	; (8003784 <_svfiprintf_r+0x1ec>)
 8003740:	a904      	add	r1, sp, #16
 8003742:	4640      	mov	r0, r8
 8003744:	f3af 8000 	nop.w
 8003748:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800374c:	4681      	mov	r9, r0
 800374e:	d1d6      	bne.n	80036fe <_svfiprintf_r+0x166>
 8003750:	89a3      	ldrh	r3, [r4, #12]
 8003752:	065b      	lsls	r3, r3, #25
 8003754:	f53f af35 	bmi.w	80035c2 <_svfiprintf_r+0x2a>
 8003758:	9809      	ldr	r0, [sp, #36]	; 0x24
 800375a:	b01d      	add	sp, #116	; 0x74
 800375c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003760:	ab03      	add	r3, sp, #12
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	4622      	mov	r2, r4
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <_svfiprintf_r+0x1ec>)
 8003768:	a904      	add	r1, sp, #16
 800376a:	4640      	mov	r0, r8
 800376c:	f000 f882 	bl	8003874 <_printf_i>
 8003770:	e7ea      	b.n	8003748 <_svfiprintf_r+0x1b0>
 8003772:	bf00      	nop
 8003774:	08003d38 	.word	0x08003d38
 8003778:	08003d3e 	.word	0x08003d3e
 800377c:	08003d42 	.word	0x08003d42
 8003780:	00000000 	.word	0x00000000
 8003784:	080034e5 	.word	0x080034e5

08003788 <_printf_common>:
 8003788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800378c:	4691      	mov	r9, r2
 800378e:	461f      	mov	r7, r3
 8003790:	688a      	ldr	r2, [r1, #8]
 8003792:	690b      	ldr	r3, [r1, #16]
 8003794:	4606      	mov	r6, r0
 8003796:	4293      	cmp	r3, r2
 8003798:	bfb8      	it	lt
 800379a:	4613      	movlt	r3, r2
 800379c:	f8c9 3000 	str.w	r3, [r9]
 80037a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037a4:	460c      	mov	r4, r1
 80037a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037aa:	b112      	cbz	r2, 80037b2 <_printf_common+0x2a>
 80037ac:	3301      	adds	r3, #1
 80037ae:	f8c9 3000 	str.w	r3, [r9]
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	0699      	lsls	r1, r3, #26
 80037b6:	bf42      	ittt	mi
 80037b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037bc:	3302      	addmi	r3, #2
 80037be:	f8c9 3000 	strmi.w	r3, [r9]
 80037c2:	6825      	ldr	r5, [r4, #0]
 80037c4:	f015 0506 	ands.w	r5, r5, #6
 80037c8:	d107      	bne.n	80037da <_printf_common+0x52>
 80037ca:	f104 0a19 	add.w	sl, r4, #25
 80037ce:	68e3      	ldr	r3, [r4, #12]
 80037d0:	f8d9 2000 	ldr.w	r2, [r9]
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	42ab      	cmp	r3, r5
 80037d8:	dc29      	bgt.n	800382e <_printf_common+0xa6>
 80037da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80037de:	6822      	ldr	r2, [r4, #0]
 80037e0:	3300      	adds	r3, #0
 80037e2:	bf18      	it	ne
 80037e4:	2301      	movne	r3, #1
 80037e6:	0692      	lsls	r2, r2, #26
 80037e8:	d42e      	bmi.n	8003848 <_printf_common+0xc0>
 80037ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037ee:	4639      	mov	r1, r7
 80037f0:	4630      	mov	r0, r6
 80037f2:	47c0      	blx	r8
 80037f4:	3001      	adds	r0, #1
 80037f6:	d021      	beq.n	800383c <_printf_common+0xb4>
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	68e5      	ldr	r5, [r4, #12]
 80037fc:	f003 0306 	and.w	r3, r3, #6
 8003800:	2b04      	cmp	r3, #4
 8003802:	bf18      	it	ne
 8003804:	2500      	movne	r5, #0
 8003806:	f8d9 2000 	ldr.w	r2, [r9]
 800380a:	f04f 0900 	mov.w	r9, #0
 800380e:	bf08      	it	eq
 8003810:	1aad      	subeq	r5, r5, r2
 8003812:	68a3      	ldr	r3, [r4, #8]
 8003814:	6922      	ldr	r2, [r4, #16]
 8003816:	bf08      	it	eq
 8003818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800381c:	4293      	cmp	r3, r2
 800381e:	bfc4      	itt	gt
 8003820:	1a9b      	subgt	r3, r3, r2
 8003822:	18ed      	addgt	r5, r5, r3
 8003824:	341a      	adds	r4, #26
 8003826:	454d      	cmp	r5, r9
 8003828:	d11a      	bne.n	8003860 <_printf_common+0xd8>
 800382a:	2000      	movs	r0, #0
 800382c:	e008      	b.n	8003840 <_printf_common+0xb8>
 800382e:	2301      	movs	r3, #1
 8003830:	4652      	mov	r2, sl
 8003832:	4639      	mov	r1, r7
 8003834:	4630      	mov	r0, r6
 8003836:	47c0      	blx	r8
 8003838:	3001      	adds	r0, #1
 800383a:	d103      	bne.n	8003844 <_printf_common+0xbc>
 800383c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003844:	3501      	adds	r5, #1
 8003846:	e7c2      	b.n	80037ce <_printf_common+0x46>
 8003848:	2030      	movs	r0, #48	; 0x30
 800384a:	18e1      	adds	r1, r4, r3
 800384c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003856:	4422      	add	r2, r4
 8003858:	3302      	adds	r3, #2
 800385a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800385e:	e7c4      	b.n	80037ea <_printf_common+0x62>
 8003860:	2301      	movs	r3, #1
 8003862:	4622      	mov	r2, r4
 8003864:	4639      	mov	r1, r7
 8003866:	4630      	mov	r0, r6
 8003868:	47c0      	blx	r8
 800386a:	3001      	adds	r0, #1
 800386c:	d0e6      	beq.n	800383c <_printf_common+0xb4>
 800386e:	f109 0901 	add.w	r9, r9, #1
 8003872:	e7d8      	b.n	8003826 <_printf_common+0x9e>

08003874 <_printf_i>:
 8003874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003878:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800387c:	460c      	mov	r4, r1
 800387e:	7e09      	ldrb	r1, [r1, #24]
 8003880:	b085      	sub	sp, #20
 8003882:	296e      	cmp	r1, #110	; 0x6e
 8003884:	4617      	mov	r7, r2
 8003886:	4606      	mov	r6, r0
 8003888:	4698      	mov	r8, r3
 800388a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800388c:	f000 80b3 	beq.w	80039f6 <_printf_i+0x182>
 8003890:	d822      	bhi.n	80038d8 <_printf_i+0x64>
 8003892:	2963      	cmp	r1, #99	; 0x63
 8003894:	d036      	beq.n	8003904 <_printf_i+0x90>
 8003896:	d80a      	bhi.n	80038ae <_printf_i+0x3a>
 8003898:	2900      	cmp	r1, #0
 800389a:	f000 80b9 	beq.w	8003a10 <_printf_i+0x19c>
 800389e:	2958      	cmp	r1, #88	; 0x58
 80038a0:	f000 8083 	beq.w	80039aa <_printf_i+0x136>
 80038a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80038ac:	e032      	b.n	8003914 <_printf_i+0xa0>
 80038ae:	2964      	cmp	r1, #100	; 0x64
 80038b0:	d001      	beq.n	80038b6 <_printf_i+0x42>
 80038b2:	2969      	cmp	r1, #105	; 0x69
 80038b4:	d1f6      	bne.n	80038a4 <_printf_i+0x30>
 80038b6:	6820      	ldr	r0, [r4, #0]
 80038b8:	6813      	ldr	r3, [r2, #0]
 80038ba:	0605      	lsls	r5, r0, #24
 80038bc:	f103 0104 	add.w	r1, r3, #4
 80038c0:	d52a      	bpl.n	8003918 <_printf_i+0xa4>
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6011      	str	r1, [r2, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	da03      	bge.n	80038d2 <_printf_i+0x5e>
 80038ca:	222d      	movs	r2, #45	; 0x2d
 80038cc:	425b      	negs	r3, r3
 80038ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80038d2:	486f      	ldr	r0, [pc, #444]	; (8003a90 <_printf_i+0x21c>)
 80038d4:	220a      	movs	r2, #10
 80038d6:	e039      	b.n	800394c <_printf_i+0xd8>
 80038d8:	2973      	cmp	r1, #115	; 0x73
 80038da:	f000 809d 	beq.w	8003a18 <_printf_i+0x1a4>
 80038de:	d808      	bhi.n	80038f2 <_printf_i+0x7e>
 80038e0:	296f      	cmp	r1, #111	; 0x6f
 80038e2:	d020      	beq.n	8003926 <_printf_i+0xb2>
 80038e4:	2970      	cmp	r1, #112	; 0x70
 80038e6:	d1dd      	bne.n	80038a4 <_printf_i+0x30>
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	f043 0320 	orr.w	r3, r3, #32
 80038ee:	6023      	str	r3, [r4, #0]
 80038f0:	e003      	b.n	80038fa <_printf_i+0x86>
 80038f2:	2975      	cmp	r1, #117	; 0x75
 80038f4:	d017      	beq.n	8003926 <_printf_i+0xb2>
 80038f6:	2978      	cmp	r1, #120	; 0x78
 80038f8:	d1d4      	bne.n	80038a4 <_printf_i+0x30>
 80038fa:	2378      	movs	r3, #120	; 0x78
 80038fc:	4865      	ldr	r0, [pc, #404]	; (8003a94 <_printf_i+0x220>)
 80038fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003902:	e055      	b.n	80039b0 <_printf_i+0x13c>
 8003904:	6813      	ldr	r3, [r2, #0]
 8003906:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800390a:	1d19      	adds	r1, r3, #4
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6011      	str	r1, [r2, #0]
 8003910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003914:	2301      	movs	r3, #1
 8003916:	e08c      	b.n	8003a32 <_printf_i+0x1be>
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800391e:	6011      	str	r1, [r2, #0]
 8003920:	bf18      	it	ne
 8003922:	b21b      	sxthne	r3, r3
 8003924:	e7cf      	b.n	80038c6 <_printf_i+0x52>
 8003926:	6813      	ldr	r3, [r2, #0]
 8003928:	6825      	ldr	r5, [r4, #0]
 800392a:	1d18      	adds	r0, r3, #4
 800392c:	6010      	str	r0, [r2, #0]
 800392e:	0628      	lsls	r0, r5, #24
 8003930:	d501      	bpl.n	8003936 <_printf_i+0xc2>
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	e002      	b.n	800393c <_printf_i+0xc8>
 8003936:	0668      	lsls	r0, r5, #25
 8003938:	d5fb      	bpl.n	8003932 <_printf_i+0xbe>
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	296f      	cmp	r1, #111	; 0x6f
 800393e:	bf14      	ite	ne
 8003940:	220a      	movne	r2, #10
 8003942:	2208      	moveq	r2, #8
 8003944:	4852      	ldr	r0, [pc, #328]	; (8003a90 <_printf_i+0x21c>)
 8003946:	2100      	movs	r1, #0
 8003948:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800394c:	6865      	ldr	r5, [r4, #4]
 800394e:	2d00      	cmp	r5, #0
 8003950:	60a5      	str	r5, [r4, #8]
 8003952:	f2c0 8095 	blt.w	8003a80 <_printf_i+0x20c>
 8003956:	6821      	ldr	r1, [r4, #0]
 8003958:	f021 0104 	bic.w	r1, r1, #4
 800395c:	6021      	str	r1, [r4, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d13d      	bne.n	80039de <_printf_i+0x16a>
 8003962:	2d00      	cmp	r5, #0
 8003964:	f040 808e 	bne.w	8003a84 <_printf_i+0x210>
 8003968:	4665      	mov	r5, ip
 800396a:	2a08      	cmp	r2, #8
 800396c:	d10b      	bne.n	8003986 <_printf_i+0x112>
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	07db      	lsls	r3, r3, #31
 8003972:	d508      	bpl.n	8003986 <_printf_i+0x112>
 8003974:	6923      	ldr	r3, [r4, #16]
 8003976:	6862      	ldr	r2, [r4, #4]
 8003978:	429a      	cmp	r2, r3
 800397a:	bfde      	ittt	le
 800397c:	2330      	movle	r3, #48	; 0x30
 800397e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003982:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003986:	ebac 0305 	sub.w	r3, ip, r5
 800398a:	6123      	str	r3, [r4, #16]
 800398c:	f8cd 8000 	str.w	r8, [sp]
 8003990:	463b      	mov	r3, r7
 8003992:	aa03      	add	r2, sp, #12
 8003994:	4621      	mov	r1, r4
 8003996:	4630      	mov	r0, r6
 8003998:	f7ff fef6 	bl	8003788 <_printf_common>
 800399c:	3001      	adds	r0, #1
 800399e:	d14d      	bne.n	8003a3c <_printf_i+0x1c8>
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039a4:	b005      	add	sp, #20
 80039a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039aa:	4839      	ldr	r0, [pc, #228]	; (8003a90 <_printf_i+0x21c>)
 80039ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80039b0:	6813      	ldr	r3, [r2, #0]
 80039b2:	6821      	ldr	r1, [r4, #0]
 80039b4:	1d1d      	adds	r5, r3, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6015      	str	r5, [r2, #0]
 80039ba:	060a      	lsls	r2, r1, #24
 80039bc:	d50b      	bpl.n	80039d6 <_printf_i+0x162>
 80039be:	07ca      	lsls	r2, r1, #31
 80039c0:	bf44      	itt	mi
 80039c2:	f041 0120 	orrmi.w	r1, r1, #32
 80039c6:	6021      	strmi	r1, [r4, #0]
 80039c8:	b91b      	cbnz	r3, 80039d2 <_printf_i+0x15e>
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	f022 0220 	bic.w	r2, r2, #32
 80039d0:	6022      	str	r2, [r4, #0]
 80039d2:	2210      	movs	r2, #16
 80039d4:	e7b7      	b.n	8003946 <_printf_i+0xd2>
 80039d6:	064d      	lsls	r5, r1, #25
 80039d8:	bf48      	it	mi
 80039da:	b29b      	uxthmi	r3, r3
 80039dc:	e7ef      	b.n	80039be <_printf_i+0x14a>
 80039de:	4665      	mov	r5, ip
 80039e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80039e4:	fb02 3311 	mls	r3, r2, r1, r3
 80039e8:	5cc3      	ldrb	r3, [r0, r3]
 80039ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80039ee:	460b      	mov	r3, r1
 80039f0:	2900      	cmp	r1, #0
 80039f2:	d1f5      	bne.n	80039e0 <_printf_i+0x16c>
 80039f4:	e7b9      	b.n	800396a <_printf_i+0xf6>
 80039f6:	6813      	ldr	r3, [r2, #0]
 80039f8:	6825      	ldr	r5, [r4, #0]
 80039fa:	1d18      	adds	r0, r3, #4
 80039fc:	6961      	ldr	r1, [r4, #20]
 80039fe:	6010      	str	r0, [r2, #0]
 8003a00:	0628      	lsls	r0, r5, #24
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	d501      	bpl.n	8003a0a <_printf_i+0x196>
 8003a06:	6019      	str	r1, [r3, #0]
 8003a08:	e002      	b.n	8003a10 <_printf_i+0x19c>
 8003a0a:	066a      	lsls	r2, r5, #25
 8003a0c:	d5fb      	bpl.n	8003a06 <_printf_i+0x192>
 8003a0e:	8019      	strh	r1, [r3, #0]
 8003a10:	2300      	movs	r3, #0
 8003a12:	4665      	mov	r5, ip
 8003a14:	6123      	str	r3, [r4, #16]
 8003a16:	e7b9      	b.n	800398c <_printf_i+0x118>
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	1d19      	adds	r1, r3, #4
 8003a1c:	6011      	str	r1, [r2, #0]
 8003a1e:	681d      	ldr	r5, [r3, #0]
 8003a20:	6862      	ldr	r2, [r4, #4]
 8003a22:	2100      	movs	r1, #0
 8003a24:	4628      	mov	r0, r5
 8003a26:	f000 f837 	bl	8003a98 <memchr>
 8003a2a:	b108      	cbz	r0, 8003a30 <_printf_i+0x1bc>
 8003a2c:	1b40      	subs	r0, r0, r5
 8003a2e:	6060      	str	r0, [r4, #4]
 8003a30:	6863      	ldr	r3, [r4, #4]
 8003a32:	6123      	str	r3, [r4, #16]
 8003a34:	2300      	movs	r3, #0
 8003a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a3a:	e7a7      	b.n	800398c <_printf_i+0x118>
 8003a3c:	6923      	ldr	r3, [r4, #16]
 8003a3e:	462a      	mov	r2, r5
 8003a40:	4639      	mov	r1, r7
 8003a42:	4630      	mov	r0, r6
 8003a44:	47c0      	blx	r8
 8003a46:	3001      	adds	r0, #1
 8003a48:	d0aa      	beq.n	80039a0 <_printf_i+0x12c>
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	079b      	lsls	r3, r3, #30
 8003a4e:	d413      	bmi.n	8003a78 <_printf_i+0x204>
 8003a50:	68e0      	ldr	r0, [r4, #12]
 8003a52:	9b03      	ldr	r3, [sp, #12]
 8003a54:	4298      	cmp	r0, r3
 8003a56:	bfb8      	it	lt
 8003a58:	4618      	movlt	r0, r3
 8003a5a:	e7a3      	b.n	80039a4 <_printf_i+0x130>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	464a      	mov	r2, r9
 8003a60:	4639      	mov	r1, r7
 8003a62:	4630      	mov	r0, r6
 8003a64:	47c0      	blx	r8
 8003a66:	3001      	adds	r0, #1
 8003a68:	d09a      	beq.n	80039a0 <_printf_i+0x12c>
 8003a6a:	3501      	adds	r5, #1
 8003a6c:	68e3      	ldr	r3, [r4, #12]
 8003a6e:	9a03      	ldr	r2, [sp, #12]
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	42ab      	cmp	r3, r5
 8003a74:	dcf2      	bgt.n	8003a5c <_printf_i+0x1e8>
 8003a76:	e7eb      	b.n	8003a50 <_printf_i+0x1dc>
 8003a78:	2500      	movs	r5, #0
 8003a7a:	f104 0919 	add.w	r9, r4, #25
 8003a7e:	e7f5      	b.n	8003a6c <_printf_i+0x1f8>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1ac      	bne.n	80039de <_printf_i+0x16a>
 8003a84:	7803      	ldrb	r3, [r0, #0]
 8003a86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a8e:	e76c      	b.n	800396a <_printf_i+0xf6>
 8003a90:	08003d49 	.word	0x08003d49
 8003a94:	08003d5a 	.word	0x08003d5a

08003a98 <memchr>:
 8003a98:	b510      	push	{r4, lr}
 8003a9a:	b2c9      	uxtb	r1, r1
 8003a9c:	4402      	add	r2, r0
 8003a9e:	4290      	cmp	r0, r2
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	d101      	bne.n	8003aa8 <memchr+0x10>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e003      	b.n	8003ab0 <memchr+0x18>
 8003aa8:	781c      	ldrb	r4, [r3, #0]
 8003aaa:	3001      	adds	r0, #1
 8003aac:	428c      	cmp	r4, r1
 8003aae:	d1f6      	bne.n	8003a9e <memchr+0x6>
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd10      	pop	{r4, pc}

08003ab4 <memcpy>:
 8003ab4:	b510      	push	{r4, lr}
 8003ab6:	1e43      	subs	r3, r0, #1
 8003ab8:	440a      	add	r2, r1
 8003aba:	4291      	cmp	r1, r2
 8003abc:	d100      	bne.n	8003ac0 <memcpy+0xc>
 8003abe:	bd10      	pop	{r4, pc}
 8003ac0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ac8:	e7f7      	b.n	8003aba <memcpy+0x6>

08003aca <memmove>:
 8003aca:	4288      	cmp	r0, r1
 8003acc:	b510      	push	{r4, lr}
 8003ace:	eb01 0302 	add.w	r3, r1, r2
 8003ad2:	d807      	bhi.n	8003ae4 <memmove+0x1a>
 8003ad4:	1e42      	subs	r2, r0, #1
 8003ad6:	4299      	cmp	r1, r3
 8003ad8:	d00a      	beq.n	8003af0 <memmove+0x26>
 8003ada:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ade:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ae2:	e7f8      	b.n	8003ad6 <memmove+0xc>
 8003ae4:	4283      	cmp	r3, r0
 8003ae6:	d9f5      	bls.n	8003ad4 <memmove+0xa>
 8003ae8:	1881      	adds	r1, r0, r2
 8003aea:	1ad2      	subs	r2, r2, r3
 8003aec:	42d3      	cmn	r3, r2
 8003aee:	d100      	bne.n	8003af2 <memmove+0x28>
 8003af0:	bd10      	pop	{r4, pc}
 8003af2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003af6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003afa:	e7f7      	b.n	8003aec <memmove+0x22>

08003afc <_free_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	4605      	mov	r5, r0
 8003b00:	2900      	cmp	r1, #0
 8003b02:	d043      	beq.n	8003b8c <_free_r+0x90>
 8003b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b08:	1f0c      	subs	r4, r1, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	bfb8      	it	lt
 8003b0e:	18e4      	addlt	r4, r4, r3
 8003b10:	f000 f8d0 	bl	8003cb4 <__malloc_lock>
 8003b14:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <_free_r+0x94>)
 8003b16:	6813      	ldr	r3, [r2, #0]
 8003b18:	4610      	mov	r0, r2
 8003b1a:	b933      	cbnz	r3, 8003b2a <_free_r+0x2e>
 8003b1c:	6063      	str	r3, [r4, #4]
 8003b1e:	6014      	str	r4, [r2, #0]
 8003b20:	4628      	mov	r0, r5
 8003b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b26:	f000 b8c6 	b.w	8003cb6 <__malloc_unlock>
 8003b2a:	42a3      	cmp	r3, r4
 8003b2c:	d90b      	bls.n	8003b46 <_free_r+0x4a>
 8003b2e:	6821      	ldr	r1, [r4, #0]
 8003b30:	1862      	adds	r2, r4, r1
 8003b32:	4293      	cmp	r3, r2
 8003b34:	bf01      	itttt	eq
 8003b36:	681a      	ldreq	r2, [r3, #0]
 8003b38:	685b      	ldreq	r3, [r3, #4]
 8003b3a:	1852      	addeq	r2, r2, r1
 8003b3c:	6022      	streq	r2, [r4, #0]
 8003b3e:	6063      	str	r3, [r4, #4]
 8003b40:	6004      	str	r4, [r0, #0]
 8003b42:	e7ed      	b.n	8003b20 <_free_r+0x24>
 8003b44:	4613      	mov	r3, r2
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	b10a      	cbz	r2, 8003b4e <_free_r+0x52>
 8003b4a:	42a2      	cmp	r2, r4
 8003b4c:	d9fa      	bls.n	8003b44 <_free_r+0x48>
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	1858      	adds	r0, r3, r1
 8003b52:	42a0      	cmp	r0, r4
 8003b54:	d10b      	bne.n	8003b6e <_free_r+0x72>
 8003b56:	6820      	ldr	r0, [r4, #0]
 8003b58:	4401      	add	r1, r0
 8003b5a:	1858      	adds	r0, r3, r1
 8003b5c:	4282      	cmp	r2, r0
 8003b5e:	6019      	str	r1, [r3, #0]
 8003b60:	d1de      	bne.n	8003b20 <_free_r+0x24>
 8003b62:	6810      	ldr	r0, [r2, #0]
 8003b64:	6852      	ldr	r2, [r2, #4]
 8003b66:	4401      	add	r1, r0
 8003b68:	6019      	str	r1, [r3, #0]
 8003b6a:	605a      	str	r2, [r3, #4]
 8003b6c:	e7d8      	b.n	8003b20 <_free_r+0x24>
 8003b6e:	d902      	bls.n	8003b76 <_free_r+0x7a>
 8003b70:	230c      	movs	r3, #12
 8003b72:	602b      	str	r3, [r5, #0]
 8003b74:	e7d4      	b.n	8003b20 <_free_r+0x24>
 8003b76:	6820      	ldr	r0, [r4, #0]
 8003b78:	1821      	adds	r1, r4, r0
 8003b7a:	428a      	cmp	r2, r1
 8003b7c:	bf01      	itttt	eq
 8003b7e:	6811      	ldreq	r1, [r2, #0]
 8003b80:	6852      	ldreq	r2, [r2, #4]
 8003b82:	1809      	addeq	r1, r1, r0
 8003b84:	6021      	streq	r1, [r4, #0]
 8003b86:	6062      	str	r2, [r4, #4]
 8003b88:	605c      	str	r4, [r3, #4]
 8003b8a:	e7c9      	b.n	8003b20 <_free_r+0x24>
 8003b8c:	bd38      	pop	{r3, r4, r5, pc}
 8003b8e:	bf00      	nop
 8003b90:	200000a4 	.word	0x200000a4

08003b94 <_malloc_r>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	1ccd      	adds	r5, r1, #3
 8003b98:	f025 0503 	bic.w	r5, r5, #3
 8003b9c:	3508      	adds	r5, #8
 8003b9e:	2d0c      	cmp	r5, #12
 8003ba0:	bf38      	it	cc
 8003ba2:	250c      	movcc	r5, #12
 8003ba4:	2d00      	cmp	r5, #0
 8003ba6:	4606      	mov	r6, r0
 8003ba8:	db01      	blt.n	8003bae <_malloc_r+0x1a>
 8003baa:	42a9      	cmp	r1, r5
 8003bac:	d903      	bls.n	8003bb6 <_malloc_r+0x22>
 8003bae:	230c      	movs	r3, #12
 8003bb0:	6033      	str	r3, [r6, #0]
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	bd70      	pop	{r4, r5, r6, pc}
 8003bb6:	f000 f87d 	bl	8003cb4 <__malloc_lock>
 8003bba:	4a21      	ldr	r2, [pc, #132]	; (8003c40 <_malloc_r+0xac>)
 8003bbc:	6814      	ldr	r4, [r2, #0]
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	b991      	cbnz	r1, 8003be8 <_malloc_r+0x54>
 8003bc2:	4c20      	ldr	r4, [pc, #128]	; (8003c44 <_malloc_r+0xb0>)
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	b91b      	cbnz	r3, 8003bd0 <_malloc_r+0x3c>
 8003bc8:	4630      	mov	r0, r6
 8003bca:	f000 f863 	bl	8003c94 <_sbrk_r>
 8003bce:	6020      	str	r0, [r4, #0]
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	f000 f85e 	bl	8003c94 <_sbrk_r>
 8003bd8:	1c43      	adds	r3, r0, #1
 8003bda:	d124      	bne.n	8003c26 <_malloc_r+0x92>
 8003bdc:	230c      	movs	r3, #12
 8003bde:	4630      	mov	r0, r6
 8003be0:	6033      	str	r3, [r6, #0]
 8003be2:	f000 f868 	bl	8003cb6 <__malloc_unlock>
 8003be6:	e7e4      	b.n	8003bb2 <_malloc_r+0x1e>
 8003be8:	680b      	ldr	r3, [r1, #0]
 8003bea:	1b5b      	subs	r3, r3, r5
 8003bec:	d418      	bmi.n	8003c20 <_malloc_r+0x8c>
 8003bee:	2b0b      	cmp	r3, #11
 8003bf0:	d90f      	bls.n	8003c12 <_malloc_r+0x7e>
 8003bf2:	600b      	str	r3, [r1, #0]
 8003bf4:	18cc      	adds	r4, r1, r3
 8003bf6:	50cd      	str	r5, [r1, r3]
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	f000 f85c 	bl	8003cb6 <__malloc_unlock>
 8003bfe:	f104 000b 	add.w	r0, r4, #11
 8003c02:	1d23      	adds	r3, r4, #4
 8003c04:	f020 0007 	bic.w	r0, r0, #7
 8003c08:	1ac3      	subs	r3, r0, r3
 8003c0a:	d0d3      	beq.n	8003bb4 <_malloc_r+0x20>
 8003c0c:	425a      	negs	r2, r3
 8003c0e:	50e2      	str	r2, [r4, r3]
 8003c10:	e7d0      	b.n	8003bb4 <_malloc_r+0x20>
 8003c12:	684b      	ldr	r3, [r1, #4]
 8003c14:	428c      	cmp	r4, r1
 8003c16:	bf16      	itet	ne
 8003c18:	6063      	strne	r3, [r4, #4]
 8003c1a:	6013      	streq	r3, [r2, #0]
 8003c1c:	460c      	movne	r4, r1
 8003c1e:	e7eb      	b.n	8003bf8 <_malloc_r+0x64>
 8003c20:	460c      	mov	r4, r1
 8003c22:	6849      	ldr	r1, [r1, #4]
 8003c24:	e7cc      	b.n	8003bc0 <_malloc_r+0x2c>
 8003c26:	1cc4      	adds	r4, r0, #3
 8003c28:	f024 0403 	bic.w	r4, r4, #3
 8003c2c:	42a0      	cmp	r0, r4
 8003c2e:	d005      	beq.n	8003c3c <_malloc_r+0xa8>
 8003c30:	1a21      	subs	r1, r4, r0
 8003c32:	4630      	mov	r0, r6
 8003c34:	f000 f82e 	bl	8003c94 <_sbrk_r>
 8003c38:	3001      	adds	r0, #1
 8003c3a:	d0cf      	beq.n	8003bdc <_malloc_r+0x48>
 8003c3c:	6025      	str	r5, [r4, #0]
 8003c3e:	e7db      	b.n	8003bf8 <_malloc_r+0x64>
 8003c40:	200000a4 	.word	0x200000a4
 8003c44:	200000a8 	.word	0x200000a8

08003c48 <_realloc_r>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	4607      	mov	r7, r0
 8003c4c:	4614      	mov	r4, r2
 8003c4e:	460e      	mov	r6, r1
 8003c50:	b921      	cbnz	r1, 8003c5c <_realloc_r+0x14>
 8003c52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c56:	4611      	mov	r1, r2
 8003c58:	f7ff bf9c 	b.w	8003b94 <_malloc_r>
 8003c5c:	b922      	cbnz	r2, 8003c68 <_realloc_r+0x20>
 8003c5e:	f7ff ff4d 	bl	8003afc <_free_r>
 8003c62:	4625      	mov	r5, r4
 8003c64:	4628      	mov	r0, r5
 8003c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c68:	f000 f826 	bl	8003cb8 <_malloc_usable_size_r>
 8003c6c:	42a0      	cmp	r0, r4
 8003c6e:	d20f      	bcs.n	8003c90 <_realloc_r+0x48>
 8003c70:	4621      	mov	r1, r4
 8003c72:	4638      	mov	r0, r7
 8003c74:	f7ff ff8e 	bl	8003b94 <_malloc_r>
 8003c78:	4605      	mov	r5, r0
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	d0f2      	beq.n	8003c64 <_realloc_r+0x1c>
 8003c7e:	4631      	mov	r1, r6
 8003c80:	4622      	mov	r2, r4
 8003c82:	f7ff ff17 	bl	8003ab4 <memcpy>
 8003c86:	4631      	mov	r1, r6
 8003c88:	4638      	mov	r0, r7
 8003c8a:	f7ff ff37 	bl	8003afc <_free_r>
 8003c8e:	e7e9      	b.n	8003c64 <_realloc_r+0x1c>
 8003c90:	4635      	mov	r5, r6
 8003c92:	e7e7      	b.n	8003c64 <_realloc_r+0x1c>

08003c94 <_sbrk_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	2300      	movs	r3, #0
 8003c98:	4c05      	ldr	r4, [pc, #20]	; (8003cb0 <_sbrk_r+0x1c>)
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	6023      	str	r3, [r4, #0]
 8003ca0:	f7fd f988 	bl	8000fb4 <_sbrk>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d102      	bne.n	8003cae <_sbrk_r+0x1a>
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	b103      	cbz	r3, 8003cae <_sbrk_r+0x1a>
 8003cac:	602b      	str	r3, [r5, #0]
 8003cae:	bd38      	pop	{r3, r4, r5, pc}
 8003cb0:	2000016c 	.word	0x2000016c

08003cb4 <__malloc_lock>:
 8003cb4:	4770      	bx	lr

08003cb6 <__malloc_unlock>:
 8003cb6:	4770      	bx	lr

08003cb8 <_malloc_usable_size_r>:
 8003cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cbc:	1f18      	subs	r0, r3, #4
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	bfbc      	itt	lt
 8003cc2:	580b      	ldrlt	r3, [r1, r0]
 8003cc4:	18c0      	addlt	r0, r0, r3
 8003cc6:	4770      	bx	lr

08003cc8 <_init>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	bf00      	nop
 8003ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cce:	bc08      	pop	{r3}
 8003cd0:	469e      	mov	lr, r3
 8003cd2:	4770      	bx	lr

08003cd4 <_fini>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	bf00      	nop
 8003cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cda:	bc08      	pop	{r3}
 8003cdc:	469e      	mov	lr, r3
 8003cde:	4770      	bx	lr
