
ADC_IN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000383c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d4  080039d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080039d4  080039d4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d4  080039d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080039dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08003a4c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08003a4c  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c7c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aee  00000000  00000000  00028d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000850  00000000  00000000  0002a808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000768  00000000  00000000  0002b058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000174fa  00000000  00000000  0002b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b1d  00000000  00000000  00042cba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000862b4  00000000  00000000  0004a7d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0a8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002374  00000000  00000000  000d0b08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003930 	.word	0x08003930

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003930 	.word	0x08003930

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	f5ad 6dfa 	sub.w	sp, sp, #2000	; 0x7d0
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fba2 	bl	80008ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f84a 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f962 	bl	8000434 <MX_GPIO_Init>
  MX_DMA_Init();
 8000170:	f000 f942 	bl	80003f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000174:	f000 f8ec 	bl	8000350 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000178:	f000 f89c 	bl	80002b4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800017c:	f000 f912 	bl	80003a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

 // HAL_ADC_Start_IT(&hadc1);
 // HAL_ADC_Stop_IT(&hadc1);
uint8_t data[2000];
HAL_ADCEx_Calibration_Start(&hadc1);
 8000180:	4819      	ldr	r0, [pc, #100]	; (80001e8 <main+0x8c>)
 8000182:	f001 f9d5 	bl	8001530 <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	  HAL_ADC_Start(&hadc1);
 8000186:	4818      	ldr	r0, [pc, #96]	; (80001e8 <main+0x8c>)
 8000188:	f000 fcec 	bl	8000b64 <HAL_ADC_Start>


  	// adc_val2= HAL_ADC_GetValue(&hadc1);
     // Poll ADC1 Perihperal & TimeOut = 1mSec
    	HAL_ADC_PollForConversion(&hadc1, 100);
 800018c:	2164      	movs	r1, #100	; 0x64
 800018e:	4816      	ldr	r0, [pc, #88]	; (80001e8 <main+0x8c>)
 8000190:	f000 fdc2 	bl	8000d18 <HAL_ADC_PollForConversion>
    	adc_val = HAL_ADC_GetValue(&hadc1);
 8000194:	4814      	ldr	r0, [pc, #80]	; (80001e8 <main+0x8c>)
 8000196:	f000 ff6f 	bl	8001078 <HAL_ADC_GetValue>
 800019a:	4602      	mov	r2, r0
 800019c:	4b13      	ldr	r3, [pc, #76]	; (80001ec <main+0x90>)
 800019e:	601a      	str	r2, [r3, #0]
     // Read The ADC Conversion Result & Map It To PWM DutyCycle
    	HAL_ADC_PollForConversion(&hadc1, 100);
 80001a0:	2164      	movs	r1, #100	; 0x64
 80001a2:	4811      	ldr	r0, [pc, #68]	; (80001e8 <main+0x8c>)
 80001a4:	f000 fdb8 	bl	8000d18 <HAL_ADC_PollForConversion>
    	adc_val1= HAL_ADC_GetValue(&hadc1);
 80001a8:	480f      	ldr	r0, [pc, #60]	; (80001e8 <main+0x8c>)
 80001aa:	f000 ff65 	bl	8001078 <HAL_ADC_GetValue>
 80001ae:	4602      	mov	r2, r0
 80001b0:	4b0f      	ldr	r3, [pc, #60]	; (80001f0 <main+0x94>)
 80001b2:	601a      	str	r2, [r3, #0]
	  sprintf(buffer,"adc1=%02d  adc2= %02d \n",adc_val,adc_val1);
 80001b4:	4b0d      	ldr	r3, [pc, #52]	; (80001ec <main+0x90>)
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	4b0d      	ldr	r3, [pc, #52]	; (80001f0 <main+0x94>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	490d      	ldr	r1, [pc, #52]	; (80001f4 <main+0x98>)
 80001be:	480e      	ldr	r0, [pc, #56]	; (80001f8 <main+0x9c>)
 80001c0:	f002 ffa4 	bl	800310c <siprintf>

	  HAL_UART_Transmit_IT(&huart3, buffer, strlen((char*)buffer));
 80001c4:	480c      	ldr	r0, [pc, #48]	; (80001f8 <main+0x9c>)
 80001c6:	f7ff ffc1 	bl	800014c <strlen>
 80001ca:	4603      	mov	r3, r0
 80001cc:	b29b      	uxth	r3, r3
 80001ce:	461a      	mov	r2, r3
 80001d0:	4909      	ldr	r1, [pc, #36]	; (80001f8 <main+0x9c>)
 80001d2:	480a      	ldr	r0, [pc, #40]	; (80001fc <main+0xa0>)
 80001d4:	f002 fc6b 	bl	8002aae <HAL_UART_Transmit_IT>
	  HAL_Delay(100);
 80001d8:	2064      	movs	r0, #100	; 0x64
 80001da:	f000 fbc9 	bl	8000970 <HAL_Delay>
	  HAL_ADC_Stop(&hadc1);
 80001de:	4802      	ldr	r0, [pc, #8]	; (80001e8 <main+0x8c>)
 80001e0:	f000 fd6e 	bl	8000cc0 <HAL_ADC_Stop>
  {
 80001e4:	e7cf      	b.n	8000186 <main+0x2a>
 80001e6:	bf00      	nop
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	2000008c 	.word	0x2000008c
 80001f0:	20000090 	.word	0x20000090
 80001f4:	08003948 	.word	0x08003948
 80001f8:	20000110 	.word	0x20000110
 80001fc:	200000a0 	.word	0x200000a0

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b094      	sub	sp, #80	; 0x50
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f002 ff74 	bl	80030fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	f107 0314 	add.w	r3, r7, #20
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000230:	2301      	movs	r3, #1
 8000232:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800024c:	2300      	movs	r3, #0
 800024e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000254:	4618      	mov	r0, r3
 8000256:	f001 fe4f 	bl	8001ef8 <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000260:	f000 f936 	bl	80004d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000268:	2302      	movs	r3, #2
 800026a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000274:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	2100      	movs	r1, #0
 8000280:	4618      	mov	r0, r3
 8000282:	f002 f8b9 	bl	80023f8 <HAL_RCC_ClockConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800028c:	f000 f920 	bl	80004d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000290:	2302      	movs	r3, #2
 8000292:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fa48 	bl	8002730 <HAL_RCCEx_PeriphCLKConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002a6:	f000 f913 	bl	80004d0 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3750      	adds	r7, #80	; 0x50
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c4:	4b20      	ldr	r3, [pc, #128]	; (8000348 <MX_ADC1_Init+0x94>)
 80002c6:	4a21      	ldr	r2, [pc, #132]	; (800034c <MX_ADC1_Init+0x98>)
 80002c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002ca:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <MX_ADC1_Init+0x94>)
 80002cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002d2:	4b1d      	ldr	r3, [pc, #116]	; (8000348 <MX_ADC1_Init+0x94>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <MX_ADC1_Init+0x94>)
 80002da:	2200      	movs	r2, #0
 80002dc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002de:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <MX_ADC1_Init+0x94>)
 80002e0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e6:	4b18      	ldr	r3, [pc, #96]	; (8000348 <MX_ADC1_Init+0x94>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <MX_ADC1_Init+0x94>)
 80002ee:	2202      	movs	r2, #2
 80002f0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002f2:	4815      	ldr	r0, [pc, #84]	; (8000348 <MX_ADC1_Init+0x94>)
 80002f4:	f000 fb5e 	bl	80009b4 <HAL_ADC_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002fe:	f000 f8e7 	bl	80004d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000302:	2300      	movs	r3, #0
 8000304:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000306:	2301      	movs	r3, #1
 8000308:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4619      	mov	r1, r3
 8000312:	480d      	ldr	r0, [pc, #52]	; (8000348 <MX_ADC1_Init+0x94>)
 8000314:	f000 ff88 	bl	8001228 <HAL_ADC_ConfigChannel>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800031e:	f000 f8d7 	bl	80004d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000322:	2301      	movs	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000326:	2302      	movs	r3, #2
 8000328:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4619      	mov	r1, r3
 800032e:	4806      	ldr	r0, [pc, #24]	; (8000348 <MX_ADC1_Init+0x94>)
 8000330:	f000 ff7a 	bl	8001228 <HAL_ADC_ConfigChannel>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800033a:	f000 f8c9 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	3710      	adds	r7, #16
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	200000e0 	.word	0x200000e0
 800034c:	40012400 	.word	0x40012400

08000350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000356:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <MX_USART2_UART_Init+0x50>)
 8000358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800035a:	4b10      	ldr	r3, [pc, #64]	; (800039c <MX_USART2_UART_Init+0x4c>)
 800035c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_USART2_UART_Init+0x4c>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000376:	220c      	movs	r2, #12
 8000378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <MX_USART2_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000388:	f002 fb44 	bl	8002a14 <HAL_UART_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000392:	f000 f89d 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000174 	.word	0x20000174
 80003a0:	40004400 	.word	0x40004400

080003a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_USART3_UART_Init+0x4c>)
 80003aa:	4a12      	ldr	r2, [pc, #72]	; (80003f4 <MX_USART3_UART_Init+0x50>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <MX_USART3_UART_Init+0x4c>)
 80003b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_USART3_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MX_USART3_UART_Init+0x4c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <MX_USART3_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_USART3_UART_Init+0x4c>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <MX_USART3_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_USART3_UART_Init+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <MX_USART3_UART_Init+0x4c>)
 80003dc:	f002 fb1a 	bl	8002a14 <HAL_UART_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80003e6:	f000 f873 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	200000a0 	.word	0x200000a0
 80003f4:	40004800 	.word	0x40004800

080003f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MX_DMA_Init+0x38>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a0b      	ldr	r2, [pc, #44]	; (8000430 <MX_DMA_Init+0x38>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <MX_DMA_Init+0x38>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	2100      	movs	r1, #0
 800041a:	200b      	movs	r0, #11
 800041c:	f001 fa05 	bl	800182a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000420:	200b      	movs	r0, #11
 8000422:	f001 fa1e 	bl	8001862 <HAL_NVIC_EnableIRQ>

}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800043a:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_GPIO_Init+0x58>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a13      	ldr	r2, [pc, #76]	; (800048c <MX_GPIO_Init+0x58>)
 8000440:	f043 0320 	orr.w	r3, r3, #32
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_GPIO_Init+0x58>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0320 	and.w	r3, r3, #32
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_GPIO_Init+0x58>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a0d      	ldr	r2, [pc, #52]	; (800048c <MX_GPIO_Init+0x58>)
 8000458:	f043 0304 	orr.w	r3, r3, #4
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_GPIO_Init+0x58>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0304 	and.w	r3, r3, #4
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_GPIO_Init+0x58>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	4a07      	ldr	r2, [pc, #28]	; (800048c <MX_GPIO_Init+0x58>)
 8000470:	f043 0308 	orr.w	r3, r3, #8
 8000474:	6193      	str	r3, [r2, #24]
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <MX_GPIO_Init+0x58>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	f003 0308 	and.w	r3, r3, #8
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]

}
 8000482:	bf00      	nop
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	40021000 	.word	0x40021000

08000490 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 //  HAL_UART_Transmit_IT(&huart2, data, sizeof (data));
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
	...

080004a4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 // HAL_ADC_Start_IT(&hadc1);
//adc_val=buffer1;
 adc_val=HAL_ADC_Start_IT(&hadc1);
 80004ac:	4806      	ldr	r0, [pc, #24]	; (80004c8 <HAL_ADC_ConvCpltCallback+0x24>)
 80004ae:	f000 fd2d 	bl	8000f0c <HAL_ADC_Start_IT>
 80004b2:	4603      	mov	r3, r0
 80004b4:	461a      	mov	r2, r3
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <HAL_ADC_ConvCpltCallback+0x28>)
 80004b8:	601a      	str	r2, [r3, #0]
 HAL_ADC_Start_IT(&hadc1);
 80004ba:	4803      	ldr	r0, [pc, #12]	; (80004c8 <HAL_ADC_ConvCpltCallback+0x24>)
 80004bc:	f000 fd26 	bl	8000f0c <HAL_ADC_Start_IT>
	//  sprintf(buffer,"adc=%02d",adc_val);
    //  HAL_UART_Transmit_IT(&huart2, buffer, strlen((char*)buffer));
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	200000e0 	.word	0x200000e0
 80004cc:	2000008c 	.word	0x2000008c

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <Error_Handler+0x6>

080004d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <HAL_MspInit+0x5c>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	4a14      	ldr	r2, [pc, #80]	; (8000534 <HAL_MspInit+0x5c>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6193      	str	r3, [r2, #24]
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <HAL_MspInit+0x5c>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <HAL_MspInit+0x5c>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <HAL_MspInit+0x5c>)
 80004fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000500:	61d3      	str	r3, [r2, #28]
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <HAL_MspInit+0x5c>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <HAL_MspInit+0x60>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <HAL_MspInit+0x60>)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000
 8000538:	40010000 	.word	0x40010000

0800053c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a2c      	ldr	r2, [pc, #176]	; (8000608 <HAL_ADC_MspInit+0xcc>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d151      	bne.n	8000600 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800055c:	4b2b      	ldr	r3, [pc, #172]	; (800060c <HAL_ADC_MspInit+0xd0>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a2a      	ldr	r2, [pc, #168]	; (800060c <HAL_ADC_MspInit+0xd0>)
 8000562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <HAL_ADC_MspInit+0xd0>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <HAL_ADC_MspInit+0xd0>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a24      	ldr	r2, [pc, #144]	; (800060c <HAL_ADC_MspInit+0xd0>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <HAL_ADC_MspInit+0xd0>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0304 	and.w	r3, r3, #4
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800058c:	2313      	movs	r3, #19
 800058e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000590:	2303      	movs	r3, #3
 8000592:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	4619      	mov	r1, r3
 800059a:	481d      	ldr	r0, [pc, #116]	; (8000610 <HAL_ADC_MspInit+0xd4>)
 800059c:	f001 fb52 	bl	8001c44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005a0:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <HAL_ADC_MspInit+0xd8>)
 80005a2:	4a1d      	ldr	r2, [pc, #116]	; (8000618 <HAL_ADC_MspInit+0xdc>)
 80005a4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005a6:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <HAL_ADC_MspInit+0xd8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <HAL_ADC_MspInit+0xd8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <HAL_ADC_MspInit+0xd8>)
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <HAL_ADC_MspInit+0xd8>)
 80005ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <HAL_ADC_MspInit+0xd8>)
 80005c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_ADC_MspInit+0xd8>)
 80005ca:	2220      	movs	r2, #32
 80005cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <HAL_ADC_MspInit+0xd8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005d4:	480f      	ldr	r0, [pc, #60]	; (8000614 <HAL_ADC_MspInit+0xd8>)
 80005d6:	f001 f95f 	bl	8001898 <HAL_DMA_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80005e0:	f7ff ff76 	bl	80004d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <HAL_ADC_MspInit+0xd8>)
 80005e8:	621a      	str	r2, [r3, #32]
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <HAL_ADC_MspInit+0xd8>)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	2012      	movs	r0, #18
 80005f6:	f001 f918 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80005fa:	2012      	movs	r0, #18
 80005fc:	f001 f931 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40012400 	.word	0x40012400
 800060c:	40021000 	.word	0x40021000
 8000610:	40010800 	.word	0x40010800
 8000614:	20000130 	.word	0x20000130
 8000618:	40020008 	.word	0x40020008

0800061c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0318 	add.w	r3, r7, #24
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a3f      	ldr	r2, [pc, #252]	; (8000734 <HAL_UART_MspInit+0x118>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d138      	bne.n	80006ae <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800063c:	4b3e      	ldr	r3, [pc, #248]	; (8000738 <HAL_UART_MspInit+0x11c>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	4a3d      	ldr	r2, [pc, #244]	; (8000738 <HAL_UART_MspInit+0x11c>)
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	61d3      	str	r3, [r2, #28]
 8000648:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <HAL_UART_MspInit+0x11c>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b38      	ldr	r3, [pc, #224]	; (8000738 <HAL_UART_MspInit+0x11c>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a37      	ldr	r2, [pc, #220]	; (8000738 <HAL_UART_MspInit+0x11c>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b35      	ldr	r3, [pc, #212]	; (8000738 <HAL_UART_MspInit+0x11c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0304 	and.w	r3, r3, #4
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800066c:	2304      	movs	r3, #4
 800066e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	2302      	movs	r3, #2
 8000672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000674:	2303      	movs	r3, #3
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 0318 	add.w	r3, r7, #24
 800067c:	4619      	mov	r1, r3
 800067e:	482f      	ldr	r0, [pc, #188]	; (800073c <HAL_UART_MspInit+0x120>)
 8000680:	f001 fae0 	bl	8001c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000684:	2308      	movs	r3, #8
 8000686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 0318 	add.w	r3, r7, #24
 8000694:	4619      	mov	r1, r3
 8000696:	4829      	ldr	r0, [pc, #164]	; (800073c <HAL_UART_MspInit+0x120>)
 8000698:	f001 fad4 	bl	8001c44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2026      	movs	r0, #38	; 0x26
 80006a2:	f001 f8c2 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006a6:	2026      	movs	r0, #38	; 0x26
 80006a8:	f001 f8db 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80006ac:	e03e      	b.n	800072c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART3)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a23      	ldr	r2, [pc, #140]	; (8000740 <HAL_UART_MspInit+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d139      	bne.n	800072c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <HAL_UART_MspInit+0x11c>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	4a1e      	ldr	r2, [pc, #120]	; (8000738 <HAL_UART_MspInit+0x11c>)
 80006be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006c2:	61d3      	str	r3, [r2, #28]
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <HAL_UART_MspInit+0x11c>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <HAL_UART_MspInit+0x11c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a18      	ldr	r2, [pc, #96]	; (8000738 <HAL_UART_MspInit+0x11c>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <HAL_UART_MspInit+0x11c>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 0318 	add.w	r3, r7, #24
 80006fa:	4619      	mov	r1, r3
 80006fc:	4811      	ldr	r0, [pc, #68]	; (8000744 <HAL_UART_MspInit+0x128>)
 80006fe:	f001 faa1 	bl	8001c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000702:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 0318 	add.w	r3, r7, #24
 8000714:	4619      	mov	r1, r3
 8000716:	480b      	ldr	r0, [pc, #44]	; (8000744 <HAL_UART_MspInit+0x128>)
 8000718:	f001 fa94 	bl	8001c44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2100      	movs	r1, #0
 8000720:	2027      	movs	r0, #39	; 0x27
 8000722:	f001 f882 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000726:	2027      	movs	r0, #39	; 0x27
 8000728:	f001 f89b 	bl	8001862 <HAL_NVIC_EnableIRQ>
}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	; 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40004400 	.word	0x40004400
 8000738:	40021000 	.word	0x40021000
 800073c:	40010800 	.word	0x40010800
 8000740:	40004800 	.word	0x40004800
 8000744:	40010c00 	.word	0x40010c00

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <MemManage_Handler+0x4>

0800075a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler+0x4>

08000766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078e:	f000 f8d3 	bl	8000938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <DMA1_Channel1_IRQHandler+0x10>)
 800079e:	f001 f94b 	bl	8001a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000130 	.word	0x20000130

080007ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <ADC1_2_IRQHandler+0x10>)
 80007b2:	f000 fc6d 	bl	8001090 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000e0 	.word	0x200000e0

080007c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <USART2_IRQHandler+0x10>)
 80007c6:	f002 f9b7 	bl	8002b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000174 	.word	0x20000174

080007d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <USART3_IRQHandler+0x10>)
 80007da:	f002 f9ad 	bl	8002b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000a0 	.word	0x200000a0

080007e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <_sbrk+0x5c>)
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <_sbrk+0x60>)
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <_sbrk+0x64>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <_sbrk+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d207      	bcs.n	8000828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000818:	f002 fc46 	bl	80030a8 <__errno>
 800081c:	4602      	mov	r2, r0
 800081e:	230c      	movs	r3, #12
 8000820:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000826:	e009      	b.n	800083c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <_sbrk+0x64>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <_sbrk+0x64>)
 8000838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20005000 	.word	0x20005000
 8000848:	00000400 	.word	0x00000400
 800084c:	20000094 	.word	0x20000094
 8000850:	200001c0 	.word	0x200001c0

08000854 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000860:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000862:	e003      	b.n	800086c <LoopCopyDataInit>

08000864 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000866:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000868:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800086a:	3104      	adds	r1, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800086c:	480a      	ldr	r0, [pc, #40]	; (8000898 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000870:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000872:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000874:	d3f6      	bcc.n	8000864 <CopyDataInit>
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000878:	e002      	b.n	8000880 <LoopFillZerobss>

0800087a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800087c:	f842 3b04 	str.w	r3, [r2], #4

08000880 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000882:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000884:	d3f9      	bcc.n	800087a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000886:	f7ff ffe5 	bl	8000854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088a:	f002 fc13 	bl	80030b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088e:	f7ff fc65 	bl	800015c <main>
  bx lr
 8000892:	4770      	bx	lr
  ldr r3, =_sidata
 8000894:	080039dc 	.word	0x080039dc
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800089c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80008a0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80008a4:	200001c0 	.word	0x200001c0

080008a8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <CAN1_RX1_IRQHandler>
	...

080008ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_Init+0x28>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_Init+0x28>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 ffa9 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 f808 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f7ff fe06 	bl	80004d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x54>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x58>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 ffc1 	bl	800187e <HAL_SYSTICK_Config>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e00e      	b.n	8000924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d80a      	bhi.n	8000922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090c:	2200      	movs	r2, #0
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000914:	f000 ff89 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <HAL_InitTick+0x5c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	e000      	b.n	8000924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000000 	.word	0x20000000
 8000930:	20000008 	.word	0x20000008
 8000934:	20000004 	.word	0x20000004

08000938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_IncTick+0x1c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_IncTick+0x20>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4413      	add	r3, r2
 8000948:	4a03      	ldr	r2, [pc, #12]	; (8000958 <HAL_IncTick+0x20>)
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000008 	.word	0x20000008
 8000958:	200001b8 	.word	0x200001b8

0800095c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <HAL_GetTick+0x10>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	200001b8 	.word	0x200001b8

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff fff0 	bl	800095c <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000988:	d005      	beq.n	8000996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_Delay+0x40>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000996:	bf00      	nop
 8000998:	f7ff ffe0 	bl	800095c <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f7      	bhi.n	8000998 <HAL_Delay+0x28>
  {
  }
}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000008 	.word	0x20000008

080009b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e0be      	b.n	8000b54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d109      	bne.n	80009f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff fda2 	bl	800053c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 fd5f 	bl	80014bc <ADC_ConversionStop_Disable>
 80009fe:	4603      	mov	r3, r0
 8000a00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a06:	f003 0310 	and.w	r3, r3, #16
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f040 8099 	bne.w	8000b42 <HAL_ADC_Init+0x18e>
 8000a10:	7dfb      	ldrb	r3, [r7, #23]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f040 8095 	bne.w	8000b42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a20:	f023 0302 	bic.w	r3, r3, #2
 8000a24:	f043 0202 	orr.w	r2, r3, #2
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7b1b      	ldrb	r3, [r3, #12]
 8000a3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a4c:	d003      	beq.n	8000a56 <HAL_ADC_Init+0xa2>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d102      	bne.n	8000a5c <HAL_ADC_Init+0xa8>
 8000a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5a:	e000      	b.n	8000a5e <HAL_ADC_Init+0xaa>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7d1b      	ldrb	r3, [r3, #20]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d119      	bne.n	8000aa0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7b1b      	ldrb	r3, [r3, #12]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d109      	bne.n	8000a88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	035a      	lsls	r2, r3, #13
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	e00b      	b.n	8000aa0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8c:	f043 0220 	orr.w	r2, r3, #32
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a98:	f043 0201 	orr.w	r2, r3, #1
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_Init+0x1a8>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	6812      	ldr	r2, [r2, #0]
 8000ac2:	68b9      	ldr	r1, [r7, #8]
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ad0:	d003      	beq.n	8000ada <HAL_ADC_Init+0x126>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d104      	bne.n	8000ae4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	051b      	lsls	r3, r3, #20
 8000ae2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_ADC_Init+0x1ac>)
 8000b00:	4013      	ands	r3, r2
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d10b      	bne.n	8000b20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b12:	f023 0303 	bic.w	r3, r3, #3
 8000b16:	f043 0201 	orr.w	r2, r3, #1
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b1e:	e018      	b.n	8000b52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b24:	f023 0312 	bic.w	r3, r3, #18
 8000b28:	f043 0210 	orr.w	r2, r3, #16
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	f043 0201 	orr.w	r2, r3, #1
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b40:	e007      	b.n	8000b52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b46:	f043 0210 	orr.w	r2, r3, #16
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b60:	ff1f0efe 	.word	0xff1f0efe

08000b64 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d101      	bne.n	8000b7e <HAL_ADC_Start+0x1a>
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	e098      	b.n	8000cb0 <HAL_ADC_Start+0x14c>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2201      	movs	r2, #1
 8000b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 fc46 	bl	8001418 <ADC_Enable>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f040 8087 	bne.w	8000ca6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ba0:	f023 0301 	bic.w	r3, r3, #1
 8000ba4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a41      	ldr	r2, [pc, #260]	; (8000cb8 <HAL_ADC_Start+0x154>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d105      	bne.n	8000bc2 <HAL_ADC_Start+0x5e>
 8000bb6:	4b41      	ldr	r3, [pc, #260]	; (8000cbc <HAL_ADC_Start+0x158>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d115      	bne.n	8000bee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d026      	beq.n	8000c2a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000be4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bec:	e01d      	b.n	8000c2a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <HAL_ADC_Start+0x158>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d004      	beq.n	8000c0e <HAL_ADC_Start+0xaa>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a2b      	ldr	r2, [pc, #172]	; (8000cb8 <HAL_ADC_Start+0x154>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d10d      	bne.n	8000c2a <HAL_ADC_Start+0xc6>
 8000c0e:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <HAL_ADC_Start+0x158>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d007      	beq.n	8000c2a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3a:	f023 0206 	bic.w	r2, r3, #6
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c42:	e002      	b.n	8000c4a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f06f 0202 	mvn.w	r2, #2
 8000c5a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c66:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c6a:	d113      	bne.n	8000c94 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c70:	4a11      	ldr	r2, [pc, #68]	; (8000cb8 <HAL_ADC_Start+0x154>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d105      	bne.n	8000c82 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_ADC_Start+0x158>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d108      	bne.n	8000c94 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	e00c      	b.n	8000cae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	e003      	b.n	8000cae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40012800 	.word	0x40012800
 8000cbc:	40012400 	.word	0x40012400

08000cc0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d101      	bne.n	8000cda <HAL_ADC_Stop+0x1a>
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	e01a      	b.n	8000d10 <HAL_ADC_Stop+0x50>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f000 fbea 	bl	80014bc <ADC_ConversionStop_Disable>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d109      	bne.n	8000d06 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cfa:	f023 0301 	bic.w	r3, r3, #1
 8000cfe:	f043 0201 	orr.w	r2, r3, #1
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d2e:	f7ff fe15 	bl	800095c <HAL_GetTick>
 8000d32:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00b      	beq.n	8000d5a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d46:	f043 0220 	orr.w	r2, r3, #32
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e0c8      	b.n	8000eec <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d12a      	bne.n	8000dbe <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d123      	bne.n	8000dbe <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d76:	e01a      	b.n	8000dae <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d7e:	d016      	beq.n	8000dae <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d007      	beq.n	8000d96 <HAL_ADC_PollForConversion+0x7e>
 8000d86:	f7ff fde9 	bl	800095c <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d20b      	bcs.n	8000dae <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	f043 0204 	orr.w	r2, r3, #4
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e09e      	b.n	8000eec <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0dd      	beq.n	8000d78 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dbc:	e06c      	b.n	8000e98 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000dbe:	4b4d      	ldr	r3, [pc, #308]	; (8000ef4 <HAL_ADC_PollForConversion+0x1dc>)
 8000dc0:	681c      	ldr	r4, [r3, #0]
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	f001 fd6a 	bl	800289c <HAL_RCCEx_GetPeriphCLKFreq>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6919      	ldr	r1, [r3, #16]
 8000dd4:	4b48      	ldr	r3, [pc, #288]	; (8000ef8 <HAL_ADC_PollForConversion+0x1e0>)
 8000dd6:	400b      	ands	r3, r1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d118      	bne.n	8000e0e <HAL_ADC_PollForConversion+0xf6>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	68d9      	ldr	r1, [r3, #12]
 8000de2:	4b46      	ldr	r3, [pc, #280]	; (8000efc <HAL_ADC_PollForConversion+0x1e4>)
 8000de4:	400b      	ands	r3, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d111      	bne.n	8000e0e <HAL_ADC_PollForConversion+0xf6>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6919      	ldr	r1, [r3, #16]
 8000df0:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <HAL_ADC_PollForConversion+0x1e8>)
 8000df2:	400b      	ands	r3, r1
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d108      	bne.n	8000e0a <HAL_ADC_PollForConversion+0xf2>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	68d9      	ldr	r1, [r3, #12]
 8000dfe:	4b41      	ldr	r3, [pc, #260]	; (8000f04 <HAL_ADC_PollForConversion+0x1ec>)
 8000e00:	400b      	ands	r3, r1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_ADC_PollForConversion+0xf2>
 8000e06:	2314      	movs	r3, #20
 8000e08:	e020      	b.n	8000e4c <HAL_ADC_PollForConversion+0x134>
 8000e0a:	2329      	movs	r3, #41	; 0x29
 8000e0c:	e01e      	b.n	8000e4c <HAL_ADC_PollForConversion+0x134>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6919      	ldr	r1, [r3, #16]
 8000e14:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <HAL_ADC_PollForConversion+0x1e8>)
 8000e16:	400b      	ands	r3, r1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d106      	bne.n	8000e2a <HAL_ADC_PollForConversion+0x112>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68d9      	ldr	r1, [r3, #12]
 8000e22:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <HAL_ADC_PollForConversion+0x1ec>)
 8000e24:	400b      	ands	r3, r1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00d      	beq.n	8000e46 <HAL_ADC_PollForConversion+0x12e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6919      	ldr	r1, [r3, #16]
 8000e30:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <HAL_ADC_PollForConversion+0x1f0>)
 8000e32:	400b      	ands	r3, r1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d108      	bne.n	8000e4a <HAL_ADC_PollForConversion+0x132>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68d9      	ldr	r1, [r3, #12]
 8000e3e:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <HAL_ADC_PollForConversion+0x1f0>)
 8000e40:	400b      	ands	r3, r1
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <HAL_ADC_PollForConversion+0x132>
 8000e46:	2354      	movs	r3, #84	; 0x54
 8000e48:	e000      	b.n	8000e4c <HAL_ADC_PollForConversion+0x134>
 8000e4a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000e4c:	fb02 f303 	mul.w	r3, r2, r3
 8000e50:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e52:	e01d      	b.n	8000e90 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e5a:	d016      	beq.n	8000e8a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d007      	beq.n	8000e72 <HAL_ADC_PollForConversion+0x15a>
 8000e62:	f7ff fd7b 	bl	800095c <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d20b      	bcs.n	8000e8a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	f043 0204 	orr.w	r2, r3, #4
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e030      	b.n	8000eec <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8dd      	bhi.n	8000e54 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f06f 0212 	mvn.w	r2, #18
 8000ea0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000eb8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ebc:	d115      	bne.n	8000eea <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d111      	bne.n	8000eea <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d105      	bne.n	8000eea <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee2:	f043 0201 	orr.w	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	24924924 	.word	0x24924924
 8000efc:	00924924 	.word	0x00924924
 8000f00:	12492492 	.word	0x12492492
 8000f04:	00492492 	.word	0x00492492
 8000f08:	00249249 	.word	0x00249249

08000f0c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d101      	bne.n	8000f26 <HAL_ADC_Start_IT+0x1a>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e0a0      	b.n	8001068 <HAL_ADC_Start_IT+0x15c>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 fa72 	bl	8001418 <ADC_Enable>
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f040 808f 	bne.w	800105e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f48:	f023 0301 	bic.w	r3, r3, #1
 8000f4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a45      	ldr	r2, [pc, #276]	; (8001070 <HAL_ADC_Start_IT+0x164>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d105      	bne.n	8000f6a <HAL_ADC_Start_IT+0x5e>
 8000f5e:	4b45      	ldr	r3, [pc, #276]	; (8001074 <HAL_ADC_Start_IT+0x168>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d115      	bne.n	8000f96 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d026      	beq.n	8000fd2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f94:	e01d      	b.n	8000fd2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a33      	ldr	r2, [pc, #204]	; (8001074 <HAL_ADC_Start_IT+0x168>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d004      	beq.n	8000fb6 <HAL_ADC_Start_IT+0xaa>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a2f      	ldr	r2, [pc, #188]	; (8001070 <HAL_ADC_Start_IT+0x164>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d10d      	bne.n	8000fd2 <HAL_ADC_Start_IT+0xc6>
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <HAL_ADC_Start_IT+0x168>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d007      	beq.n	8000fd2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d006      	beq.n	8000fec <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	f023 0206 	bic.w	r2, r3, #6
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fea:	e002      	b.n	8000ff2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f06f 0202 	mvn.w	r2, #2
 8001002:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0220 	orr.w	r2, r2, #32
 8001012:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800101e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001022:	d113      	bne.n	800104c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001028:	4a11      	ldr	r2, [pc, #68]	; (8001070 <HAL_ADC_Start_IT+0x164>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d105      	bne.n	800103a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_ADC_Start_IT+0x168>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001036:	2b00      	cmp	r3, #0
 8001038:	d108      	bne.n	800104c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	e00c      	b.n	8001066 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	e003      	b.n	8001066 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40012800 	.word	0x40012800
 8001074:	40012400 	.word	0x40012400

08001078 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	2b20      	cmp	r3, #32
 80010a4:	d140      	bne.n	8001128 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d139      	bne.n	8001128 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	f003 0310 	and.w	r3, r3, #16
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d105      	bne.n	80010cc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010da:	d11d      	bne.n	8001118 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d119      	bne.n	8001118 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0220 	bic.w	r2, r2, #32
 80010f2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d105      	bne.n	8001118 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	f043 0201 	orr.w	r2, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff f9c3 	bl	80004a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f06f 0212 	mvn.w	r2, #18
 8001126:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001132:	2b80      	cmp	r3, #128	; 0x80
 8001134:	d14f      	bne.n	80011d6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b04      	cmp	r3, #4
 8001142:	d148      	bne.n	80011d6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	2b00      	cmp	r3, #0
 800114e:	d105      	bne.n	800115c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001166:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800116a:	d012      	beq.n	8001192 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001176:	2b00      	cmp	r3, #0
 8001178:	d125      	bne.n	80011c6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001184:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001188:	d11d      	bne.n	80011c6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800118e:	2b00      	cmp	r3, #0
 8001190:	d119      	bne.n	80011c6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011a0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d105      	bne.n	80011c6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011be:	f043 0201 	orr.w	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fa4e 	bl	8001668 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f06f 020c 	mvn.w	r2, #12
 80011d4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011e0:	2b40      	cmp	r3, #64	; 0x40
 80011e2:	d114      	bne.n	800120e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d10d      	bne.n	800120e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f809 	bl	8001216 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f06f 0201 	mvn.w	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x20>
 8001244:	2302      	movs	r3, #2
 8001246:	e0dc      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1da>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b06      	cmp	r3, #6
 8001256:	d81c      	bhi.n	8001292 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	3b05      	subs	r3, #5
 800126a:	221f      	movs	r2, #31
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	4019      	ands	r1, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	3b05      	subs	r3, #5
 8001284:	fa00 f203 	lsl.w	r2, r0, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
 8001290:	e03c      	b.n	800130c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b0c      	cmp	r3, #12
 8001298:	d81c      	bhi.n	80012d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	3b23      	subs	r3, #35	; 0x23
 80012ac:	221f      	movs	r2, #31
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	4019      	ands	r1, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	3b23      	subs	r3, #35	; 0x23
 80012c6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	631a      	str	r2, [r3, #48]	; 0x30
 80012d2:	e01b      	b.n	800130c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	3b41      	subs	r3, #65	; 0x41
 80012e6:	221f      	movs	r2, #31
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4019      	ands	r1, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	3b41      	subs	r3, #65	; 0x41
 8001300:	fa00 f203 	lsl.w	r2, r0, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b09      	cmp	r3, #9
 8001312:	d91c      	bls.n	800134e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68d9      	ldr	r1, [r3, #12]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	3b1e      	subs	r3, #30
 8001326:	2207      	movs	r2, #7
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	4019      	ands	r1, r3
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	6898      	ldr	r0, [r3, #8]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4613      	mov	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	3b1e      	subs	r3, #30
 8001340:	fa00 f203 	lsl.w	r2, r0, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	e019      	b.n	8001382 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6919      	ldr	r1, [r3, #16]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	2207      	movs	r2, #7
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	4019      	ands	r1, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	6898      	ldr	r0, [r3, #8]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	fa00 f203 	lsl.w	r2, r0, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b10      	cmp	r3, #16
 8001388:	d003      	beq.n	8001392 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800138e:	2b11      	cmp	r3, #17
 8001390:	d132      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a1d      	ldr	r2, [pc, #116]	; (800140c <HAL_ADC_ConfigChannel+0x1e4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d125      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d126      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013b8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b10      	cmp	r3, #16
 80013c0:	d11a      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <HAL_ADC_ConfigChannel+0x1e8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <HAL_ADC_ConfigChannel+0x1ec>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	0c9a      	lsrs	r2, r3, #18
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013d8:	e002      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3b01      	subs	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f9      	bne.n	80013da <HAL_ADC_ConfigChannel+0x1b2>
 80013e6:	e007      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	f043 0220 	orr.w	r2, r3, #32
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	40012400 	.word	0x40012400
 8001410:	20000000 	.word	0x20000000
 8001414:	431bde83 	.word	0x431bde83

08001418 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b01      	cmp	r3, #1
 8001434:	d039      	beq.n	80014aa <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 0201 	orr.w	r2, r2, #1
 8001444:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <ADC_Enable+0x9c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <ADC_Enable+0xa0>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	0c9b      	lsrs	r3, r3, #18
 8001452:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001454:	e002      	b.n	800145c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3b01      	subs	r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f9      	bne.n	8001456 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001462:	f7ff fa7b 	bl	800095c <HAL_GetTick>
 8001466:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001468:	e018      	b.n	800149c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800146a:	f7ff fa77 	bl	800095c <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d911      	bls.n	800149c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	f043 0210 	orr.w	r2, r3, #16
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	f043 0201 	orr.w	r2, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e007      	b.n	80014ac <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d1df      	bne.n	800146a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000000 	.word	0x20000000
 80014b8:	431bde83 	.word	0x431bde83

080014bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d127      	bne.n	8001526 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0201 	bic.w	r2, r2, #1
 80014e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014e6:	f7ff fa39 	bl	800095c <HAL_GetTick>
 80014ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014ec:	e014      	b.n	8001518 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014ee:	f7ff fa35 	bl	800095c <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d90d      	bls.n	8001518 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	f043 0210 	orr.w	r2, r3, #16
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	f043 0201 	orr.w	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e007      	b.n	8001528 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b01      	cmp	r3, #1
 8001524:	d0e3      	beq.n	80014ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_ADCEx_Calibration_Start+0x1e>
 800154a:	2302      	movs	r3, #2
 800154c:	e086      	b.n	800165c <HAL_ADCEx_Calibration_Start+0x12c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffb0 	bl	80014bc <ADC_ConversionStop_Disable>
 800155c:	4603      	mov	r3, r0
 800155e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d175      	bne.n	8001652 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800156e:	f023 0302 	bic.w	r3, r3, #2
 8001572:	f043 0202 	orr.w	r2, r3, #2
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800157a:	4b3a      	ldr	r3, [pc, #232]	; (8001664 <HAL_ADCEx_Calibration_Start+0x134>)
 800157c:	681c      	ldr	r4, [r3, #0]
 800157e:	2002      	movs	r0, #2
 8001580:	f001 f98c 	bl	800289c <HAL_RCCEx_GetPeriphCLKFreq>
 8001584:	4603      	mov	r3, r0
 8001586:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800158a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800158c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800158e:	e002      	b.n	8001596 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3b01      	subs	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f9      	bne.n	8001590 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff3b 	bl	8001418 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0208 	orr.w	r2, r2, #8
 80015b0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80015b2:	f7ff f9d3 	bl	800095c <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015b8:	e014      	b.n	80015e4 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80015ba:	f7ff f9cf 	bl	800095c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b0a      	cmp	r3, #10
 80015c6:	d90d      	bls.n	80015e4 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	f023 0312 	bic.w	r3, r3, #18
 80015d0:	f043 0210 	orr.w	r2, r3, #16
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e03b      	b.n	800165c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1e3      	bne.n	80015ba <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0204 	orr.w	r2, r2, #4
 8001600:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001602:	f7ff f9ab 	bl	800095c <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001608:	e014      	b.n	8001634 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800160a:	f7ff f9a7 	bl	800095c <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b0a      	cmp	r3, #10
 8001616:	d90d      	bls.n	8001634 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	f023 0312 	bic.w	r3, r3, #18
 8001620:	f043 0210 	orr.w	r2, r3, #16
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e013      	b.n	800165c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1e3      	bne.n	800160a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001646:	f023 0303 	bic.w	r3, r3, #3
 800164a:	f043 0201 	orr.w	r2, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800165a:	7dfb      	ldrb	r3, [r7, #23]
}
 800165c:	4618      	mov	r0, r3
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd90      	pop	{r4, r7, pc}
 8001664:	20000000 	.word	0x20000000

08001668 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
	...

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db0b      	blt.n	800170a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	4906      	ldr	r1, [pc, #24]	; (8001714 <__NVIC_EnableIRQ+0x34>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	2001      	movs	r0, #1
 8001702:	fa00 f202 	lsl.w	r2, r0, r2
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f4:	f7ff ff90 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff2d 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff42 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff90 	bl	800176c <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5f 	bl	8001718 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff35 	bl	80016e0 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e043      	b.n	8001936 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_DMA_Init+0xa8>)
 80018b6:	4413      	add	r3, r2
 80018b8:	4a22      	ldr	r2, [pc, #136]	; (8001944 <HAL_DMA_Init+0xac>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	009a      	lsls	r2, r3, #2
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a1f      	ldr	r2, [pc, #124]	; (8001948 <HAL_DMA_Init+0xb0>)
 80018ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80018e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	bffdfff8 	.word	0xbffdfff8
 8001944:	cccccccd 	.word	0xcccccccd
 8001948:	40020000 	.word	0x40020000

0800194c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800195e:	2b02      	cmp	r3, #2
 8001960:	d005      	beq.n	800196e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2204      	movs	r2, #4
 8001966:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	e051      	b.n	8001a12 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 020e 	bic.w	r2, r2, #14
 800197c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0201 	bic.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a22      	ldr	r2, [pc, #136]	; (8001a1c <HAL_DMA_Abort_IT+0xd0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d029      	beq.n	80019ec <HAL_DMA_Abort_IT+0xa0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a20      	ldr	r2, [pc, #128]	; (8001a20 <HAL_DMA_Abort_IT+0xd4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d022      	beq.n	80019e8 <HAL_DMA_Abort_IT+0x9c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1f      	ldr	r2, [pc, #124]	; (8001a24 <HAL_DMA_Abort_IT+0xd8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d01a      	beq.n	80019e2 <HAL_DMA_Abort_IT+0x96>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <HAL_DMA_Abort_IT+0xdc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d012      	beq.n	80019dc <HAL_DMA_Abort_IT+0x90>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <HAL_DMA_Abort_IT+0xe0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d00a      	beq.n	80019d6 <HAL_DMA_Abort_IT+0x8a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a1a      	ldr	r2, [pc, #104]	; (8001a30 <HAL_DMA_Abort_IT+0xe4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d102      	bne.n	80019d0 <HAL_DMA_Abort_IT+0x84>
 80019ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019ce:	e00e      	b.n	80019ee <HAL_DMA_Abort_IT+0xa2>
 80019d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019d4:	e00b      	b.n	80019ee <HAL_DMA_Abort_IT+0xa2>
 80019d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019da:	e008      	b.n	80019ee <HAL_DMA_Abort_IT+0xa2>
 80019dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e0:	e005      	b.n	80019ee <HAL_DMA_Abort_IT+0xa2>
 80019e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e6:	e002      	b.n	80019ee <HAL_DMA_Abort_IT+0xa2>
 80019e8:	2310      	movs	r3, #16
 80019ea:	e000      	b.n	80019ee <HAL_DMA_Abort_IT+0xa2>
 80019ec:	2301      	movs	r3, #1
 80019ee:	4a11      	ldr	r2, [pc, #68]	; (8001a34 <HAL_DMA_Abort_IT+0xe8>)
 80019f0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
    } 
  }
  return status;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40020008 	.word	0x40020008
 8001a20:	4002001c 	.word	0x4002001c
 8001a24:	40020030 	.word	0x40020030
 8001a28:	40020044 	.word	0x40020044
 8001a2c:	40020058 	.word	0x40020058
 8001a30:	4002006c 	.word	0x4002006c
 8001a34:	40020000 	.word	0x40020000

08001a38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	2204      	movs	r2, #4
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d04f      	beq.n	8001b00 <HAL_DMA_IRQHandler+0xc8>
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d04a      	beq.n	8001b00 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0204 	bic.w	r2, r2, #4
 8001a86:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a66      	ldr	r2, [pc, #408]	; (8001c28 <HAL_DMA_IRQHandler+0x1f0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d029      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0xae>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a65      	ldr	r2, [pc, #404]	; (8001c2c <HAL_DMA_IRQHandler+0x1f4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d022      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0xaa>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a63      	ldr	r2, [pc, #396]	; (8001c30 <HAL_DMA_IRQHandler+0x1f8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d01a      	beq.n	8001adc <HAL_DMA_IRQHandler+0xa4>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a62      	ldr	r2, [pc, #392]	; (8001c34 <HAL_DMA_IRQHandler+0x1fc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d012      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x9e>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a60      	ldr	r2, [pc, #384]	; (8001c38 <HAL_DMA_IRQHandler+0x200>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00a      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x98>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a5f      	ldr	r2, [pc, #380]	; (8001c3c <HAL_DMA_IRQHandler+0x204>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d102      	bne.n	8001aca <HAL_DMA_IRQHandler+0x92>
 8001ac4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ac8:	e00e      	b.n	8001ae8 <HAL_DMA_IRQHandler+0xb0>
 8001aca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ace:	e00b      	b.n	8001ae8 <HAL_DMA_IRQHandler+0xb0>
 8001ad0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ad4:	e008      	b.n	8001ae8 <HAL_DMA_IRQHandler+0xb0>
 8001ad6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ada:	e005      	b.n	8001ae8 <HAL_DMA_IRQHandler+0xb0>
 8001adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae0:	e002      	b.n	8001ae8 <HAL_DMA_IRQHandler+0xb0>
 8001ae2:	2340      	movs	r3, #64	; 0x40
 8001ae4:	e000      	b.n	8001ae8 <HAL_DMA_IRQHandler+0xb0>
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	4a55      	ldr	r2, [pc, #340]	; (8001c40 <HAL_DMA_IRQHandler+0x208>)
 8001aea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 8094 	beq.w	8001c1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001afe:	e08e      	b.n	8001c1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	2202      	movs	r2, #2
 8001b06:	409a      	lsls	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d056      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x186>
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d051      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0320 	and.w	r3, r3, #32
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10b      	bne.n	8001b40 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 020a 	bic.w	r2, r2, #10
 8001b36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a38      	ldr	r2, [pc, #224]	; (8001c28 <HAL_DMA_IRQHandler+0x1f0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d029      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x166>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a37      	ldr	r2, [pc, #220]	; (8001c2c <HAL_DMA_IRQHandler+0x1f4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d022      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x162>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a35      	ldr	r2, [pc, #212]	; (8001c30 <HAL_DMA_IRQHandler+0x1f8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01a      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x15c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a34      	ldr	r2, [pc, #208]	; (8001c34 <HAL_DMA_IRQHandler+0x1fc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d012      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x156>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a32      	ldr	r2, [pc, #200]	; (8001c38 <HAL_DMA_IRQHandler+0x200>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00a      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x150>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a31      	ldr	r2, [pc, #196]	; (8001c3c <HAL_DMA_IRQHandler+0x204>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d102      	bne.n	8001b82 <HAL_DMA_IRQHandler+0x14a>
 8001b7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b80:	e00e      	b.n	8001ba0 <HAL_DMA_IRQHandler+0x168>
 8001b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b86:	e00b      	b.n	8001ba0 <HAL_DMA_IRQHandler+0x168>
 8001b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b8c:	e008      	b.n	8001ba0 <HAL_DMA_IRQHandler+0x168>
 8001b8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b92:	e005      	b.n	8001ba0 <HAL_DMA_IRQHandler+0x168>
 8001b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b98:	e002      	b.n	8001ba0 <HAL_DMA_IRQHandler+0x168>
 8001b9a:	2320      	movs	r3, #32
 8001b9c:	e000      	b.n	8001ba0 <HAL_DMA_IRQHandler+0x168>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	4a27      	ldr	r2, [pc, #156]	; (8001c40 <HAL_DMA_IRQHandler+0x208>)
 8001ba2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d034      	beq.n	8001c1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bbc:	e02f      	b.n	8001c1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	2208      	movs	r2, #8
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d028      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x1e8>
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d023      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 020e 	bic.w	r2, r2, #14
 8001be6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	4798      	blx	r3
    }
  }
  return;
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
}
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40020008 	.word	0x40020008
 8001c2c:	4002001c 	.word	0x4002001c
 8001c30:	40020030 	.word	0x40020030
 8001c34:	40020044 	.word	0x40020044
 8001c38:	40020058 	.word	0x40020058
 8001c3c:	4002006c 	.word	0x4002006c
 8001c40:	40020000 	.word	0x40020000

08001c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b08b      	sub	sp, #44	; 0x2c
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c56:	e127      	b.n	8001ea8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	f040 8116 	bne.w	8001ea2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b12      	cmp	r3, #18
 8001c7c:	d034      	beq.n	8001ce8 <HAL_GPIO_Init+0xa4>
 8001c7e:	2b12      	cmp	r3, #18
 8001c80:	d80d      	bhi.n	8001c9e <HAL_GPIO_Init+0x5a>
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d02b      	beq.n	8001cde <HAL_GPIO_Init+0x9a>
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d804      	bhi.n	8001c94 <HAL_GPIO_Init+0x50>
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d031      	beq.n	8001cf2 <HAL_GPIO_Init+0xae>
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d01c      	beq.n	8001ccc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c92:	e048      	b.n	8001d26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d043      	beq.n	8001d20 <HAL_GPIO_Init+0xdc>
 8001c98:	2b11      	cmp	r3, #17
 8001c9a:	d01b      	beq.n	8001cd4 <HAL_GPIO_Init+0x90>
          break;
 8001c9c:	e043      	b.n	8001d26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c9e:	4a89      	ldr	r2, [pc, #548]	; (8001ec4 <HAL_GPIO_Init+0x280>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d026      	beq.n	8001cf2 <HAL_GPIO_Init+0xae>
 8001ca4:	4a87      	ldr	r2, [pc, #540]	; (8001ec4 <HAL_GPIO_Init+0x280>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d806      	bhi.n	8001cb8 <HAL_GPIO_Init+0x74>
 8001caa:	4a87      	ldr	r2, [pc, #540]	; (8001ec8 <HAL_GPIO_Init+0x284>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d020      	beq.n	8001cf2 <HAL_GPIO_Init+0xae>
 8001cb0:	4a86      	ldr	r2, [pc, #536]	; (8001ecc <HAL_GPIO_Init+0x288>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01d      	beq.n	8001cf2 <HAL_GPIO_Init+0xae>
          break;
 8001cb6:	e036      	b.n	8001d26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001cb8:	4a85      	ldr	r2, [pc, #532]	; (8001ed0 <HAL_GPIO_Init+0x28c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d019      	beq.n	8001cf2 <HAL_GPIO_Init+0xae>
 8001cbe:	4a85      	ldr	r2, [pc, #532]	; (8001ed4 <HAL_GPIO_Init+0x290>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d016      	beq.n	8001cf2 <HAL_GPIO_Init+0xae>
 8001cc4:	4a84      	ldr	r2, [pc, #528]	; (8001ed8 <HAL_GPIO_Init+0x294>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_GPIO_Init+0xae>
          break;
 8001cca:	e02c      	b.n	8001d26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	623b      	str	r3, [r7, #32]
          break;
 8001cd2:	e028      	b.n	8001d26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	623b      	str	r3, [r7, #32]
          break;
 8001cdc:	e023      	b.n	8001d26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	3308      	adds	r3, #8
 8001ce4:	623b      	str	r3, [r7, #32]
          break;
 8001ce6:	e01e      	b.n	8001d26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	330c      	adds	r3, #12
 8001cee:	623b      	str	r3, [r7, #32]
          break;
 8001cf0:	e019      	b.n	8001d26 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	623b      	str	r3, [r7, #32]
          break;
 8001cfe:	e012      	b.n	8001d26 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d08:	2308      	movs	r3, #8
 8001d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	611a      	str	r2, [r3, #16]
          break;
 8001d12:	e008      	b.n	8001d26 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d14:	2308      	movs	r3, #8
 8001d16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	615a      	str	r2, [r3, #20]
          break;
 8001d1e:	e002      	b.n	8001d26 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
          break;
 8001d24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2bff      	cmp	r3, #255	; 0xff
 8001d2a:	d801      	bhi.n	8001d30 <HAL_GPIO_Init+0xec>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	e001      	b.n	8001d34 <HAL_GPIO_Init+0xf0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3304      	adds	r3, #4
 8001d34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2bff      	cmp	r3, #255	; 0xff
 8001d3a:	d802      	bhi.n	8001d42 <HAL_GPIO_Init+0xfe>
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	e002      	b.n	8001d48 <HAL_GPIO_Init+0x104>
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	3b08      	subs	r3, #8
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	210f      	movs	r1, #15
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	401a      	ands	r2, r3
 8001d5a:	6a39      	ldr	r1, [r7, #32]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	431a      	orrs	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8096 	beq.w	8001ea2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d76:	4b59      	ldr	r3, [pc, #356]	; (8001edc <HAL_GPIO_Init+0x298>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	4a58      	ldr	r2, [pc, #352]	; (8001edc <HAL_GPIO_Init+0x298>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6193      	str	r3, [r2, #24]
 8001d82:	4b56      	ldr	r3, [pc, #344]	; (8001edc <HAL_GPIO_Init+0x298>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d8e:	4a54      	ldr	r2, [pc, #336]	; (8001ee0 <HAL_GPIO_Init+0x29c>)
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	089b      	lsrs	r3, r3, #2
 8001d94:	3302      	adds	r3, #2
 8001d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4013      	ands	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4b      	ldr	r2, [pc, #300]	; (8001ee4 <HAL_GPIO_Init+0x2a0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0x19e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4a      	ldr	r2, [pc, #296]	; (8001ee8 <HAL_GPIO_Init+0x2a4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00d      	beq.n	8001dde <HAL_GPIO_Init+0x19a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a49      	ldr	r2, [pc, #292]	; (8001eec <HAL_GPIO_Init+0x2a8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d007      	beq.n	8001dda <HAL_GPIO_Init+0x196>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a48      	ldr	r2, [pc, #288]	; (8001ef0 <HAL_GPIO_Init+0x2ac>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_GPIO_Init+0x192>
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x1a0>
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	e004      	b.n	8001de4 <HAL_GPIO_Init+0x1a0>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_Init+0x1a0>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_GPIO_Init+0x1a0>
 8001de2:	2300      	movs	r3, #0
 8001de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de6:	f002 0203 	and.w	r2, r2, #3
 8001dea:	0092      	lsls	r2, r2, #2
 8001dec:	4093      	lsls	r3, r2
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001df4:	493a      	ldr	r1, [pc, #232]	; (8001ee0 <HAL_GPIO_Init+0x29c>)
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e0e:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4938      	ldr	r1, [pc, #224]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]
 8001e1a:	e006      	b.n	8001e2a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e1c:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	4933      	ldr	r1, [pc, #204]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d006      	beq.n	8001e44 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e36:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	492e      	ldr	r1, [pc, #184]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	604b      	str	r3, [r1, #4]
 8001e42:	e006      	b.n	8001e52 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e44:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	4929      	ldr	r1, [pc, #164]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d006      	beq.n	8001e6c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e5e:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	4924      	ldr	r1, [pc, #144]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
 8001e6a:	e006      	b.n	8001e7a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	491f      	ldr	r1, [pc, #124]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	491a      	ldr	r1, [pc, #104]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60cb      	str	r3, [r1, #12]
 8001e92:	e006      	b.n	8001ea2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e94:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	4915      	ldr	r1, [pc, #84]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f47f aed0 	bne.w	8001c58 <HAL_GPIO_Init+0x14>
  }
}
 8001eb8:	bf00      	nop
 8001eba:	372c      	adds	r7, #44	; 0x2c
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	10210000 	.word	0x10210000
 8001ec8:	10110000 	.word	0x10110000
 8001ecc:	10120000 	.word	0x10120000
 8001ed0:	10310000 	.word	0x10310000
 8001ed4:	10320000 	.word	0x10320000
 8001ed8:	10220000 	.word	0x10220000
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	40010800 	.word	0x40010800
 8001ee8:	40010c00 	.word	0x40010c00
 8001eec:	40011000 	.word	0x40011000
 8001ef0:	40011400 	.word	0x40011400
 8001ef4:	40010400 	.word	0x40010400

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e26c      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8087 	beq.w	8002026 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f18:	4b92      	ldr	r3, [pc, #584]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d00c      	beq.n	8001f3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f24:	4b8f      	ldr	r3, [pc, #572]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d112      	bne.n	8001f56 <HAL_RCC_OscConfig+0x5e>
 8001f30:	4b8c      	ldr	r3, [pc, #560]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3c:	d10b      	bne.n	8001f56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3e:	4b89      	ldr	r3, [pc, #548]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d06c      	beq.n	8002024 <HAL_RCC_OscConfig+0x12c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d168      	bne.n	8002024 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e246      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x76>
 8001f60:	4b80      	ldr	r3, [pc, #512]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a7f      	ldr	r2, [pc, #508]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	e02e      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x98>
 8001f76:	4b7b      	ldr	r3, [pc, #492]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a7a      	ldr	r2, [pc, #488]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b78      	ldr	r3, [pc, #480]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a77      	ldr	r2, [pc, #476]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e01d      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0xbc>
 8001f9a:	4b72      	ldr	r3, [pc, #456]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a71      	ldr	r2, [pc, #452]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6e      	ldr	r2, [pc, #440]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	e00b      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001fb4:	4b6b      	ldr	r3, [pc, #428]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a6a      	ldr	r2, [pc, #424]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b68      	ldr	r3, [pc, #416]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a67      	ldr	r2, [pc, #412]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d013      	beq.n	8001ffc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7fe fcc2 	bl	800095c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7fe fcbe 	bl	800095c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1fa      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0xe4>
 8001ffa:	e014      	b.n	8002026 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fcae 	bl	800095c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002004:	f7fe fcaa 	bl	800095c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	; 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e1e6      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	4b53      	ldr	r3, [pc, #332]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x10c>
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d063      	beq.n	80020fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002032:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00b      	beq.n	8002056 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800203e:	4b49      	ldr	r3, [pc, #292]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b08      	cmp	r3, #8
 8002048:	d11c      	bne.n	8002084 <HAL_RCC_OscConfig+0x18c>
 800204a:	4b46      	ldr	r3, [pc, #280]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d116      	bne.n	8002084 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002056:	4b43      	ldr	r3, [pc, #268]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_RCC_OscConfig+0x176>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d001      	beq.n	800206e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e1ba      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4939      	ldr	r1, [pc, #228]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002082:	e03a      	b.n	80020fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d020      	beq.n	80020ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208c:	4b36      	ldr	r3, [pc, #216]	; (8002168 <HAL_RCC_OscConfig+0x270>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7fe fc63 	bl	800095c <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209a:	f7fe fc5f 	bl	800095c <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e19b      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ac:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4927      	ldr	r1, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]
 80020cc:	e015      	b.n	80020fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ce:	4b26      	ldr	r3, [pc, #152]	; (8002168 <HAL_RCC_OscConfig+0x270>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7fe fc42 	bl	800095c <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020dc:	f7fe fc3e 	bl	800095c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e17a      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d03a      	beq.n	800217c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d019      	beq.n	8002142 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_RCC_OscConfig+0x274>)
 8002110:	2201      	movs	r2, #1
 8002112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002114:	f7fe fc22 	bl	800095c <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211c:	f7fe fc1e 	bl	800095c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e15a      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800213a:	2001      	movs	r0, #1
 800213c:	f000 fada 	bl	80026f4 <RCC_Delay>
 8002140:	e01c      	b.n	800217c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_RCC_OscConfig+0x274>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002148:	f7fe fc08 	bl	800095c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214e:	e00f      	b.n	8002170 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002150:	f7fe fc04 	bl	800095c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d908      	bls.n	8002170 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e140      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	42420000 	.word	0x42420000
 800216c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	4b9e      	ldr	r3, [pc, #632]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e9      	bne.n	8002150 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a6 	beq.w	80022d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218e:	4b97      	ldr	r3, [pc, #604]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10d      	bne.n	80021b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4b94      	ldr	r3, [pc, #592]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4a93      	ldr	r2, [pc, #588]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	61d3      	str	r3, [r2, #28]
 80021a6:	4b91      	ldr	r3, [pc, #580]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b2:	2301      	movs	r3, #1
 80021b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	4b8e      	ldr	r3, [pc, #568]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c2:	4b8b      	ldr	r3, [pc, #556]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a8a      	ldr	r2, [pc, #552]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ce:	f7fe fbc5 	bl	800095c <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7fe fbc1 	bl	800095c <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b64      	cmp	r3, #100	; 0x64
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0fd      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e8:	4b81      	ldr	r3, [pc, #516]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x312>
 80021fc:	4b7b      	ldr	r3, [pc, #492]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4a7a      	ldr	r2, [pc, #488]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6213      	str	r3, [r2, #32]
 8002208:	e02d      	b.n	8002266 <HAL_RCC_OscConfig+0x36e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x334>
 8002212:	4b76      	ldr	r3, [pc, #472]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a75      	ldr	r2, [pc, #468]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6213      	str	r3, [r2, #32]
 800221e:	4b73      	ldr	r3, [pc, #460]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a72      	ldr	r2, [pc, #456]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	6213      	str	r3, [r2, #32]
 800222a:	e01c      	b.n	8002266 <HAL_RCC_OscConfig+0x36e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b05      	cmp	r3, #5
 8002232:	d10c      	bne.n	800224e <HAL_RCC_OscConfig+0x356>
 8002234:	4b6d      	ldr	r3, [pc, #436]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a6c      	ldr	r2, [pc, #432]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	6213      	str	r3, [r2, #32]
 8002240:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a69      	ldr	r2, [pc, #420]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6213      	str	r3, [r2, #32]
 800224c:	e00b      	b.n	8002266 <HAL_RCC_OscConfig+0x36e>
 800224e:	4b67      	ldr	r3, [pc, #412]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4a66      	ldr	r2, [pc, #408]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	6213      	str	r3, [r2, #32]
 800225a:	4b64      	ldr	r3, [pc, #400]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a63      	ldr	r2, [pc, #396]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002260:	f023 0304 	bic.w	r3, r3, #4
 8002264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d015      	beq.n	800229a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226e:	f7fe fb75 	bl	800095c <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	e00a      	b.n	800228c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002276:	f7fe fb71 	bl	800095c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	; 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0ab      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228c:	4b57      	ldr	r3, [pc, #348]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ee      	beq.n	8002276 <HAL_RCC_OscConfig+0x37e>
 8002298:	e014      	b.n	80022c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229a:	f7fe fb5f 	bl	800095c <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe fb5b 	bl	800095c <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e095      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b8:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ee      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022c4:	7dfb      	ldrb	r3, [r7, #23]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d105      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ca:	4b48      	ldr	r3, [pc, #288]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a47      	ldr	r2, [pc, #284]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8081 	beq.w	80023e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e0:	4b42      	ldr	r3, [pc, #264]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d061      	beq.n	80023b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d146      	bne.n	8002382 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f4:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <HAL_RCC_OscConfig+0x4fc>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7fe fb2f 	bl	800095c <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002302:	f7fe fb2b 	bl	800095c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e067      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002314:	4b35      	ldr	r3, [pc, #212]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f0      	bne.n	8002302 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002328:	d108      	bne.n	800233c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800232a:	4b30      	ldr	r3, [pc, #192]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	492d      	ldr	r1, [pc, #180]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233c:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a19      	ldr	r1, [r3, #32]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	430b      	orrs	r3, r1
 800234e:	4927      	ldr	r1, [pc, #156]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002354:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x4fc>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7fe faff 	bl	800095c <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002362:	f7fe fafb 	bl	800095c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e037      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x46a>
 8002380:	e02f      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_RCC_OscConfig+0x4fc>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7fe fae8 	bl	800095c <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fae4 	bl	800095c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e020      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x498>
 80023ae:	e018      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e013      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40007000 	.word	0x40007000
 80023f4:	42420060 	.word	0x42420060

080023f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0d0      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d910      	bls.n	800243c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b67      	ldr	r3, [pc, #412]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 0207 	bic.w	r2, r3, #7
 8002422:	4965      	ldr	r1, [pc, #404]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b63      	ldr	r3, [pc, #396]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0b8      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002454:	4b59      	ldr	r3, [pc, #356]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a58      	ldr	r2, [pc, #352]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800245e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800246c:	4b53      	ldr	r3, [pc, #332]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a52      	ldr	r2, [pc, #328]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002476:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002478:	4b50      	ldr	r3, [pc, #320]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	494d      	ldr	r1, [pc, #308]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d040      	beq.n	8002518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d115      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e07f      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b6:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e073      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c6:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06b      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4936      	ldr	r1, [pc, #216]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e8:	f7fe fa38 	bl	800095c <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7fe fa34 	bl	800095c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e053      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002518:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d210      	bcs.n	8002548 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 0207 	bic.w	r2, r3, #7
 800252e:	4922      	ldr	r1, [pc, #136]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e032      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4916      	ldr	r1, [pc, #88]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	490e      	ldr	r1, [pc, #56]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002586:	f000 f821 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 800258a:	4601      	mov	r1, r0
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002598:	5cd3      	ldrb	r3, [r2, r3]
 800259a:	fa21 f303 	lsr.w	r3, r1, r3
 800259e:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1cc>)
 80025a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_ClockConfig+0x1d0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe f996 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40022000 	.word	0x40022000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08003988 	.word	0x08003988
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	b490      	push	{r4, r7}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025d2:	4b2a      	ldr	r3, [pc, #168]	; (800267c <HAL_RCC_GetSysClockFreq+0xb0>)
 80025d4:	1d3c      	adds	r4, r7, #4
 80025d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b04      	cmp	r3, #4
 8002604:	d002      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x40>
 8002606:	2b08      	cmp	r3, #8
 8002608:	d003      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0x46>
 800260a:	e02d      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800260c:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800260e:	623b      	str	r3, [r7, #32]
      break;
 8002610:	e02d      	b.n	800266e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	0c9b      	lsrs	r3, r3, #18
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800261e:	4413      	add	r3, r2
 8002620:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002624:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0c5b      	lsrs	r3, r3, #17
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800263e:	4413      	add	r3, r2
 8002640:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002644:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	4a0f      	ldr	r2, [pc, #60]	; (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800264a:	fb02 f203 	mul.w	r2, r2, r3
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
 8002656:	e004      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	4a0c      	ldr	r2, [pc, #48]	; (800268c <HAL_RCC_GetSysClockFreq+0xc0>)
 800265c:	fb02 f303 	mul.w	r3, r2, r3
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	623b      	str	r3, [r7, #32]
      break;
 8002666:	e002      	b.n	800266e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800266a:	623b      	str	r3, [r7, #32]
      break;
 800266c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266e:	6a3b      	ldr	r3, [r7, #32]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3728      	adds	r7, #40	; 0x28
 8002674:	46bd      	mov	sp, r7
 8002676:	bc90      	pop	{r4, r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	08003960 	.word	0x08003960
 8002680:	08003970 	.word	0x08003970
 8002684:	40021000 	.word	0x40021000
 8002688:	007a1200 	.word	0x007a1200
 800268c:	003d0900 	.word	0x003d0900

08002690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002694:	4b02      	ldr	r3, [pc, #8]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	20000000 	.word	0x20000000

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026a8:	f7ff fff2 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026ac:	4601      	mov	r1, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	08003998 	.word	0x08003998

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d0:	f7ff ffde 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026d4:	4601      	mov	r1, r0
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	0adb      	lsrs	r3, r3, #11
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4a03      	ldr	r2, [pc, #12]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e2:	5cd3      	ldrb	r3, [r2, r3]
 80026e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	08003998 	.word	0x08003998

080026f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <RCC_Delay+0x34>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <RCC_Delay+0x38>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0a5b      	lsrs	r3, r3, #9
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002710:	bf00      	nop
  }
  while (Delay --);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1e5a      	subs	r2, r3, #1
 8002716:	60fa      	str	r2, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f9      	bne.n	8002710 <RCC_Delay+0x1c>
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000000 	.word	0x20000000
 800272c:	10624dd3 	.word	0x10624dd3

08002730 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d07d      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002750:	4b4f      	ldr	r3, [pc, #316]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10d      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275c:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	4a4b      	ldr	r2, [pc, #300]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002766:	61d3      	str	r3, [r2, #28]
 8002768:	4b49      	ldr	r3, [pc, #292]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002774:	2301      	movs	r3, #1
 8002776:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	4b46      	ldr	r3, [pc, #280]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d118      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002784:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a42      	ldr	r2, [pc, #264]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800278a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002790:	f7fe f8e4 	bl	800095c <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002796:	e008      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002798:	f7fe f8e0 	bl	800095c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e06d      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027b6:	4b36      	ldr	r3, [pc, #216]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d02e      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d027      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027d4:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027de:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027e4:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027ea:	4a29      	ldr	r2, [pc, #164]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d014      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fa:	f7fe f8af 	bl	800095c <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fe f8ab 	bl	800095c <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e036      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ee      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002824:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4917      	ldr	r1, [pc, #92]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002832:	4313      	orrs	r3, r2
 8002834:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	4a13      	ldr	r2, [pc, #76]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002846:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	490b      	ldr	r1, [pc, #44]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002872:	4b07      	ldr	r3, [pc, #28]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	4904      	ldr	r1, [pc, #16]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	40007000 	.word	0x40007000
 8002898:	42420440 	.word	0x42420440

0800289c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b08d      	sub	sp, #52	; 0x34
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028a4:	4b55      	ldr	r3, [pc, #340]	; (80029fc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80028a6:	f107 040c 	add.w	r4, r7, #12
 80028aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028b0:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ba:	2300      	movs	r3, #0
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	2300      	movs	r3, #0
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d07f      	beq.n	80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	d002      	beq.n	80028da <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d048      	beq.n	800296a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80028d8:	e08b      	b.n	80029f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80028da:	4b4a      	ldr	r3, [pc, #296]	; (8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80028e0:	4b48      	ldr	r3, [pc, #288]	; (8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d07f      	beq.n	80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	0c9b      	lsrs	r3, r3, #18
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80028f8:	4413      	add	r3, r2
 80028fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028fe:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d018      	beq.n	800293c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800290a:	4b3e      	ldr	r3, [pc, #248]	; (8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	0c5b      	lsrs	r3, r3, #17
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002918:	4413      	add	r3, r2
 800291a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800292a:	4a37      	ldr	r2, [pc, #220]	; (8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	fb02 f303 	mul.w	r3, r2, r3
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293a:	e004      	b.n	8002946 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	4a33      	ldr	r2, [pc, #204]	; (8002a0c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002940:	fb02 f303 	mul.w	r3, r2, r3
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002946:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002952:	d102      	bne.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002958:	e048      	b.n	80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4a2c      	ldr	r2, [pc, #176]	; (8002a10 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002968:	e040      	b.n	80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800296a:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297a:	d108      	bne.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
 800298c:	e01f      	b.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002998:	d109      	bne.n	80029ae <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80029a6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ac:	e00f      	b.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029b8:	d11a      	bne.n	80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d014      	beq.n	80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80029c6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029cc:	e010      	b.n	80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80029ce:	e00f      	b.n	80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80029d0:	f7ff fe7c 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	0b9b      	lsrs	r3, r3, #14
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	3301      	adds	r3, #1
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029ea:	e002      	b.n	80029f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80029ec:	bf00      	nop
 80029ee:	e000      	b.n	80029f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80029f0:	bf00      	nop
    }
  }
  return (frequency);
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3734      	adds	r7, #52	; 0x34
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd90      	pop	{r4, r7, pc}
 80029fc:	08003974 	.word	0x08003974
 8002a00:	08003984 	.word	0x08003984
 8002a04:	40021000 	.word	0x40021000
 8002a08:	007a1200 	.word	0x007a1200
 8002a0c:	003d0900 	.word	0x003d0900
 8002a10:	aaaaaaab 	.word	0xaaaaaaab

08002a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e03f      	b.n	8002aa6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fd fdee 	bl	800061c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2224      	movs	r2, #36	; 0x24
 8002a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fa97 	bl	8002f8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b085      	sub	sp, #20
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	d130      	bne.n	8002b2a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_UART_Transmit_IT+0x26>
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e029      	b.n	8002b2c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Transmit_IT+0x38>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e022      	b.n	8002b2c <HAL_UART_Transmit_IT+0x7e>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	88fa      	ldrh	r2, [r7, #6]
 8002af8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	88fa      	ldrh	r2, [r7, #6]
 8002afe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2221      	movs	r2, #33	; 0x21
 8002b0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b24:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e000      	b.n	8002b2c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
  }
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10d      	bne.n	8002b8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_UART_IRQHandler+0x52>
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f982 	bl	8002e8c <UART_Receive_IT>
      return;
 8002b88:	e0d1      	b.n	8002d2e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80b0 	beq.w	8002cf2 <HAL_UART_IRQHandler+0x1ba>
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <HAL_UART_IRQHandler+0x70>
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80a5 	beq.w	8002cf2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x90>
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_UART_IRQHandler+0xb0>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be0:	f043 0202 	orr.w	r2, r3, #2
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_UART_IRQHandler+0xd0>
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c00:	f043 0204 	orr.w	r2, r3, #4
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00f      	beq.n	8002c32 <HAL_UART_IRQHandler+0xfa>
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d104      	bne.n	8002c26 <HAL_UART_IRQHandler+0xee>
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	f043 0208 	orr.w	r2, r3, #8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d078      	beq.n	8002d2c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <HAL_UART_IRQHandler+0x11c>
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f91c 	bl	8002e8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	bf14      	ite	ne
 8002c62:	2301      	movne	r3, #1
 8002c64:	2300      	moveq	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d102      	bne.n	8002c7c <HAL_UART_IRQHandler+0x144>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d031      	beq.n	8002ce0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f86d 	bl	8002d5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d023      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c9e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cac:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <HAL_UART_IRQHandler+0x1fc>)
 8002cae:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe fe49 	bl	800194c <HAL_DMA_Abort_IT>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d016      	beq.n	8002cee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cce:	e00e      	b.n	8002cee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f83a 	bl	8002d4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd6:	e00a      	b.n	8002cee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f836 	bl	8002d4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cde:	e006      	b.n	8002cee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f832 	bl	8002d4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002cec:	e01e      	b.n	8002d2c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cee:	bf00      	nop
    return;
 8002cf0:	e01c      	b.n	8002d2c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_UART_IRQHandler+0x1d6>
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f859 	bl	8002dbe <UART_Transmit_IT>
    return;
 8002d0c:	e00f      	b.n	8002d2e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_UART_IRQHandler+0x1f6>
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f89a 	bl	8002e5c <UART_EndTransmit_IT>
    return;
 8002d28:	bf00      	nop
 8002d2a:	e000      	b.n	8002d2e <HAL_UART_IRQHandler+0x1f6>
    return;
 8002d2c:	bf00      	nop
  }
}
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	08002d97 	.word	0x08002d97

08002d38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr

08002d96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7ff ffca 	bl	8002d4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b21      	cmp	r3, #33	; 0x21
 8002dd0:	d13e      	bne.n	8002e50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dda:	d114      	bne.n	8002e06 <UART_Transmit_IT+0x48>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d110      	bne.n	8002e06 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002df8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	1c9a      	adds	r2, r3, #2
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	621a      	str	r2, [r3, #32]
 8002e04:	e008      	b.n	8002e18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	1c59      	adds	r1, r3, #1
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6211      	str	r1, [r2, #32]
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4619      	mov	r1, r3
 8002e26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10f      	bne.n	8002e4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e000      	b.n	8002e52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7fd fb07 	bl	8000490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b22      	cmp	r3, #34	; 0x22
 8002e9e:	d170      	bne.n	8002f82 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea8:	d117      	bne.n	8002eda <UART_Receive_IT+0x4e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d113      	bne.n	8002eda <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	1c9a      	adds	r2, r3, #2
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ed8:	e026      	b.n	8002f28 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eec:	d007      	beq.n	8002efe <UART_Receive_IT+0x72>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10a      	bne.n	8002f0c <UART_Receive_IT+0x80>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	e008      	b.n	8002f1e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4619      	mov	r1, r3
 8002f36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d120      	bne.n	8002f7e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0220 	bic.w	r2, r2, #32
 8002f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff fedf 	bl	8002d38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e002      	b.n	8002f84 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
  }
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fc6:	f023 030c 	bic.w	r3, r3, #12
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a2c      	ldr	r2, [pc, #176]	; (80030a0 <UART_SetConfig+0x114>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d103      	bne.n	8002ffc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ff4:	f7ff fb6a 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	e002      	b.n	8003002 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ffc:	f7ff fb52 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8003000:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	009a      	lsls	r2, r3, #2
 800300c:	441a      	add	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	4a22      	ldr	r2, [pc, #136]	; (80030a4 <UART_SetConfig+0x118>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	0119      	lsls	r1, r3, #4
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	009a      	lsls	r2, r3, #2
 800302c:	441a      	add	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	fbb2 f2f3 	udiv	r2, r2, r3
 8003038:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <UART_SetConfig+0x118>)
 800303a:	fba3 0302 	umull	r0, r3, r3, r2
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	2064      	movs	r0, #100	; 0x64
 8003042:	fb00 f303 	mul.w	r3, r0, r3
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	3332      	adds	r3, #50	; 0x32
 800304c:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <UART_SetConfig+0x118>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003058:	4419      	add	r1, r3
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	009a      	lsls	r2, r3, #2
 8003064:	441a      	add	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <UART_SetConfig+0x118>)
 8003072:	fba3 0302 	umull	r0, r3, r3, r2
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2064      	movs	r0, #100	; 0x64
 800307a:	fb00 f303 	mul.w	r3, r0, r3
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	3332      	adds	r3, #50	; 0x32
 8003084:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <UART_SetConfig+0x118>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	f003 020f 	and.w	r2, r3, #15
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	440a      	add	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40013800 	.word	0x40013800
 80030a4:	51eb851f 	.word	0x51eb851f

080030a8 <__errno>:
 80030a8:	4b01      	ldr	r3, [pc, #4]	; (80030b0 <__errno+0x8>)
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	2000000c 	.word	0x2000000c

080030b4 <__libc_init_array>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	2500      	movs	r5, #0
 80030b8:	4e0c      	ldr	r6, [pc, #48]	; (80030ec <__libc_init_array+0x38>)
 80030ba:	4c0d      	ldr	r4, [pc, #52]	; (80030f0 <__libc_init_array+0x3c>)
 80030bc:	1ba4      	subs	r4, r4, r6
 80030be:	10a4      	asrs	r4, r4, #2
 80030c0:	42a5      	cmp	r5, r4
 80030c2:	d109      	bne.n	80030d8 <__libc_init_array+0x24>
 80030c4:	f000 fc34 	bl	8003930 <_init>
 80030c8:	2500      	movs	r5, #0
 80030ca:	4e0a      	ldr	r6, [pc, #40]	; (80030f4 <__libc_init_array+0x40>)
 80030cc:	4c0a      	ldr	r4, [pc, #40]	; (80030f8 <__libc_init_array+0x44>)
 80030ce:	1ba4      	subs	r4, r4, r6
 80030d0:	10a4      	asrs	r4, r4, #2
 80030d2:	42a5      	cmp	r5, r4
 80030d4:	d105      	bne.n	80030e2 <__libc_init_array+0x2e>
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030dc:	4798      	blx	r3
 80030de:	3501      	adds	r5, #1
 80030e0:	e7ee      	b.n	80030c0 <__libc_init_array+0xc>
 80030e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030e6:	4798      	blx	r3
 80030e8:	3501      	adds	r5, #1
 80030ea:	e7f2      	b.n	80030d2 <__libc_init_array+0x1e>
 80030ec:	080039d4 	.word	0x080039d4
 80030f0:	080039d4 	.word	0x080039d4
 80030f4:	080039d4 	.word	0x080039d4
 80030f8:	080039d8 	.word	0x080039d8

080030fc <memset>:
 80030fc:	4603      	mov	r3, r0
 80030fe:	4402      	add	r2, r0
 8003100:	4293      	cmp	r3, r2
 8003102:	d100      	bne.n	8003106 <memset+0xa>
 8003104:	4770      	bx	lr
 8003106:	f803 1b01 	strb.w	r1, [r3], #1
 800310a:	e7f9      	b.n	8003100 <memset+0x4>

0800310c <siprintf>:
 800310c:	b40e      	push	{r1, r2, r3}
 800310e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003112:	b500      	push	{lr}
 8003114:	b09c      	sub	sp, #112	; 0x70
 8003116:	ab1d      	add	r3, sp, #116	; 0x74
 8003118:	9002      	str	r0, [sp, #8]
 800311a:	9006      	str	r0, [sp, #24]
 800311c:	9107      	str	r1, [sp, #28]
 800311e:	9104      	str	r1, [sp, #16]
 8003120:	4808      	ldr	r0, [pc, #32]	; (8003144 <siprintf+0x38>)
 8003122:	4909      	ldr	r1, [pc, #36]	; (8003148 <siprintf+0x3c>)
 8003124:	f853 2b04 	ldr.w	r2, [r3], #4
 8003128:	9105      	str	r1, [sp, #20]
 800312a:	6800      	ldr	r0, [r0, #0]
 800312c:	a902      	add	r1, sp, #8
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	f000 f866 	bl	8003200 <_svfiprintf_r>
 8003134:	2200      	movs	r2, #0
 8003136:	9b02      	ldr	r3, [sp, #8]
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	b01c      	add	sp, #112	; 0x70
 800313c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003140:	b003      	add	sp, #12
 8003142:	4770      	bx	lr
 8003144:	2000000c 	.word	0x2000000c
 8003148:	ffff0208 	.word	0xffff0208

0800314c <__ssputs_r>:
 800314c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003150:	688e      	ldr	r6, [r1, #8]
 8003152:	4682      	mov	sl, r0
 8003154:	429e      	cmp	r6, r3
 8003156:	460c      	mov	r4, r1
 8003158:	4690      	mov	r8, r2
 800315a:	4699      	mov	r9, r3
 800315c:	d837      	bhi.n	80031ce <__ssputs_r+0x82>
 800315e:	898a      	ldrh	r2, [r1, #12]
 8003160:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003164:	d031      	beq.n	80031ca <__ssputs_r+0x7e>
 8003166:	2302      	movs	r3, #2
 8003168:	6825      	ldr	r5, [r4, #0]
 800316a:	6909      	ldr	r1, [r1, #16]
 800316c:	1a6f      	subs	r7, r5, r1
 800316e:	6965      	ldr	r5, [r4, #20]
 8003170:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003174:	fb95 f5f3 	sdiv	r5, r5, r3
 8003178:	f109 0301 	add.w	r3, r9, #1
 800317c:	443b      	add	r3, r7
 800317e:	429d      	cmp	r5, r3
 8003180:	bf38      	it	cc
 8003182:	461d      	movcc	r5, r3
 8003184:	0553      	lsls	r3, r2, #21
 8003186:	d530      	bpl.n	80031ea <__ssputs_r+0x9e>
 8003188:	4629      	mov	r1, r5
 800318a:	f000 fb37 	bl	80037fc <_malloc_r>
 800318e:	4606      	mov	r6, r0
 8003190:	b950      	cbnz	r0, 80031a8 <__ssputs_r+0x5c>
 8003192:	230c      	movs	r3, #12
 8003194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003198:	f8ca 3000 	str.w	r3, [sl]
 800319c:	89a3      	ldrh	r3, [r4, #12]
 800319e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031a2:	81a3      	strh	r3, [r4, #12]
 80031a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a8:	463a      	mov	r2, r7
 80031aa:	6921      	ldr	r1, [r4, #16]
 80031ac:	f000 fab6 	bl	800371c <memcpy>
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ba:	81a3      	strh	r3, [r4, #12]
 80031bc:	6126      	str	r6, [r4, #16]
 80031be:	443e      	add	r6, r7
 80031c0:	6026      	str	r6, [r4, #0]
 80031c2:	464e      	mov	r6, r9
 80031c4:	6165      	str	r5, [r4, #20]
 80031c6:	1bed      	subs	r5, r5, r7
 80031c8:	60a5      	str	r5, [r4, #8]
 80031ca:	454e      	cmp	r6, r9
 80031cc:	d900      	bls.n	80031d0 <__ssputs_r+0x84>
 80031ce:	464e      	mov	r6, r9
 80031d0:	4632      	mov	r2, r6
 80031d2:	4641      	mov	r1, r8
 80031d4:	6820      	ldr	r0, [r4, #0]
 80031d6:	f000 faac 	bl	8003732 <memmove>
 80031da:	68a3      	ldr	r3, [r4, #8]
 80031dc:	2000      	movs	r0, #0
 80031de:	1b9b      	subs	r3, r3, r6
 80031e0:	60a3      	str	r3, [r4, #8]
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	441e      	add	r6, r3
 80031e6:	6026      	str	r6, [r4, #0]
 80031e8:	e7dc      	b.n	80031a4 <__ssputs_r+0x58>
 80031ea:	462a      	mov	r2, r5
 80031ec:	f000 fb60 	bl	80038b0 <_realloc_r>
 80031f0:	4606      	mov	r6, r0
 80031f2:	2800      	cmp	r0, #0
 80031f4:	d1e2      	bne.n	80031bc <__ssputs_r+0x70>
 80031f6:	6921      	ldr	r1, [r4, #16]
 80031f8:	4650      	mov	r0, sl
 80031fa:	f000 fab3 	bl	8003764 <_free_r>
 80031fe:	e7c8      	b.n	8003192 <__ssputs_r+0x46>

08003200 <_svfiprintf_r>:
 8003200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003204:	461d      	mov	r5, r3
 8003206:	898b      	ldrh	r3, [r1, #12]
 8003208:	b09d      	sub	sp, #116	; 0x74
 800320a:	061f      	lsls	r7, r3, #24
 800320c:	4680      	mov	r8, r0
 800320e:	460c      	mov	r4, r1
 8003210:	4616      	mov	r6, r2
 8003212:	d50f      	bpl.n	8003234 <_svfiprintf_r+0x34>
 8003214:	690b      	ldr	r3, [r1, #16]
 8003216:	b96b      	cbnz	r3, 8003234 <_svfiprintf_r+0x34>
 8003218:	2140      	movs	r1, #64	; 0x40
 800321a:	f000 faef 	bl	80037fc <_malloc_r>
 800321e:	6020      	str	r0, [r4, #0]
 8003220:	6120      	str	r0, [r4, #16]
 8003222:	b928      	cbnz	r0, 8003230 <_svfiprintf_r+0x30>
 8003224:	230c      	movs	r3, #12
 8003226:	f8c8 3000 	str.w	r3, [r8]
 800322a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800322e:	e0c8      	b.n	80033c2 <_svfiprintf_r+0x1c2>
 8003230:	2340      	movs	r3, #64	; 0x40
 8003232:	6163      	str	r3, [r4, #20]
 8003234:	2300      	movs	r3, #0
 8003236:	9309      	str	r3, [sp, #36]	; 0x24
 8003238:	2320      	movs	r3, #32
 800323a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800323e:	2330      	movs	r3, #48	; 0x30
 8003240:	f04f 0b01 	mov.w	fp, #1
 8003244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003248:	9503      	str	r5, [sp, #12]
 800324a:	4637      	mov	r7, r6
 800324c:	463d      	mov	r5, r7
 800324e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003252:	b10b      	cbz	r3, 8003258 <_svfiprintf_r+0x58>
 8003254:	2b25      	cmp	r3, #37	; 0x25
 8003256:	d13e      	bne.n	80032d6 <_svfiprintf_r+0xd6>
 8003258:	ebb7 0a06 	subs.w	sl, r7, r6
 800325c:	d00b      	beq.n	8003276 <_svfiprintf_r+0x76>
 800325e:	4653      	mov	r3, sl
 8003260:	4632      	mov	r2, r6
 8003262:	4621      	mov	r1, r4
 8003264:	4640      	mov	r0, r8
 8003266:	f7ff ff71 	bl	800314c <__ssputs_r>
 800326a:	3001      	adds	r0, #1
 800326c:	f000 80a4 	beq.w	80033b8 <_svfiprintf_r+0x1b8>
 8003270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003272:	4453      	add	r3, sl
 8003274:	9309      	str	r3, [sp, #36]	; 0x24
 8003276:	783b      	ldrb	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 809d 	beq.w	80033b8 <_svfiprintf_r+0x1b8>
 800327e:	2300      	movs	r3, #0
 8003280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003288:	9304      	str	r3, [sp, #16]
 800328a:	9307      	str	r3, [sp, #28]
 800328c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003290:	931a      	str	r3, [sp, #104]	; 0x68
 8003292:	462f      	mov	r7, r5
 8003294:	2205      	movs	r2, #5
 8003296:	f817 1b01 	ldrb.w	r1, [r7], #1
 800329a:	4850      	ldr	r0, [pc, #320]	; (80033dc <_svfiprintf_r+0x1dc>)
 800329c:	f000 fa30 	bl	8003700 <memchr>
 80032a0:	9b04      	ldr	r3, [sp, #16]
 80032a2:	b9d0      	cbnz	r0, 80032da <_svfiprintf_r+0xda>
 80032a4:	06d9      	lsls	r1, r3, #27
 80032a6:	bf44      	itt	mi
 80032a8:	2220      	movmi	r2, #32
 80032aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032ae:	071a      	lsls	r2, r3, #28
 80032b0:	bf44      	itt	mi
 80032b2:	222b      	movmi	r2, #43	; 0x2b
 80032b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032b8:	782a      	ldrb	r2, [r5, #0]
 80032ba:	2a2a      	cmp	r2, #42	; 0x2a
 80032bc:	d015      	beq.n	80032ea <_svfiprintf_r+0xea>
 80032be:	462f      	mov	r7, r5
 80032c0:	2000      	movs	r0, #0
 80032c2:	250a      	movs	r5, #10
 80032c4:	9a07      	ldr	r2, [sp, #28]
 80032c6:	4639      	mov	r1, r7
 80032c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032cc:	3b30      	subs	r3, #48	; 0x30
 80032ce:	2b09      	cmp	r3, #9
 80032d0:	d94d      	bls.n	800336e <_svfiprintf_r+0x16e>
 80032d2:	b1b8      	cbz	r0, 8003304 <_svfiprintf_r+0x104>
 80032d4:	e00f      	b.n	80032f6 <_svfiprintf_r+0xf6>
 80032d6:	462f      	mov	r7, r5
 80032d8:	e7b8      	b.n	800324c <_svfiprintf_r+0x4c>
 80032da:	4a40      	ldr	r2, [pc, #256]	; (80033dc <_svfiprintf_r+0x1dc>)
 80032dc:	463d      	mov	r5, r7
 80032de:	1a80      	subs	r0, r0, r2
 80032e0:	fa0b f000 	lsl.w	r0, fp, r0
 80032e4:	4318      	orrs	r0, r3
 80032e6:	9004      	str	r0, [sp, #16]
 80032e8:	e7d3      	b.n	8003292 <_svfiprintf_r+0x92>
 80032ea:	9a03      	ldr	r2, [sp, #12]
 80032ec:	1d11      	adds	r1, r2, #4
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	9103      	str	r1, [sp, #12]
 80032f2:	2a00      	cmp	r2, #0
 80032f4:	db01      	blt.n	80032fa <_svfiprintf_r+0xfa>
 80032f6:	9207      	str	r2, [sp, #28]
 80032f8:	e004      	b.n	8003304 <_svfiprintf_r+0x104>
 80032fa:	4252      	negs	r2, r2
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	9207      	str	r2, [sp, #28]
 8003302:	9304      	str	r3, [sp, #16]
 8003304:	783b      	ldrb	r3, [r7, #0]
 8003306:	2b2e      	cmp	r3, #46	; 0x2e
 8003308:	d10c      	bne.n	8003324 <_svfiprintf_r+0x124>
 800330a:	787b      	ldrb	r3, [r7, #1]
 800330c:	2b2a      	cmp	r3, #42	; 0x2a
 800330e:	d133      	bne.n	8003378 <_svfiprintf_r+0x178>
 8003310:	9b03      	ldr	r3, [sp, #12]
 8003312:	3702      	adds	r7, #2
 8003314:	1d1a      	adds	r2, r3, #4
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	9203      	str	r2, [sp, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	bfb8      	it	lt
 800331e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003322:	9305      	str	r3, [sp, #20]
 8003324:	4d2e      	ldr	r5, [pc, #184]	; (80033e0 <_svfiprintf_r+0x1e0>)
 8003326:	2203      	movs	r2, #3
 8003328:	7839      	ldrb	r1, [r7, #0]
 800332a:	4628      	mov	r0, r5
 800332c:	f000 f9e8 	bl	8003700 <memchr>
 8003330:	b138      	cbz	r0, 8003342 <_svfiprintf_r+0x142>
 8003332:	2340      	movs	r3, #64	; 0x40
 8003334:	1b40      	subs	r0, r0, r5
 8003336:	fa03 f000 	lsl.w	r0, r3, r0
 800333a:	9b04      	ldr	r3, [sp, #16]
 800333c:	3701      	adds	r7, #1
 800333e:	4303      	orrs	r3, r0
 8003340:	9304      	str	r3, [sp, #16]
 8003342:	7839      	ldrb	r1, [r7, #0]
 8003344:	2206      	movs	r2, #6
 8003346:	4827      	ldr	r0, [pc, #156]	; (80033e4 <_svfiprintf_r+0x1e4>)
 8003348:	1c7e      	adds	r6, r7, #1
 800334a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800334e:	f000 f9d7 	bl	8003700 <memchr>
 8003352:	2800      	cmp	r0, #0
 8003354:	d038      	beq.n	80033c8 <_svfiprintf_r+0x1c8>
 8003356:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <_svfiprintf_r+0x1e8>)
 8003358:	bb13      	cbnz	r3, 80033a0 <_svfiprintf_r+0x1a0>
 800335a:	9b03      	ldr	r3, [sp, #12]
 800335c:	3307      	adds	r3, #7
 800335e:	f023 0307 	bic.w	r3, r3, #7
 8003362:	3308      	adds	r3, #8
 8003364:	9303      	str	r3, [sp, #12]
 8003366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003368:	444b      	add	r3, r9
 800336a:	9309      	str	r3, [sp, #36]	; 0x24
 800336c:	e76d      	b.n	800324a <_svfiprintf_r+0x4a>
 800336e:	fb05 3202 	mla	r2, r5, r2, r3
 8003372:	2001      	movs	r0, #1
 8003374:	460f      	mov	r7, r1
 8003376:	e7a6      	b.n	80032c6 <_svfiprintf_r+0xc6>
 8003378:	2300      	movs	r3, #0
 800337a:	250a      	movs	r5, #10
 800337c:	4619      	mov	r1, r3
 800337e:	3701      	adds	r7, #1
 8003380:	9305      	str	r3, [sp, #20]
 8003382:	4638      	mov	r0, r7
 8003384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003388:	3a30      	subs	r2, #48	; 0x30
 800338a:	2a09      	cmp	r2, #9
 800338c:	d903      	bls.n	8003396 <_svfiprintf_r+0x196>
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0c8      	beq.n	8003324 <_svfiprintf_r+0x124>
 8003392:	9105      	str	r1, [sp, #20]
 8003394:	e7c6      	b.n	8003324 <_svfiprintf_r+0x124>
 8003396:	fb05 2101 	mla	r1, r5, r1, r2
 800339a:	2301      	movs	r3, #1
 800339c:	4607      	mov	r7, r0
 800339e:	e7f0      	b.n	8003382 <_svfiprintf_r+0x182>
 80033a0:	ab03      	add	r3, sp, #12
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	4622      	mov	r2, r4
 80033a6:	4b11      	ldr	r3, [pc, #68]	; (80033ec <_svfiprintf_r+0x1ec>)
 80033a8:	a904      	add	r1, sp, #16
 80033aa:	4640      	mov	r0, r8
 80033ac:	f3af 8000 	nop.w
 80033b0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80033b4:	4681      	mov	r9, r0
 80033b6:	d1d6      	bne.n	8003366 <_svfiprintf_r+0x166>
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	065b      	lsls	r3, r3, #25
 80033bc:	f53f af35 	bmi.w	800322a <_svfiprintf_r+0x2a>
 80033c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033c2:	b01d      	add	sp, #116	; 0x74
 80033c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033c8:	ab03      	add	r3, sp, #12
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	4622      	mov	r2, r4
 80033ce:	4b07      	ldr	r3, [pc, #28]	; (80033ec <_svfiprintf_r+0x1ec>)
 80033d0:	a904      	add	r1, sp, #16
 80033d2:	4640      	mov	r0, r8
 80033d4:	f000 f882 	bl	80034dc <_printf_i>
 80033d8:	e7ea      	b.n	80033b0 <_svfiprintf_r+0x1b0>
 80033da:	bf00      	nop
 80033dc:	080039a0 	.word	0x080039a0
 80033e0:	080039a6 	.word	0x080039a6
 80033e4:	080039aa 	.word	0x080039aa
 80033e8:	00000000 	.word	0x00000000
 80033ec:	0800314d 	.word	0x0800314d

080033f0 <_printf_common>:
 80033f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f4:	4691      	mov	r9, r2
 80033f6:	461f      	mov	r7, r3
 80033f8:	688a      	ldr	r2, [r1, #8]
 80033fa:	690b      	ldr	r3, [r1, #16]
 80033fc:	4606      	mov	r6, r0
 80033fe:	4293      	cmp	r3, r2
 8003400:	bfb8      	it	lt
 8003402:	4613      	movlt	r3, r2
 8003404:	f8c9 3000 	str.w	r3, [r9]
 8003408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800340c:	460c      	mov	r4, r1
 800340e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003412:	b112      	cbz	r2, 800341a <_printf_common+0x2a>
 8003414:	3301      	adds	r3, #1
 8003416:	f8c9 3000 	str.w	r3, [r9]
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	0699      	lsls	r1, r3, #26
 800341e:	bf42      	ittt	mi
 8003420:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003424:	3302      	addmi	r3, #2
 8003426:	f8c9 3000 	strmi.w	r3, [r9]
 800342a:	6825      	ldr	r5, [r4, #0]
 800342c:	f015 0506 	ands.w	r5, r5, #6
 8003430:	d107      	bne.n	8003442 <_printf_common+0x52>
 8003432:	f104 0a19 	add.w	sl, r4, #25
 8003436:	68e3      	ldr	r3, [r4, #12]
 8003438:	f8d9 2000 	ldr.w	r2, [r9]
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	42ab      	cmp	r3, r5
 8003440:	dc29      	bgt.n	8003496 <_printf_common+0xa6>
 8003442:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003446:	6822      	ldr	r2, [r4, #0]
 8003448:	3300      	adds	r3, #0
 800344a:	bf18      	it	ne
 800344c:	2301      	movne	r3, #1
 800344e:	0692      	lsls	r2, r2, #26
 8003450:	d42e      	bmi.n	80034b0 <_printf_common+0xc0>
 8003452:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003456:	4639      	mov	r1, r7
 8003458:	4630      	mov	r0, r6
 800345a:	47c0      	blx	r8
 800345c:	3001      	adds	r0, #1
 800345e:	d021      	beq.n	80034a4 <_printf_common+0xb4>
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	68e5      	ldr	r5, [r4, #12]
 8003464:	f003 0306 	and.w	r3, r3, #6
 8003468:	2b04      	cmp	r3, #4
 800346a:	bf18      	it	ne
 800346c:	2500      	movne	r5, #0
 800346e:	f8d9 2000 	ldr.w	r2, [r9]
 8003472:	f04f 0900 	mov.w	r9, #0
 8003476:	bf08      	it	eq
 8003478:	1aad      	subeq	r5, r5, r2
 800347a:	68a3      	ldr	r3, [r4, #8]
 800347c:	6922      	ldr	r2, [r4, #16]
 800347e:	bf08      	it	eq
 8003480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003484:	4293      	cmp	r3, r2
 8003486:	bfc4      	itt	gt
 8003488:	1a9b      	subgt	r3, r3, r2
 800348a:	18ed      	addgt	r5, r5, r3
 800348c:	341a      	adds	r4, #26
 800348e:	454d      	cmp	r5, r9
 8003490:	d11a      	bne.n	80034c8 <_printf_common+0xd8>
 8003492:	2000      	movs	r0, #0
 8003494:	e008      	b.n	80034a8 <_printf_common+0xb8>
 8003496:	2301      	movs	r3, #1
 8003498:	4652      	mov	r2, sl
 800349a:	4639      	mov	r1, r7
 800349c:	4630      	mov	r0, r6
 800349e:	47c0      	blx	r8
 80034a0:	3001      	adds	r0, #1
 80034a2:	d103      	bne.n	80034ac <_printf_common+0xbc>
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ac:	3501      	adds	r5, #1
 80034ae:	e7c2      	b.n	8003436 <_printf_common+0x46>
 80034b0:	2030      	movs	r0, #48	; 0x30
 80034b2:	18e1      	adds	r1, r4, r3
 80034b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034be:	4422      	add	r2, r4
 80034c0:	3302      	adds	r3, #2
 80034c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034c6:	e7c4      	b.n	8003452 <_printf_common+0x62>
 80034c8:	2301      	movs	r3, #1
 80034ca:	4622      	mov	r2, r4
 80034cc:	4639      	mov	r1, r7
 80034ce:	4630      	mov	r0, r6
 80034d0:	47c0      	blx	r8
 80034d2:	3001      	adds	r0, #1
 80034d4:	d0e6      	beq.n	80034a4 <_printf_common+0xb4>
 80034d6:	f109 0901 	add.w	r9, r9, #1
 80034da:	e7d8      	b.n	800348e <_printf_common+0x9e>

080034dc <_printf_i>:
 80034dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80034e4:	460c      	mov	r4, r1
 80034e6:	7e09      	ldrb	r1, [r1, #24]
 80034e8:	b085      	sub	sp, #20
 80034ea:	296e      	cmp	r1, #110	; 0x6e
 80034ec:	4617      	mov	r7, r2
 80034ee:	4606      	mov	r6, r0
 80034f0:	4698      	mov	r8, r3
 80034f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80034f4:	f000 80b3 	beq.w	800365e <_printf_i+0x182>
 80034f8:	d822      	bhi.n	8003540 <_printf_i+0x64>
 80034fa:	2963      	cmp	r1, #99	; 0x63
 80034fc:	d036      	beq.n	800356c <_printf_i+0x90>
 80034fe:	d80a      	bhi.n	8003516 <_printf_i+0x3a>
 8003500:	2900      	cmp	r1, #0
 8003502:	f000 80b9 	beq.w	8003678 <_printf_i+0x19c>
 8003506:	2958      	cmp	r1, #88	; 0x58
 8003508:	f000 8083 	beq.w	8003612 <_printf_i+0x136>
 800350c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003510:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003514:	e032      	b.n	800357c <_printf_i+0xa0>
 8003516:	2964      	cmp	r1, #100	; 0x64
 8003518:	d001      	beq.n	800351e <_printf_i+0x42>
 800351a:	2969      	cmp	r1, #105	; 0x69
 800351c:	d1f6      	bne.n	800350c <_printf_i+0x30>
 800351e:	6820      	ldr	r0, [r4, #0]
 8003520:	6813      	ldr	r3, [r2, #0]
 8003522:	0605      	lsls	r5, r0, #24
 8003524:	f103 0104 	add.w	r1, r3, #4
 8003528:	d52a      	bpl.n	8003580 <_printf_i+0xa4>
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6011      	str	r1, [r2, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	da03      	bge.n	800353a <_printf_i+0x5e>
 8003532:	222d      	movs	r2, #45	; 0x2d
 8003534:	425b      	negs	r3, r3
 8003536:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800353a:	486f      	ldr	r0, [pc, #444]	; (80036f8 <_printf_i+0x21c>)
 800353c:	220a      	movs	r2, #10
 800353e:	e039      	b.n	80035b4 <_printf_i+0xd8>
 8003540:	2973      	cmp	r1, #115	; 0x73
 8003542:	f000 809d 	beq.w	8003680 <_printf_i+0x1a4>
 8003546:	d808      	bhi.n	800355a <_printf_i+0x7e>
 8003548:	296f      	cmp	r1, #111	; 0x6f
 800354a:	d020      	beq.n	800358e <_printf_i+0xb2>
 800354c:	2970      	cmp	r1, #112	; 0x70
 800354e:	d1dd      	bne.n	800350c <_printf_i+0x30>
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	f043 0320 	orr.w	r3, r3, #32
 8003556:	6023      	str	r3, [r4, #0]
 8003558:	e003      	b.n	8003562 <_printf_i+0x86>
 800355a:	2975      	cmp	r1, #117	; 0x75
 800355c:	d017      	beq.n	800358e <_printf_i+0xb2>
 800355e:	2978      	cmp	r1, #120	; 0x78
 8003560:	d1d4      	bne.n	800350c <_printf_i+0x30>
 8003562:	2378      	movs	r3, #120	; 0x78
 8003564:	4865      	ldr	r0, [pc, #404]	; (80036fc <_printf_i+0x220>)
 8003566:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800356a:	e055      	b.n	8003618 <_printf_i+0x13c>
 800356c:	6813      	ldr	r3, [r2, #0]
 800356e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003572:	1d19      	adds	r1, r3, #4
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6011      	str	r1, [r2, #0]
 8003578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800357c:	2301      	movs	r3, #1
 800357e:	e08c      	b.n	800369a <_printf_i+0x1be>
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003586:	6011      	str	r1, [r2, #0]
 8003588:	bf18      	it	ne
 800358a:	b21b      	sxthne	r3, r3
 800358c:	e7cf      	b.n	800352e <_printf_i+0x52>
 800358e:	6813      	ldr	r3, [r2, #0]
 8003590:	6825      	ldr	r5, [r4, #0]
 8003592:	1d18      	adds	r0, r3, #4
 8003594:	6010      	str	r0, [r2, #0]
 8003596:	0628      	lsls	r0, r5, #24
 8003598:	d501      	bpl.n	800359e <_printf_i+0xc2>
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	e002      	b.n	80035a4 <_printf_i+0xc8>
 800359e:	0668      	lsls	r0, r5, #25
 80035a0:	d5fb      	bpl.n	800359a <_printf_i+0xbe>
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	296f      	cmp	r1, #111	; 0x6f
 80035a6:	bf14      	ite	ne
 80035a8:	220a      	movne	r2, #10
 80035aa:	2208      	moveq	r2, #8
 80035ac:	4852      	ldr	r0, [pc, #328]	; (80036f8 <_printf_i+0x21c>)
 80035ae:	2100      	movs	r1, #0
 80035b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035b4:	6865      	ldr	r5, [r4, #4]
 80035b6:	2d00      	cmp	r5, #0
 80035b8:	60a5      	str	r5, [r4, #8]
 80035ba:	f2c0 8095 	blt.w	80036e8 <_printf_i+0x20c>
 80035be:	6821      	ldr	r1, [r4, #0]
 80035c0:	f021 0104 	bic.w	r1, r1, #4
 80035c4:	6021      	str	r1, [r4, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d13d      	bne.n	8003646 <_printf_i+0x16a>
 80035ca:	2d00      	cmp	r5, #0
 80035cc:	f040 808e 	bne.w	80036ec <_printf_i+0x210>
 80035d0:	4665      	mov	r5, ip
 80035d2:	2a08      	cmp	r2, #8
 80035d4:	d10b      	bne.n	80035ee <_printf_i+0x112>
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	07db      	lsls	r3, r3, #31
 80035da:	d508      	bpl.n	80035ee <_printf_i+0x112>
 80035dc:	6923      	ldr	r3, [r4, #16]
 80035de:	6862      	ldr	r2, [r4, #4]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	bfde      	ittt	le
 80035e4:	2330      	movle	r3, #48	; 0x30
 80035e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035ea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80035ee:	ebac 0305 	sub.w	r3, ip, r5
 80035f2:	6123      	str	r3, [r4, #16]
 80035f4:	f8cd 8000 	str.w	r8, [sp]
 80035f8:	463b      	mov	r3, r7
 80035fa:	aa03      	add	r2, sp, #12
 80035fc:	4621      	mov	r1, r4
 80035fe:	4630      	mov	r0, r6
 8003600:	f7ff fef6 	bl	80033f0 <_printf_common>
 8003604:	3001      	adds	r0, #1
 8003606:	d14d      	bne.n	80036a4 <_printf_i+0x1c8>
 8003608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800360c:	b005      	add	sp, #20
 800360e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003612:	4839      	ldr	r0, [pc, #228]	; (80036f8 <_printf_i+0x21c>)
 8003614:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003618:	6813      	ldr	r3, [r2, #0]
 800361a:	6821      	ldr	r1, [r4, #0]
 800361c:	1d1d      	adds	r5, r3, #4
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6015      	str	r5, [r2, #0]
 8003622:	060a      	lsls	r2, r1, #24
 8003624:	d50b      	bpl.n	800363e <_printf_i+0x162>
 8003626:	07ca      	lsls	r2, r1, #31
 8003628:	bf44      	itt	mi
 800362a:	f041 0120 	orrmi.w	r1, r1, #32
 800362e:	6021      	strmi	r1, [r4, #0]
 8003630:	b91b      	cbnz	r3, 800363a <_printf_i+0x15e>
 8003632:	6822      	ldr	r2, [r4, #0]
 8003634:	f022 0220 	bic.w	r2, r2, #32
 8003638:	6022      	str	r2, [r4, #0]
 800363a:	2210      	movs	r2, #16
 800363c:	e7b7      	b.n	80035ae <_printf_i+0xd2>
 800363e:	064d      	lsls	r5, r1, #25
 8003640:	bf48      	it	mi
 8003642:	b29b      	uxthmi	r3, r3
 8003644:	e7ef      	b.n	8003626 <_printf_i+0x14a>
 8003646:	4665      	mov	r5, ip
 8003648:	fbb3 f1f2 	udiv	r1, r3, r2
 800364c:	fb02 3311 	mls	r3, r2, r1, r3
 8003650:	5cc3      	ldrb	r3, [r0, r3]
 8003652:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003656:	460b      	mov	r3, r1
 8003658:	2900      	cmp	r1, #0
 800365a:	d1f5      	bne.n	8003648 <_printf_i+0x16c>
 800365c:	e7b9      	b.n	80035d2 <_printf_i+0xf6>
 800365e:	6813      	ldr	r3, [r2, #0]
 8003660:	6825      	ldr	r5, [r4, #0]
 8003662:	1d18      	adds	r0, r3, #4
 8003664:	6961      	ldr	r1, [r4, #20]
 8003666:	6010      	str	r0, [r2, #0]
 8003668:	0628      	lsls	r0, r5, #24
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	d501      	bpl.n	8003672 <_printf_i+0x196>
 800366e:	6019      	str	r1, [r3, #0]
 8003670:	e002      	b.n	8003678 <_printf_i+0x19c>
 8003672:	066a      	lsls	r2, r5, #25
 8003674:	d5fb      	bpl.n	800366e <_printf_i+0x192>
 8003676:	8019      	strh	r1, [r3, #0]
 8003678:	2300      	movs	r3, #0
 800367a:	4665      	mov	r5, ip
 800367c:	6123      	str	r3, [r4, #16]
 800367e:	e7b9      	b.n	80035f4 <_printf_i+0x118>
 8003680:	6813      	ldr	r3, [r2, #0]
 8003682:	1d19      	adds	r1, r3, #4
 8003684:	6011      	str	r1, [r2, #0]
 8003686:	681d      	ldr	r5, [r3, #0]
 8003688:	6862      	ldr	r2, [r4, #4]
 800368a:	2100      	movs	r1, #0
 800368c:	4628      	mov	r0, r5
 800368e:	f000 f837 	bl	8003700 <memchr>
 8003692:	b108      	cbz	r0, 8003698 <_printf_i+0x1bc>
 8003694:	1b40      	subs	r0, r0, r5
 8003696:	6060      	str	r0, [r4, #4]
 8003698:	6863      	ldr	r3, [r4, #4]
 800369a:	6123      	str	r3, [r4, #16]
 800369c:	2300      	movs	r3, #0
 800369e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036a2:	e7a7      	b.n	80035f4 <_printf_i+0x118>
 80036a4:	6923      	ldr	r3, [r4, #16]
 80036a6:	462a      	mov	r2, r5
 80036a8:	4639      	mov	r1, r7
 80036aa:	4630      	mov	r0, r6
 80036ac:	47c0      	blx	r8
 80036ae:	3001      	adds	r0, #1
 80036b0:	d0aa      	beq.n	8003608 <_printf_i+0x12c>
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	079b      	lsls	r3, r3, #30
 80036b6:	d413      	bmi.n	80036e0 <_printf_i+0x204>
 80036b8:	68e0      	ldr	r0, [r4, #12]
 80036ba:	9b03      	ldr	r3, [sp, #12]
 80036bc:	4298      	cmp	r0, r3
 80036be:	bfb8      	it	lt
 80036c0:	4618      	movlt	r0, r3
 80036c2:	e7a3      	b.n	800360c <_printf_i+0x130>
 80036c4:	2301      	movs	r3, #1
 80036c6:	464a      	mov	r2, r9
 80036c8:	4639      	mov	r1, r7
 80036ca:	4630      	mov	r0, r6
 80036cc:	47c0      	blx	r8
 80036ce:	3001      	adds	r0, #1
 80036d0:	d09a      	beq.n	8003608 <_printf_i+0x12c>
 80036d2:	3501      	adds	r5, #1
 80036d4:	68e3      	ldr	r3, [r4, #12]
 80036d6:	9a03      	ldr	r2, [sp, #12]
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	42ab      	cmp	r3, r5
 80036dc:	dcf2      	bgt.n	80036c4 <_printf_i+0x1e8>
 80036de:	e7eb      	b.n	80036b8 <_printf_i+0x1dc>
 80036e0:	2500      	movs	r5, #0
 80036e2:	f104 0919 	add.w	r9, r4, #25
 80036e6:	e7f5      	b.n	80036d4 <_printf_i+0x1f8>
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ac      	bne.n	8003646 <_printf_i+0x16a>
 80036ec:	7803      	ldrb	r3, [r0, #0]
 80036ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036f6:	e76c      	b.n	80035d2 <_printf_i+0xf6>
 80036f8:	080039b1 	.word	0x080039b1
 80036fc:	080039c2 	.word	0x080039c2

08003700 <memchr>:
 8003700:	b510      	push	{r4, lr}
 8003702:	b2c9      	uxtb	r1, r1
 8003704:	4402      	add	r2, r0
 8003706:	4290      	cmp	r0, r2
 8003708:	4603      	mov	r3, r0
 800370a:	d101      	bne.n	8003710 <memchr+0x10>
 800370c:	2300      	movs	r3, #0
 800370e:	e003      	b.n	8003718 <memchr+0x18>
 8003710:	781c      	ldrb	r4, [r3, #0]
 8003712:	3001      	adds	r0, #1
 8003714:	428c      	cmp	r4, r1
 8003716:	d1f6      	bne.n	8003706 <memchr+0x6>
 8003718:	4618      	mov	r0, r3
 800371a:	bd10      	pop	{r4, pc}

0800371c <memcpy>:
 800371c:	b510      	push	{r4, lr}
 800371e:	1e43      	subs	r3, r0, #1
 8003720:	440a      	add	r2, r1
 8003722:	4291      	cmp	r1, r2
 8003724:	d100      	bne.n	8003728 <memcpy+0xc>
 8003726:	bd10      	pop	{r4, pc}
 8003728:	f811 4b01 	ldrb.w	r4, [r1], #1
 800372c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003730:	e7f7      	b.n	8003722 <memcpy+0x6>

08003732 <memmove>:
 8003732:	4288      	cmp	r0, r1
 8003734:	b510      	push	{r4, lr}
 8003736:	eb01 0302 	add.w	r3, r1, r2
 800373a:	d807      	bhi.n	800374c <memmove+0x1a>
 800373c:	1e42      	subs	r2, r0, #1
 800373e:	4299      	cmp	r1, r3
 8003740:	d00a      	beq.n	8003758 <memmove+0x26>
 8003742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003746:	f802 4f01 	strb.w	r4, [r2, #1]!
 800374a:	e7f8      	b.n	800373e <memmove+0xc>
 800374c:	4283      	cmp	r3, r0
 800374e:	d9f5      	bls.n	800373c <memmove+0xa>
 8003750:	1881      	adds	r1, r0, r2
 8003752:	1ad2      	subs	r2, r2, r3
 8003754:	42d3      	cmn	r3, r2
 8003756:	d100      	bne.n	800375a <memmove+0x28>
 8003758:	bd10      	pop	{r4, pc}
 800375a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800375e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003762:	e7f7      	b.n	8003754 <memmove+0x22>

08003764 <_free_r>:
 8003764:	b538      	push	{r3, r4, r5, lr}
 8003766:	4605      	mov	r5, r0
 8003768:	2900      	cmp	r1, #0
 800376a:	d043      	beq.n	80037f4 <_free_r+0x90>
 800376c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003770:	1f0c      	subs	r4, r1, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	bfb8      	it	lt
 8003776:	18e4      	addlt	r4, r4, r3
 8003778:	f000 f8d0 	bl	800391c <__malloc_lock>
 800377c:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <_free_r+0x94>)
 800377e:	6813      	ldr	r3, [r2, #0]
 8003780:	4610      	mov	r0, r2
 8003782:	b933      	cbnz	r3, 8003792 <_free_r+0x2e>
 8003784:	6063      	str	r3, [r4, #4]
 8003786:	6014      	str	r4, [r2, #0]
 8003788:	4628      	mov	r0, r5
 800378a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800378e:	f000 b8c6 	b.w	800391e <__malloc_unlock>
 8003792:	42a3      	cmp	r3, r4
 8003794:	d90b      	bls.n	80037ae <_free_r+0x4a>
 8003796:	6821      	ldr	r1, [r4, #0]
 8003798:	1862      	adds	r2, r4, r1
 800379a:	4293      	cmp	r3, r2
 800379c:	bf01      	itttt	eq
 800379e:	681a      	ldreq	r2, [r3, #0]
 80037a0:	685b      	ldreq	r3, [r3, #4]
 80037a2:	1852      	addeq	r2, r2, r1
 80037a4:	6022      	streq	r2, [r4, #0]
 80037a6:	6063      	str	r3, [r4, #4]
 80037a8:	6004      	str	r4, [r0, #0]
 80037aa:	e7ed      	b.n	8003788 <_free_r+0x24>
 80037ac:	4613      	mov	r3, r2
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	b10a      	cbz	r2, 80037b6 <_free_r+0x52>
 80037b2:	42a2      	cmp	r2, r4
 80037b4:	d9fa      	bls.n	80037ac <_free_r+0x48>
 80037b6:	6819      	ldr	r1, [r3, #0]
 80037b8:	1858      	adds	r0, r3, r1
 80037ba:	42a0      	cmp	r0, r4
 80037bc:	d10b      	bne.n	80037d6 <_free_r+0x72>
 80037be:	6820      	ldr	r0, [r4, #0]
 80037c0:	4401      	add	r1, r0
 80037c2:	1858      	adds	r0, r3, r1
 80037c4:	4282      	cmp	r2, r0
 80037c6:	6019      	str	r1, [r3, #0]
 80037c8:	d1de      	bne.n	8003788 <_free_r+0x24>
 80037ca:	6810      	ldr	r0, [r2, #0]
 80037cc:	6852      	ldr	r2, [r2, #4]
 80037ce:	4401      	add	r1, r0
 80037d0:	6019      	str	r1, [r3, #0]
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	e7d8      	b.n	8003788 <_free_r+0x24>
 80037d6:	d902      	bls.n	80037de <_free_r+0x7a>
 80037d8:	230c      	movs	r3, #12
 80037da:	602b      	str	r3, [r5, #0]
 80037dc:	e7d4      	b.n	8003788 <_free_r+0x24>
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	1821      	adds	r1, r4, r0
 80037e2:	428a      	cmp	r2, r1
 80037e4:	bf01      	itttt	eq
 80037e6:	6811      	ldreq	r1, [r2, #0]
 80037e8:	6852      	ldreq	r2, [r2, #4]
 80037ea:	1809      	addeq	r1, r1, r0
 80037ec:	6021      	streq	r1, [r4, #0]
 80037ee:	6062      	str	r2, [r4, #4]
 80037f0:	605c      	str	r4, [r3, #4]
 80037f2:	e7c9      	b.n	8003788 <_free_r+0x24>
 80037f4:	bd38      	pop	{r3, r4, r5, pc}
 80037f6:	bf00      	nop
 80037f8:	20000098 	.word	0x20000098

080037fc <_malloc_r>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	1ccd      	adds	r5, r1, #3
 8003800:	f025 0503 	bic.w	r5, r5, #3
 8003804:	3508      	adds	r5, #8
 8003806:	2d0c      	cmp	r5, #12
 8003808:	bf38      	it	cc
 800380a:	250c      	movcc	r5, #12
 800380c:	2d00      	cmp	r5, #0
 800380e:	4606      	mov	r6, r0
 8003810:	db01      	blt.n	8003816 <_malloc_r+0x1a>
 8003812:	42a9      	cmp	r1, r5
 8003814:	d903      	bls.n	800381e <_malloc_r+0x22>
 8003816:	230c      	movs	r3, #12
 8003818:	6033      	str	r3, [r6, #0]
 800381a:	2000      	movs	r0, #0
 800381c:	bd70      	pop	{r4, r5, r6, pc}
 800381e:	f000 f87d 	bl	800391c <__malloc_lock>
 8003822:	4a21      	ldr	r2, [pc, #132]	; (80038a8 <_malloc_r+0xac>)
 8003824:	6814      	ldr	r4, [r2, #0]
 8003826:	4621      	mov	r1, r4
 8003828:	b991      	cbnz	r1, 8003850 <_malloc_r+0x54>
 800382a:	4c20      	ldr	r4, [pc, #128]	; (80038ac <_malloc_r+0xb0>)
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	b91b      	cbnz	r3, 8003838 <_malloc_r+0x3c>
 8003830:	4630      	mov	r0, r6
 8003832:	f000 f863 	bl	80038fc <_sbrk_r>
 8003836:	6020      	str	r0, [r4, #0]
 8003838:	4629      	mov	r1, r5
 800383a:	4630      	mov	r0, r6
 800383c:	f000 f85e 	bl	80038fc <_sbrk_r>
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d124      	bne.n	800388e <_malloc_r+0x92>
 8003844:	230c      	movs	r3, #12
 8003846:	4630      	mov	r0, r6
 8003848:	6033      	str	r3, [r6, #0]
 800384a:	f000 f868 	bl	800391e <__malloc_unlock>
 800384e:	e7e4      	b.n	800381a <_malloc_r+0x1e>
 8003850:	680b      	ldr	r3, [r1, #0]
 8003852:	1b5b      	subs	r3, r3, r5
 8003854:	d418      	bmi.n	8003888 <_malloc_r+0x8c>
 8003856:	2b0b      	cmp	r3, #11
 8003858:	d90f      	bls.n	800387a <_malloc_r+0x7e>
 800385a:	600b      	str	r3, [r1, #0]
 800385c:	18cc      	adds	r4, r1, r3
 800385e:	50cd      	str	r5, [r1, r3]
 8003860:	4630      	mov	r0, r6
 8003862:	f000 f85c 	bl	800391e <__malloc_unlock>
 8003866:	f104 000b 	add.w	r0, r4, #11
 800386a:	1d23      	adds	r3, r4, #4
 800386c:	f020 0007 	bic.w	r0, r0, #7
 8003870:	1ac3      	subs	r3, r0, r3
 8003872:	d0d3      	beq.n	800381c <_malloc_r+0x20>
 8003874:	425a      	negs	r2, r3
 8003876:	50e2      	str	r2, [r4, r3]
 8003878:	e7d0      	b.n	800381c <_malloc_r+0x20>
 800387a:	684b      	ldr	r3, [r1, #4]
 800387c:	428c      	cmp	r4, r1
 800387e:	bf16      	itet	ne
 8003880:	6063      	strne	r3, [r4, #4]
 8003882:	6013      	streq	r3, [r2, #0]
 8003884:	460c      	movne	r4, r1
 8003886:	e7eb      	b.n	8003860 <_malloc_r+0x64>
 8003888:	460c      	mov	r4, r1
 800388a:	6849      	ldr	r1, [r1, #4]
 800388c:	e7cc      	b.n	8003828 <_malloc_r+0x2c>
 800388e:	1cc4      	adds	r4, r0, #3
 8003890:	f024 0403 	bic.w	r4, r4, #3
 8003894:	42a0      	cmp	r0, r4
 8003896:	d005      	beq.n	80038a4 <_malloc_r+0xa8>
 8003898:	1a21      	subs	r1, r4, r0
 800389a:	4630      	mov	r0, r6
 800389c:	f000 f82e 	bl	80038fc <_sbrk_r>
 80038a0:	3001      	adds	r0, #1
 80038a2:	d0cf      	beq.n	8003844 <_malloc_r+0x48>
 80038a4:	6025      	str	r5, [r4, #0]
 80038a6:	e7db      	b.n	8003860 <_malloc_r+0x64>
 80038a8:	20000098 	.word	0x20000098
 80038ac:	2000009c 	.word	0x2000009c

080038b0 <_realloc_r>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	4607      	mov	r7, r0
 80038b4:	4614      	mov	r4, r2
 80038b6:	460e      	mov	r6, r1
 80038b8:	b921      	cbnz	r1, 80038c4 <_realloc_r+0x14>
 80038ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80038be:	4611      	mov	r1, r2
 80038c0:	f7ff bf9c 	b.w	80037fc <_malloc_r>
 80038c4:	b922      	cbnz	r2, 80038d0 <_realloc_r+0x20>
 80038c6:	f7ff ff4d 	bl	8003764 <_free_r>
 80038ca:	4625      	mov	r5, r4
 80038cc:	4628      	mov	r0, r5
 80038ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d0:	f000 f826 	bl	8003920 <_malloc_usable_size_r>
 80038d4:	42a0      	cmp	r0, r4
 80038d6:	d20f      	bcs.n	80038f8 <_realloc_r+0x48>
 80038d8:	4621      	mov	r1, r4
 80038da:	4638      	mov	r0, r7
 80038dc:	f7ff ff8e 	bl	80037fc <_malloc_r>
 80038e0:	4605      	mov	r5, r0
 80038e2:	2800      	cmp	r0, #0
 80038e4:	d0f2      	beq.n	80038cc <_realloc_r+0x1c>
 80038e6:	4631      	mov	r1, r6
 80038e8:	4622      	mov	r2, r4
 80038ea:	f7ff ff17 	bl	800371c <memcpy>
 80038ee:	4631      	mov	r1, r6
 80038f0:	4638      	mov	r0, r7
 80038f2:	f7ff ff37 	bl	8003764 <_free_r>
 80038f6:	e7e9      	b.n	80038cc <_realloc_r+0x1c>
 80038f8:	4635      	mov	r5, r6
 80038fa:	e7e7      	b.n	80038cc <_realloc_r+0x1c>

080038fc <_sbrk_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	2300      	movs	r3, #0
 8003900:	4c05      	ldr	r4, [pc, #20]	; (8003918 <_sbrk_r+0x1c>)
 8003902:	4605      	mov	r5, r0
 8003904:	4608      	mov	r0, r1
 8003906:	6023      	str	r3, [r4, #0]
 8003908:	f7fc ff6e 	bl	80007e8 <_sbrk>
 800390c:	1c43      	adds	r3, r0, #1
 800390e:	d102      	bne.n	8003916 <_sbrk_r+0x1a>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	b103      	cbz	r3, 8003916 <_sbrk_r+0x1a>
 8003914:	602b      	str	r3, [r5, #0]
 8003916:	bd38      	pop	{r3, r4, r5, pc}
 8003918:	200001bc 	.word	0x200001bc

0800391c <__malloc_lock>:
 800391c:	4770      	bx	lr

0800391e <__malloc_unlock>:
 800391e:	4770      	bx	lr

08003920 <_malloc_usable_size_r>:
 8003920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003924:	1f18      	subs	r0, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	bfbc      	itt	lt
 800392a:	580b      	ldrlt	r3, [r1, r0]
 800392c:	18c0      	addlt	r0, r0, r3
 800392e:	4770      	bx	lr

08003930 <_init>:
 8003930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003932:	bf00      	nop
 8003934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003936:	bc08      	pop	{r3}
 8003938:	469e      	mov	lr, r3
 800393a:	4770      	bx	lr

0800393c <_fini>:
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	bf00      	nop
 8003940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003942:	bc08      	pop	{r3}
 8003944:	469e      	mov	lr, r3
 8003946:	4770      	bx	lr
